/*
    MIT License

    Copyright (c) 2024 UnrealSharp

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    Project URL: https://github.com/bodong1987/UnrealSharp
*/
// ReSharper disable CommentTypo
// ***********************************************************************
// Author           : bodong
// ***********************************************************************
// <copyright file="UnrealSharpInvokeBinding_0.cpp">
//     Copyright (c) 2024 UnrealSharp. 
// <summary>
// This code file is automatically generated by UnrealSharpTool. 
// Manually modifying this file will lose the modifications at the next generate time. 
// </summary>
// ***********************************************************************
// These codes are automatically generated by UnrealSharpTool in order to realize fast function calls from C# to C++.
// Please do not modify this file manually.

// ReSharper disable all
#include "CoreMinimal.h"
#include "Misc/UnrealInteropFunctions.h"
#include "Misc/CSharpStructures.h"
#include "AI/Navigation/AvoidanceManager.h"
#include "Animation/AnimationAsset.h"
#include "Animation/AnimData/AnimDataModel.h"
#include "Animation/AnimInstance.h"
#include "Animation/AnimMontage.h"
#include "Animation/AnimNotifies/AnimNotify.h"
#include "Animation/AnimNotifies/AnimNotifyState_Trail.h"
#include "Animation/AnimNotifies/AnimNotifyState.h"
#include "Animation/AnimSingleNodeInstance.h"
#include "Animation/SkeletalMeshActor.h"
#include "Atmosphere/AtmosphericFogComponent.h"
#include "Camera/CameraActor.h"
#include "Camera/CameraComponent.h"
#include "Camera/CameraModifier.h"
#include "Camera/CameraShakeBase.h"
#include "Camera/CameraShakeSourceComponent.h"
#include "Camera/PlayerCameraManager.h"
#include "Components/ActorComponent.h"
#include "Components/ArrowComponent.h"
#include "Components/AudioComponent.h"
#include "Components/BillboardComponent.h"
#include "Components/BoxComponent.h"
#include "Components/CapsuleComponent.h"
#include "Engine/CancellableAsyncAction.h"
#include "Engine/Canvas.h"
#include "Engine/CanvasRenderTarget2D.h"
#include "Engine/DebugCameraController.h"
#include "Engine/ExponentialHeightFog.h"
#include "Engine/LevelScriptActor.h"
#include "Engine/Light.h"
#include "Engine/SceneCaptureCube.h"
#include "Engine/SkyLight.h"
#include "Engine/StaticMeshActor.h"
#include "GameFramework/Actor.h"
#include "GameFramework/Character.h"
#include "GameFramework/CharacterMovementComponent.h"
#include "GameFramework/Controller.h"
#include "GameFramework/DefaultPawn.h"
#include "GameFramework/GameMode.h"
#include "GameFramework/GameModeBase.h"
#include "GameFramework/GameState.h"
#include "GameFramework/GameStateBase.h"
#include "GameFramework/HUD.h"
#include "GameFramework/Pawn.h"
#include "GameFramework/PlayerController.h"
#include "GameFramework/PlayerState.h"
#include "GameFramework/WorldSettings.h"
#include "Kismet/BlueprintPathsLibrary.h"
#include "Kismet/BlueprintPlatformLibrary.h"
#include "LevelInstance/LevelInstanceActor.h"
#include "LocationVolume.h"
#include "Particles/Emitter.h"
#include "Particles/EmitterCameraLensEffectBase.h"
#include "Physics/AsyncPhysicsInputComponent.h"
#include "PhysicsEngine/ClusterUnionActor.h"
#include "Sound/AudioVolume.h"
#include "SparseVolumeTexture/SparseVolumeTexture.h"
#include "WorldPartition/DataLayer/WorldDataLayers.h"

#if PLATFORM_WINDOWS
#pragma warning(push)
#pragma warning(disable:4996)
#else
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated"
#endif

namespace UnrealSharp::Bindings
{
    void AActor_WasRecentlyRendered(AActor* __this, float Tolerance, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->WasRecentlyRendered(Tolerance);
    }

    void AActor_TearOff(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->TearOff();
    }

    void AActor_SetTickGroup(AActor* __this, TEnumAsByte<ETickingGroup> NewTickGroup)
    {
        checkSlow(__this != nullptr);
        __this->SetTickGroup(NewTickGroup);
    }

    void AActor_SetTickableWhenPaused(AActor* __this, bool bTickableWhenPaused)
    {
        checkSlow(__this != nullptr);
        __this->SetTickableWhenPaused(bTickableWhenPaused);
    }

    void AActor_SetReplicates(AActor* __this, bool bInReplicates)
    {
        checkSlow(__this != nullptr);
        __this->SetReplicates(bInReplicates);
    }

    void AActor_SetReplicateMovement(AActor* __this, bool bInReplicateMovement)
    {
        checkSlow(__this != nullptr);
        __this->SetReplicateMovement(bInReplicateMovement);
    }

    void AActor_SetRayTracingGroupId(AActor* __this, int32 InRaytracingGroupId)
    {
        checkSlow(__this != nullptr);
        __this->SetRayTracingGroupId(InRaytracingGroupId);
    }

    void AActor_SetPhysicsReplicationMode(AActor* __this, const EPhysicsReplicationMode ReplicationMode)
    {
        checkSlow(__this != nullptr);
        __this->SetPhysicsReplicationMode(ReplicationMode);
    }

    void AActor_SetOwner(AActor* __this, AActor* NewOwner)
    {
        checkSlow(__this != nullptr);
        __this->SetOwner(NewOwner);
    }

    void AActor_SetNetDormancy(AActor* __this, TEnumAsByte<ENetDormancy> NewDormancy)
    {
        checkSlow(__this != nullptr);
        __this->SetNetDormancy(NewDormancy);
    }

    void AActor_SetLifeSpan(AActor* __this, float InLifespan)
    {
        checkSlow(__this != nullptr);
        __this->SetLifeSpan(InLifespan);
    }

    void AActor_SetAutoDestroyWhenFinished(AActor* __this, bool bVal)
    {
        checkSlow(__this != nullptr);
        __this->SetAutoDestroyWhenFinished(bVal);
    }

    void AActor_SetActorTickInterval(AActor* __this, float TickInterval)
    {
        checkSlow(__this != nullptr);
        __this->SetActorTickInterval(TickInterval);
    }

    void AActor_SetActorTickEnabled(AActor* __this, bool bEnabled)
    {
        checkSlow(__this != nullptr);
        __this->SetActorTickEnabled(bEnabled);
    }

    void AActor_SetActorScale3D(AActor* __this, FVector& NewScale3D)
    {
        checkSlow(__this != nullptr);
        __this->SetActorScale3D(NewScale3D);
    }

    void AActor_SetActorRelativeScale3D(AActor* __this, FVector& NewRelativeScale)
    {
        checkSlow(__this != nullptr);
        __this->SetActorRelativeScale3D(NewRelativeScale);
    }

    void AActor_SetActorHiddenInGame(AActor* __this, bool bNewHidden)
    {
        checkSlow(__this != nullptr);
        __this->SetActorHiddenInGame(bNewHidden);
    }

    void AActor_SetActorEnableCollision(AActor* __this, bool bNewActorEnableCollision)
    {
        checkSlow(__this != nullptr);
        __this->SetActorEnableCollision(bNewActorEnableCollision);
    }

    void AActor_RemoveTickPrerequisiteComponent(AActor* __this, UActorComponent* PrerequisiteComponent)
    {
        checkSlow(__this != nullptr);
        __this->RemoveTickPrerequisiteComponent(PrerequisiteComponent);
    }

    void AActor_RemoveTickPrerequisiteActor(AActor* __this, AActor* PrerequisiteActor)
    {
        checkSlow(__this != nullptr);
        __this->RemoveTickPrerequisiteActor(PrerequisiteActor);
    }

    void AActor_ReceiveTick(AActor* __this, float DeltaSeconds)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveTick(DeltaSeconds);
    }

    void AActor_ReceiveDestroyed(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveDestroyed();
    }

    void AActor_ReceiveAsyncPhysicsTick(AActor* __this, float DeltaSeconds, float SimSeconds)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveAsyncPhysicsTick(DeltaSeconds, SimSeconds);
    }

    void AActor_ReceiveAnyDamage(AActor* __this, float Damage, const UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveAnyDamage(Damage, DamageType, InstigatedBy, DamageCauser);
    }

    void AActor_ReceiveActorOnInputTouchLeave(AActor* __this, const TEnumAsByte<ETouchIndex::Type> FingerIndex)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveActorOnInputTouchLeave(FingerIndex);
    }

    void AActor_ReceiveActorOnInputTouchEnter(AActor* __this, const TEnumAsByte<ETouchIndex::Type> FingerIndex)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveActorOnInputTouchEnter(FingerIndex);
    }

    void AActor_ReceiveActorOnInputTouchEnd(AActor* __this, const TEnumAsByte<ETouchIndex::Type> FingerIndex)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveActorOnInputTouchEnd(FingerIndex);
    }

    void AActor_ReceiveActorOnInputTouchBegin(AActor* __this, const TEnumAsByte<ETouchIndex::Type> FingerIndex)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveActorOnInputTouchBegin(FingerIndex);
    }

    void AActor_ReceiveActorEndOverlap(AActor* __this, AActor* OtherActor)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveActorEndOverlap(OtherActor);
    }

    void AActor_ReceiveActorEndCursorOver(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveActorEndCursorOver();
    }

    void AActor_ReceiveActorBeginOverlap(AActor* __this, AActor* OtherActor)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveActorBeginOverlap(OtherActor);
    }

    void AActor_ReceiveActorBeginCursorOver(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveActorBeginCursorOver();
    }

    void AActor_PrestreamTextures(AActor* __this, float Seconds, bool bEnableStreaming, int32 CinematicTextureGroups)
    {
        checkSlow(__this != nullptr);
        __this->PrestreamTextures(Seconds, bEnableStreaming, CinematicTextureGroups);
    }

    void AActor_OnRep_ReplicateMovement(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_ReplicateMovement();
    }

    void AActor_OnRep_ReplicatedMovement(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_ReplicatedMovement();
    }

    void AActor_OnRep_Instigator(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_Instigator();
    }

    void AActor_OnRep_AttachmentReplication(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_AttachmentReplication();
    }

    void AActor_MakeNoise(AActor* __this, float Loudness, APawn* NoiseInstigator, FVector& NoiseLocation, float MaxRange, FName& Tag)
    {
        checkSlow(__this != nullptr);
        __this->MakeNoise(Loudness, NoiseInstigator, NoiseLocation, MaxRange, Tag);
    }

    void AActor_K2_TeleportTo(AActor* __this, FVector& DestLocation, FRotator& DestRotation, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_TeleportTo(DestLocation, DestRotation);
    }

    void AActor_K2_SetActorRotation(AActor* __this, FRotator& NewRotation, bool bTeleportPhysics, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_SetActorRotation(NewRotation, bTeleportPhysics);
    }

    void AActor_K2_OnReset(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->K2_OnReset();
    }

    void AActor_K2_OnEndViewTarget(AActor* __this, APlayerController* PC)
    {
        checkSlow(__this != nullptr);
        __this->K2_OnEndViewTarget(PC);
    }

    void AActor_K2_OnBecomeViewTarget(AActor* __this, APlayerController* PC)
    {
        checkSlow(__this != nullptr);
        __this->K2_OnBecomeViewTarget(PC);
    }

    void AActor_K2_GetRootComponent(AActor* __this, USceneComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetRootComponent();
    }

    void AActor_K2_GetActorRotation(AActor* __this, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetActorRotation();
    }

    void AActor_K2_GetActorLocation(AActor* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetActorLocation();
    }

    void AActor_K2_DetachFromActor(AActor* __this, EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule)
    {
        checkSlow(__this != nullptr);
        __this->K2_DetachFromActor(LocationRule, RotationRule, ScaleRule);
    }

    void AActor_K2_DestroyActor(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->K2_DestroyActor();
    }

    void AActor_K2_AttachToComponent(AActor* __this, USceneComponent* Parent, FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_AttachToComponent(Parent, SocketName, LocationRule, RotationRule, ScaleRule, bWeldSimulatedBodies);
    }

    void AActor_K2_AttachToActor(AActor* __this, AActor* ParentActor, FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_AttachToActor(ParentActor, SocketName, LocationRule, RotationRule, ScaleRule, bWeldSimulatedBodies);
    }

    void AActor_K2_AttachRootComponentToActor(AActor* __this, AActor* InParentActor, FName& InSocketName, TEnumAsByte<EAttachLocation::Type> AttachLocationType, bool bWeldSimulatedBodies)
    {
        checkSlow(__this != nullptr);
        __this->K2_AttachRootComponentToActor(InParentActor, InSocketName, AttachLocationType, bWeldSimulatedBodies);
    }

    void AActor_K2_AttachRootComponentTo(AActor* __this, USceneComponent* InParent, FName& InSocketName, TEnumAsByte<EAttachLocation::Type> AttachLocationType, bool bWeldSimulatedBodies)
    {
        checkSlow(__this != nullptr);
        __this->K2_AttachRootComponentTo(InParent, InSocketName, AttachLocationType, bWeldSimulatedBodies);
    }

    void AActor_IsOverlappingActor(AActor* __this, const AActor* Other, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsOverlappingActor(Other);
    }

    void AActor_IsChildActor(AActor* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsChildActor();
    }

    void AActor_IsActorTickEnabled(AActor* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsActorTickEnabled();
    }

    void AActor_IsActorBeingDestroyed(AActor* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsActorBeingDestroyed();
    }

    void AActor_HasAuthority(AActor* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAuthority();
    }

    void AActor_GetVerticalDistanceTo(AActor* __this, const AActor* OtherActor, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetVerticalDistanceTo(OtherActor);
    }

    void AActor_GetVelocity(AActor* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetVelocity();
    }

    void AActor_GetTickableWhenPaused(AActor* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTickableWhenPaused();
    }

    void AActor_GetSquaredHorizontalDistanceTo(AActor* __this, const AActor* OtherActor, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSquaredHorizontalDistanceTo(OtherActor);
    }

    void AActor_GetSquaredDistanceTo(AActor* __this, const AActor* OtherActor, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSquaredDistanceTo(OtherActor);
    }

    void AActor_GetResimulationThreshold(AActor* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetResimulationThreshold();
    }

    void AActor_GetRemoteRole(AActor* __this, TEnumAsByte<ENetRole>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRemoteRole();
    }

    void AActor_GetRayTracingGroupId(AActor* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRayTracingGroupId();
    }

    void AActor_GetPhysicsReplicationMode(AActor* __this, EPhysicsReplicationMode& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicsReplicationMode();
    }

    void AActor_GetParentComponent(AActor* __this, UChildActorComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetParentComponent();
    }

    void AActor_GetParentActor(AActor* __this, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetParentActor();
    }

    void AActor_GetOwner(AActor* __this, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOwner();
    }

    void AActor_GetLocalRole(AActor* __this, TEnumAsByte<ENetRole>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLocalRole();
    }

    void AActor_GetLifeSpan(AActor* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLifeSpan();
    }

    void AActor_GetLevel(AActor* __this, ULevel*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLevel();
    }

    void AActor_GetInstigatorController(AActor* __this, AController*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetInstigatorController();
    }

    void AActor_GetInstigator(AActor* __this, APawn*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetInstigator();
    }

    void AActor_GetHorizontalDotProductTo(AActor* __this, const AActor* OtherActor, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetHorizontalDotProductTo(OtherActor);
    }

    void AActor_GetHorizontalDistanceTo(AActor* __this, const AActor* OtherActor, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetHorizontalDistanceTo(OtherActor);
    }

    void AActor_GetGameTimeSinceCreation(AActor* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetGameTimeSinceCreation();
    }

    void AActor_GetDotProductTo(AActor* __this, const AActor* OtherActor, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDotProductTo(OtherActor);
    }

    void AActor_GetDistanceTo(AActor* __this, const AActor* OtherActor, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDistanceTo(OtherActor);
    }

    void AActor_GetComponentByClass(AActor* __this, TSubclassOf<UActorComponent>& ComponentClass, UActorComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetComponentByClass(ComponentClass);
    }

    void AActor_GetAttachParentSocketName(AActor* __this, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAttachParentSocketName();
    }

    void AActor_GetAttachParentActor(AActor* __this, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAttachParentActor();
    }

    void AActor_GetActorUpVector(AActor* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetActorUpVector();
    }

    void AActor_GetActorTimeDilation(AActor* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetActorTimeDilation();
    }

    void AActor_GetActorTickInterval(AActor* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetActorTickInterval();
    }

    void AActor_GetActorScale3D(AActor* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetActorScale3D();
    }

    void AActor_GetActorRightVector(AActor* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetActorRightVector();
    }

    void AActor_GetActorRelativeScale3D(AActor* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetActorRelativeScale3D();
    }

    void AActor_GetActorForwardVector(AActor* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetActorForwardVector();
    }

    void AActor_GetActorEyesViewPoint(AActor* __this, FVector& OutLocation, FRotator& OutRotation)
    {
        checkSlow(__this != nullptr);
        __this->GetActorEyesViewPoint(OutLocation, OutRotation);
    }

    void AActor_GetActorEnableCollision(AActor* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetActorEnableCollision();
    }

    void AActor_GetActorBounds(AActor* __this, bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent, bool bIncludeFromChildActors)
    {
        checkSlow(__this != nullptr);
        __this->GetActorBounds(bOnlyCollidingComponents, Origin, BoxExtent, bIncludeFromChildActors);
    }

    void AActor_ForceNetUpdate(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->ForceNetUpdate();
    }

    void AActor_FlushNetDormancy(AActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->FlushNetDormancy();
    }

    void AActor_FindComponentByTag(AActor* __this, TSubclassOf<UActorComponent>& ComponentClass, FName& Tag, UActorComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindComponentByTag(ComponentClass, Tag);
    }

    void AActor_EnableInput(AActor* __this, APlayerController* PlayerController)
    {
        checkSlow(__this != nullptr);
        __this->EnableInput(PlayerController);
    }

    void AActor_DisableInput(AActor* __this, APlayerController* PlayerController)
    {
        checkSlow(__this != nullptr);
        __this->DisableInput(PlayerController);
    }

    void AActor_DetachRootComponentFromParent(AActor* __this, bool bMaintainWorldPosition)
    {
        checkSlow(__this != nullptr);
        __this->DetachRootComponentFromParent(bMaintainWorldPosition);
    }

    void AActor_CreateInputComponent(AActor* __this, TSubclassOf<UInputComponent>& InputComponentToCreate)
    {
        checkSlow(__this != nullptr);
        __this->CreateInputComponent(InputComponentToCreate);
    }

    void AActor_CanTriggerResimulation(AActor* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CanTriggerResimulation();
    }

    void AActor_AddTickPrerequisiteComponent(AActor* __this, UActorComponent* PrerequisiteComponent)
    {
        checkSlow(__this != nullptr);
        __this->AddTickPrerequisiteComponent(PrerequisiteComponent);
    }

    void AActor_AddTickPrerequisiteActor(AActor* __this, AActor* PrerequisiteActor)
    {
        checkSlow(__this != nullptr);
        __this->AddTickPrerequisiteActor(PrerequisiteActor);
    }

    void AActor_ActorHasTag(AActor* __this, FName& Tag, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ActorHasTag(Tag);
    }

    void AAudioVolume_SetPriority(AAudioVolume* __this, float NewPriority)
    {
        checkSlow(__this != nullptr);
        __this->SetPriority(NewPriority);
    }

    void AAudioVolume_SetEnabled(AAudioVolume* __this, bool bNewEnabled)
    {
        checkSlow(__this != nullptr);
        __this->SetEnabled(bNewEnabled);
    }

    void ACameraActor_GetAutoActivatePlayerIndex(ACameraActor* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAutoActivatePlayerIndex();
    }

    void ACharacter_UnCrouch(ACharacter* __this, bool bClientSimulation)
    {
        checkSlow(__this != nullptr);
        __this->UnCrouch(bClientSimulation);
    }

    void ACharacter_StopJumping(ACharacter* __this)
    {
        checkSlow(__this != nullptr);
        __this->StopJumping();
    }

    void ACharacter_StopAnimMontage(ACharacter* __this, UAnimMontage* AnimMontage)
    {
        checkSlow(__this != nullptr);
        __this->StopAnimMontage(AnimMontage);
    }

    void ACharacter_RootMotionDebugClientPrintOnScreen(ACharacter* __this, const char* InString)
    {
        checkSlow(__this != nullptr);
        __this->RootMotionDebugClientPrintOnScreen(US_STRING_TO_TCHAR(InString));
    }

    void ACharacter_PlayAnimMontage(ACharacter* __this, UAnimMontage* AnimMontage, float InPlayRate, FName& StartSectionName, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->PlayAnimMontage(AnimMontage, InPlayRate, StartSectionName);
    }

    void ACharacter_OnWalkingOffLedge(ACharacter* __this, const FVector& PreviousFloorImpactNormal, const FVector& PreviousFloorContactNormal, const FVector& PreviousLocation, float TimeDelta)
    {
        checkSlow(__this != nullptr);
        __this->OnWalkingOffLedge(PreviousFloorImpactNormal, PreviousFloorContactNormal, PreviousLocation, TimeDelta);
    }

    void ACharacter_OnRep_RootMotion(ACharacter* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_RootMotion();
    }

    void ACharacter_OnRep_ReplicatedBasedMovement(ACharacter* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_ReplicatedBasedMovement();
    }

    void ACharacter_OnRep_ReplayLastTransformUpdateTimeStamp(ACharacter* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_ReplayLastTransformUpdateTimeStamp();
    }

    void ACharacter_OnRep_IsCrouched(ACharacter* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_IsCrouched();
    }

    void ACharacter_OnLaunched(ACharacter* __this, FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
    {
        checkSlow(__this != nullptr);
        __this->OnLaunched(LaunchVelocity, bXYOverride, bZOverride);
    }

    void ACharacter_OnJumped(ACharacter* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnJumped();
    }

    void ACharacter_LaunchCharacter(ACharacter* __this, FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
    {
        checkSlow(__this != nullptr);
        __this->LaunchCharacter(LaunchVelocity, bXYOverride, bZOverride);
    }

    void ACharacter_K2_UpdateCustomMovement(ACharacter* __this, float DeltaTime)
    {
        checkSlow(__this != nullptr);
        __this->K2_UpdateCustomMovement(DeltaTime);
    }

    void ACharacter_K2_OnStartCrouch(ACharacter* __this, float HalfHeightAdjust, float ScaledHalfHeightAdjust)
    {
        checkSlow(__this != nullptr);
        __this->K2_OnStartCrouch(HalfHeightAdjust, ScaledHalfHeightAdjust);
    }

    void ACharacter_K2_OnMovementModeChanged(ACharacter* __this, TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
    {
        checkSlow(__this != nullptr);
        __this->K2_OnMovementModeChanged(PrevMovementMode, NewMovementMode, PrevCustomMode, NewCustomMode);
    }

    void ACharacter_K2_OnEndCrouch(ACharacter* __this, float HalfHeightAdjust, float ScaledHalfHeightAdjust)
    {
        checkSlow(__this != nullptr);
        __this->K2_OnEndCrouch(HalfHeightAdjust, ScaledHalfHeightAdjust);
    }

    void ACharacter_Jump(ACharacter* __this)
    {
        checkSlow(__this != nullptr);
        __this->Jump();
    }

    void ACharacter_IsPlayingRootMotion(ACharacter* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPlayingRootMotion();
    }

    void ACharacter_IsPlayingNetworkedRootMotionMontage(ACharacter* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPlayingNetworkedRootMotionMontage();
    }

    void ACharacter_IsJumpProvidingForce(ACharacter* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsJumpProvidingForce();
    }

    void ACharacter_HasAnyRootMotion(ACharacter* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAnyRootMotion();
    }

    void ACharacter_GetCurrentMontage(ACharacter* __this, UAnimMontage*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurrentMontage();
    }

    void ACharacter_GetBaseTranslationOffset(ACharacter* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBaseTranslationOffset();
    }

    void ACharacter_GetBaseRotationOffsetRotator(ACharacter* __this, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBaseRotationOffsetRotator();
    }

    void ACharacter_GetAnimRootMotionTranslationScale(ACharacter* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAnimRootMotionTranslationScale();
    }

    void ACharacter_Crouch(ACharacter* __this, bool bClientSimulation)
    {
        checkSlow(__this != nullptr);
        __this->Crouch(bClientSimulation);
    }

    void ACharacter_ClientVeryShortAdjustPosition(ACharacter* __this, float TimeStamp, FVector& NewLoc, UPrimitiveComponent* NewBase, FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)
    {
        checkSlow(__this != nullptr);
        __this->ClientVeryShortAdjustPosition(TimeStamp, NewLoc, NewBase, NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode);
    }

    void ACharacter_ClientCheatWalk(ACharacter* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientCheatWalk();
    }

    void ACharacter_ClientCheatGhost(ACharacter* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientCheatGhost();
    }

    void ACharacter_ClientCheatFly(ACharacter* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientCheatFly();
    }

    void ACharacter_ClientAdjustPosition(ACharacter* __this, float TimeStamp, FVector& NewLoc, FVector& NewVel, UPrimitiveComponent* NewBase, FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)
    {
        checkSlow(__this != nullptr);
        __this->ClientAdjustPosition(TimeStamp, NewLoc, NewVel, NewBase, NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode);
    }

    void ACharacter_ClientAckGoodMove(ACharacter* __this, float TimeStamp)
    {
        checkSlow(__this != nullptr);
        __this->ClientAckGoodMove(TimeStamp);
    }

    void ACharacter_CanJump(ACharacter* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CanJump();
    }

    void ACharacter_CanCrouch(ACharacter* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CanCrouch();
    }

    void ACharacter_CacheInitialMeshOffset(ACharacter* __this, FVector& MeshRelativeLocation, FRotator& MeshRelativeRotation)
    {
        checkSlow(__this != nullptr);
        __this->CacheInitialMeshOffset(MeshRelativeLocation, MeshRelativeRotation);
    }

    void AClusterUnionActor_GetClusterUnionComponent(AClusterUnionActor* __this, UClusterUnionComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetClusterUnionComponent();
    }

    void AController_UnPossess(AController* __this)
    {
        checkSlow(__this != nullptr);
        __this->UnPossess();
    }

    void AController_StopMovement(AController* __this)
    {
        checkSlow(__this != nullptr);
        __this->StopMovement();
    }

    void AController_SetInitialLocationAndRotation(AController* __this, const FVector& NewLocation, const FRotator& NewRotation)
    {
        checkSlow(__this != nullptr);
        __this->SetInitialLocationAndRotation(NewLocation, NewRotation);
    }

    void AController_SetIgnoreMoveInput(AController* __this, bool bNewMoveInput)
    {
        checkSlow(__this != nullptr);
        __this->SetIgnoreMoveInput(bNewMoveInput);
    }

    void AController_SetIgnoreLookInput(AController* __this, bool bNewLookInput)
    {
        checkSlow(__this != nullptr);
        __this->SetIgnoreLookInput(bNewLookInput);
    }

    void AController_SetControlRotation(AController* __this, const FRotator& NewRotation)
    {
        checkSlow(__this != nullptr);
        __this->SetControlRotation(NewRotation);
    }

    void AController_ResetIgnoreMoveInput(AController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetIgnoreMoveInput();
    }

    void AController_ResetIgnoreLookInput(AController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetIgnoreLookInput();
    }

    void AController_ResetIgnoreInputFlags(AController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetIgnoreInputFlags();
    }

    void AController_Possess(AController* __this, APawn* InPawn)
    {
        checkSlow(__this != nullptr);
        __this->Possess(InPawn);
    }

    void AController_OnRep_PlayerState(AController* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_PlayerState();
    }

    void AController_OnRep_Pawn(AController* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_Pawn();
    }

    void AController_LineOfSightTo(AController* __this, const AActor* Other, FVector& ViewPoint, bool bAlternateChecks, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->LineOfSightTo(Other, ViewPoint, bAlternateChecks);
    }

    void AController_K2_GetPawn(AController* __this, APawn*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetPawn();
    }

    void AController_IsPlayerController(AController* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPlayerController();
    }

    void AController_IsMoveInputIgnored(AController* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsMoveInputIgnored();
    }

    void AController_IsLookInputIgnored(AController* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsLookInputIgnored();
    }

    void AController_IsLocalPlayerController(AController* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsLocalPlayerController();
    }

    void AController_IsLocalController(AController* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsLocalController();
    }

    void AController_GetViewTarget(AController* __this, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetViewTarget();
    }

    void AController_GetPlayerViewPoint(AController* __this, FVector& Location, FRotator& Rotation)
    {
        checkSlow(__this != nullptr);
        __this->GetPlayerViewPoint(Location, Rotation);
    }

    void AController_GetDesiredRotation(AController* __this, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDesiredRotation();
    }

    void AController_GetControlRotation(AController* __this, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetControlRotation();
    }

    void AController_ClientSetRotation(AController* __this, FRotator& NewRotation, bool bResetCamera)
    {
        checkSlow(__this != nullptr);
        __this->ClientSetRotation(NewRotation, bResetCamera);
    }

    void AController_ClientSetLocation(AController* __this, FVector& NewLocation, FRotator& NewRotation)
    {
        checkSlow(__this != nullptr);
        __this->ClientSetLocation(NewLocation, NewRotation);
    }

    void ADebugCameraController_ToggleDisplay(ADebugCameraController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ToggleDisplay();
    }

    void ADebugCameraController_ShowDebugSelectedInfo(ADebugCameraController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ShowDebugSelectedInfo();
    }

    void ADebugCameraController_SetPawnMovementSpeedScale(ADebugCameraController* __this, float NewSpeedScale)
    {
        checkSlow(__this != nullptr);
        __this->SetPawnMovementSpeedScale(NewSpeedScale);
    }

    void ADebugCameraController_ReceiveOnDeactivate(ADebugCameraController* __this, APlayerController* RestoredPC)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveOnDeactivate(RestoredPC);
    }

    void ADebugCameraController_ReceiveOnActivate(ADebugCameraController* __this, APlayerController* OriginalPC)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveOnActivate(OriginalPC);
    }

    void ADebugCameraController_GetSelectedActor(ADebugCameraController* __this, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSelectedActor();
    }

    void ADefaultPawn_TurnAtRate(ADefaultPawn* __this, float Rate)
    {
        checkSlow(__this != nullptr);
        __this->TurnAtRate(Rate);
    }

    void ADefaultPawn_MoveUp_World(ADefaultPawn* __this, float Val)
    {
        checkSlow(__this != nullptr);
        __this->MoveUp_World(Val);
    }

    void ADefaultPawn_MoveRight(ADefaultPawn* __this, float Val)
    {
        checkSlow(__this != nullptr);
        __this->MoveRight(Val);
    }

    void ADefaultPawn_MoveForward(ADefaultPawn* __this, float Val)
    {
        checkSlow(__this != nullptr);
        __this->MoveForward(Val);
    }

    void ADefaultPawn_LookUpAtRate(ADefaultPawn* __this, float Rate)
    {
        checkSlow(__this != nullptr);
        __this->LookUpAtRate(Rate);
    }

    void AEmitter_OnRep_bCurrentlyActive(AEmitter* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_bCurrentlyActive();
    }

    void AEmitter_OnParticleSystemFinished(AEmitter* __this, UParticleSystemComponent* FinishedComponent)
    {
        checkSlow(__this != nullptr);
        __this->OnParticleSystemFinished(FinishedComponent);
    }

    void AEmitterCameraLensEffectBase_GetPrimaryParticleComponent(AEmitterCameraLensEffectBase* __this, UFXSystemComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPrimaryParticleComponent();
    }

    void AExponentialHeightFog_OnRep_bEnabled(AExponentialHeightFog* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_bEnabled();
    }

    void AGameMode_StartMatch(AGameMode* __this)
    {
        checkSlow(__this != nullptr);
        __this->StartMatch();
    }

    void AGameMode_Say(AGameMode* __this, const char* Msg)
    {
        checkSlow(__this != nullptr);
        __this->Say(US_STRING_TO_TCHAR(Msg));
    }

    void AGameMode_RestartGame(AGameMode* __this)
    {
        checkSlow(__this != nullptr);
        __this->RestartGame();
    }

    void AGameMode_IsMatchInProgress(AGameMode* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsMatchInProgress();
    }

    void AGameMode_GetMatchState(AGameMode* __this, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMatchState();
    }

    void AGameMode_EndMatch(AGameMode* __this)
    {
        checkSlow(__this != nullptr);
        __this->EndMatch();
    }

    void AGameMode_AbortMatch(AGameMode* __this)
    {
        checkSlow(__this != nullptr);
        __this->AbortMatch();
    }

    void AGameModeBase_StartPlay(AGameModeBase* __this)
    {
        checkSlow(__this != nullptr);
        __this->StartPlay();
    }

    void AGameModeBase_SpawnDefaultPawnFor(AGameModeBase* __this, AController* NewPlayer, AActor* StartSpot, APawn*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->SpawnDefaultPawnFor(NewPlayer, StartSpot);
    }

    void AGameModeBase_ShouldReset(AGameModeBase* __this, AActor* ActorToReset, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ShouldReset(ActorToReset);
    }

    void AGameModeBase_ReturnToMainMenuHost(AGameModeBase* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReturnToMainMenuHost();
    }

    void AGameModeBase_RestartPlayerAtPlayerStart(AGameModeBase* __this, AController* NewPlayer, AActor* StartSpot)
    {
        checkSlow(__this != nullptr);
        __this->RestartPlayerAtPlayerStart(NewPlayer, StartSpot);
    }

    void AGameModeBase_RestartPlayer(AGameModeBase* __this, AController* NewPlayer)
    {
        checkSlow(__this != nullptr);
        __this->RestartPlayer(NewPlayer);
    }

    void AGameModeBase_ResetLevel(AGameModeBase* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetLevel();
    }

    void AGameModeBase_PlayerCanRestart(AGameModeBase* __this, APlayerController* Player, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->PlayerCanRestart(Player);
    }

    void AGameModeBase_MustSpectate(AGameModeBase* __this, APlayerController* NewPlayerController, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->MustSpectate(NewPlayerController);
    }

    void AGameModeBase_K2_PostLogin(AGameModeBase* __this, APlayerController* NewPlayer)
    {
        checkSlow(__this != nullptr);
        __this->K2_PostLogin(NewPlayer);
    }

    void AGameModeBase_K2_OnRestartPlayer(AGameModeBase* __this, AController* NewPlayer)
    {
        checkSlow(__this != nullptr);
        __this->K2_OnRestartPlayer(NewPlayer);
    }

    void AGameModeBase_K2_OnLogout(AGameModeBase* __this, AController* ExitingController)
    {
        checkSlow(__this != nullptr);
        __this->K2_OnLogout(ExitingController);
    }

    void AGameModeBase_K2_OnChangeName(AGameModeBase* __this, AController* Other, const char* NewName, bool bNameChange)
    {
        checkSlow(__this != nullptr);
        __this->K2_OnChangeName(Other, US_STRING_TO_TCHAR(NewName), bNameChange);
    }

    void AGameModeBase_K2_FindPlayerStart(AGameModeBase* __this, AController* Player, const char* IncomingName, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_FindPlayerStart(Player, US_STRING_TO_TCHAR(IncomingName));
    }

    void AGameModeBase_InitStartSpot(AGameModeBase* __this, AActor* StartSpot, AController* NewPlayer)
    {
        checkSlow(__this != nullptr);
        __this->InitStartSpot(StartSpot, NewPlayer);
    }

    void AGameModeBase_HasMatchStarted(AGameModeBase* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasMatchStarted();
    }

    void AGameModeBase_HasMatchEnded(AGameModeBase* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasMatchEnded();
    }

    void AGameModeBase_HandleStartingNewPlayer(AGameModeBase* __this, APlayerController* NewPlayer)
    {
        checkSlow(__this != nullptr);
        __this->HandleStartingNewPlayer(NewPlayer);
    }

    void AGameModeBase_GetNumSpectators(AGameModeBase* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumSpectators();
    }

    void AGameModeBase_GetNumPlayers(AGameModeBase* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumPlayers();
    }

    void AGameModeBase_GetDefaultPawnClassForController(AGameModeBase* __this, AController* InController, UClass*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDefaultPawnClassForController(InController);
    }

    void AGameModeBase_FindPlayerStart(AGameModeBase* __this, AController* Player, const char* IncomingName, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindPlayerStart(Player, US_STRING_TO_TCHAR(IncomingName));
    }

    void AGameModeBase_ChoosePlayerStart(AGameModeBase* __this, AController* Player, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ChoosePlayerStart(Player);
    }

    void AGameModeBase_ChangeName(AGameModeBase* __this, AController* Controller, const char* NewName, bool bNameChange)
    {
        checkSlow(__this != nullptr);
        __this->ChangeName(Controller, US_STRING_TO_TCHAR(NewName), bNameChange);
    }

    void AGameModeBase_CanSpectate(AGameModeBase* __this, APlayerController* Viewer, APlayerState* ViewTarget, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CanSpectate(Viewer, ViewTarget);
    }

    void AGameState_OnRep_MatchState(AGameState* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_MatchState();
    }

    void AGameState_OnRep_ElapsedTime(AGameState* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_ElapsedTime();
    }

    void AGameStateBase_HasMatchStarted(AGameStateBase* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasMatchStarted();
    }

    void AGameStateBase_HasMatchEnded(AGameStateBase* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasMatchEnded();
    }

    void AGameStateBase_HasBegunPlay(AGameStateBase* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasBegunPlay();
    }

    void AGameStateBase_GetServerWorldTimeSeconds(AGameStateBase* __this, double& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetServerWorldTimeSeconds();
    }

    void AGameStateBase_GetPlayerStartTime(AGameStateBase* __this, AController* Controller, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayerStartTime(Controller);
    }

    void AGameStateBase_GetPlayerRespawnDelay(AGameStateBase* __this, AController* Controller, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayerRespawnDelay(Controller);
    }

    void AHUD_ShowHUD(AHUD* __this)
    {
        checkSlow(__this != nullptr);
        __this->ShowHUD();
    }

    void AHUD_ShowDebugToggleSubCategory(AHUD* __this, FName& Category)
    {
        checkSlow(__this != nullptr);
        __this->ShowDebugToggleSubCategory(Category);
    }

    void AHUD_ShowDebugForReticleTargetToggle(AHUD* __this, TSubclassOf<AActor>& DesiredClass)
    {
        checkSlow(__this != nullptr);
        __this->ShowDebugForReticleTargetToggle(DesiredClass);
    }

    void AHUD_ShowDebug(AHUD* __this, FName& DebugType)
    {
        checkSlow(__this != nullptr);
        __this->ShowDebug(DebugType);
    }

    void AHUD_RemoveDebugText(AHUD* __this, AActor* SrcActor, bool bLeaveDurationText)
    {
        checkSlow(__this != nullptr);
        __this->RemoveDebugText(SrcActor, bLeaveDurationText);
    }

    void AHUD_RemoveAllDebugStrings(AHUD* __this)
    {
        checkSlow(__this != nullptr);
        __this->RemoveAllDebugStrings();
    }

    void AHUD_ReceiveHitBoxRelease(AHUD* __this, const FName& BoxName)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveHitBoxRelease(BoxName);
    }

    void AHUD_ReceiveHitBoxEndCursorOver(AHUD* __this, const FName& BoxName)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveHitBoxEndCursorOver(BoxName);
    }

    void AHUD_ReceiveHitBoxClick(AHUD* __this, const FName& BoxName)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveHitBoxClick(BoxName);
    }

    void AHUD_ReceiveHitBoxBeginCursorOver(AHUD* __this, const FName& BoxName)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveHitBoxBeginCursorOver(BoxName);
    }

    void AHUD_ReceiveDrawHUD(AHUD* __this, int32 SizeX, int32 SizeY)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveDrawHUD(SizeX, SizeY);
    }

    void AHUD_Project(AHUD* __this, FVector& Location, bool bClampToZeroPlane, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Project(Location, bClampToZeroPlane);
    }

    void AHUD_PreviousDebugTarget(AHUD* __this)
    {
        checkSlow(__this != nullptr);
        __this->PreviousDebugTarget();
    }

    void AHUD_NextDebugTarget(AHUD* __this)
    {
        checkSlow(__this != nullptr);
        __this->NextDebugTarget();
    }

    void AHUD_GetTextSize(AHUD* __this, const char* Text, float& OutWidth, float& OutHeight, UFont* Font, float Scale)
    {
        checkSlow(__this != nullptr);
        __this->GetTextSize(US_STRING_TO_TCHAR(Text), OutWidth, OutHeight, Font, Scale);
    }

    void AHUD_GetOwningPlayerController(AHUD* __this, APlayerController*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOwningPlayerController();
    }

    void AHUD_GetOwningPawn(AHUD* __this, APawn*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOwningPawn();
    }

    void AHUD_DrawTextureSimple(AHUD* __this, UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition)
    {
        checkSlow(__this != nullptr);
        __this->DrawTextureSimple(Texture, ScreenX, ScreenY, Scale, bScalePosition);
    }

    void AHUD_DrawText(AHUD* __this, const char* Text, FLinearColor& TextColor, float ScreenX, float ScreenY, UFont* Font, float Scale, bool bScalePosition)
    {
        checkSlow(__this != nullptr);
        __this->DrawText(US_STRING_TO_TCHAR(Text), TextColor, ScreenX, ScreenY, Font, Scale, bScalePosition);
    }

    void AHUD_DrawRect(AHUD* __this, FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH)
    {
        checkSlow(__this != nullptr);
        __this->DrawRect(RectColor, ScreenX, ScreenY, ScreenW, ScreenH);
    }

    void AHUD_DrawMaterialSimple(AHUD* __this, UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition)
    {
        checkSlow(__this != nullptr);
        __this->DrawMaterialSimple(Material, ScreenX, ScreenY, ScreenW, ScreenH, Scale, bScalePosition);
    }

    void AHUD_DrawLine(AHUD* __this, float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor& LineColor, float LineThickness)
    {
        checkSlow(__this != nullptr);
        __this->DrawLine(StartScreenX, StartScreenY, EndScreenX, EndScreenY, LineColor, LineThickness);
    }

    void AHUD_Deproject(AHUD* __this, float ScreenX, float ScreenY, FVector& WorldPosition, FVector& WorldDirection)
    {
        checkSlow(__this != nullptr);
        __this->Deproject(ScreenX, ScreenY, WorldPosition, WorldDirection);
    }

    void AHUD_AddDebugText(AHUD* __this, const char* DebugText, AActor* SrcActor, float Duration, FVector& Offset, FVector& DesiredOffset, FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, UFont* InFont, float FontScale, bool bDrawShadow)
    {
        checkSlow(__this != nullptr);
        __this->AddDebugText(US_STRING_TO_TCHAR(DebugText), SrcActor, Duration, Offset, DesiredOffset, TextColor, bSkipOverwriteCheck, bAbsoluteLocation, bKeepAttachedToActor, InFont, FontScale, bDrawShadow);
    }

    void ALevelInstance_OnRep_LevelInstanceSpawnGuid(ALevelInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_LevelInstanceSpawnGuid();
    }

    void ALevelInstance_UnloadLevelInstance(ALevelInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->UnloadLevelInstance();
    }

    void ALevelInstance_LoadLevelInstance(ALevelInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->LoadLevelInstance();
    }

    void ALevelInstance_IsLoaded(ALevelInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsLoaded();
    }

    void ALevelInstance_GetLoadedLevel(ALevelInstance* __this, ULevel*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLoadedLevel();
    }

    void ALevelScriptActor_SetCinematicMode(ALevelScriptActor* __this, bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
    {
        checkSlow(__this != nullptr);
        __this->SetCinematicMode(bCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning);
    }

    void ALevelScriptActor_RemoteEvent(ALevelScriptActor* __this, FName& EventName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->RemoteEvent(EventName);
    }

    void ALevelScriptActor_LevelReset(ALevelScriptActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->LevelReset();
    }

    void ALight_OnRep_bEnabled(ALight* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_bEnabled();
    }

    void ALocationVolume_Unload(ALocationVolume* __this)
    {
        checkSlow(__this != nullptr);
        __this->Unload();
    }

    void ALocationVolume_Load(ALocationVolume* __this)
    {
        checkSlow(__this != nullptr);
        __this->Load();
    }

    void ALocationVolume_IsLoaded(ALocationVolume* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsLoaded();
    }

    void APawn_SpawnDefaultController(APawn* __this)
    {
        checkSlow(__this != nullptr);
        __this->SpawnDefaultController();
    }

    void APawn_SetCanAffectNavigationGeneration(APawn* __this, bool bNewValue, bool bForceUpdate)
    {
        checkSlow(__this != nullptr);
        __this->SetCanAffectNavigationGeneration(bNewValue, bForceUpdate);
    }

    void APawn_ReceiveUnpossessed(APawn* __this, AController* OldController)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveUnpossessed(OldController);
    }

    void APawn_ReceiveRestarted(APawn* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveRestarted();
    }

    void APawn_ReceivePossessed(APawn* __this, AController* NewController)
    {
        checkSlow(__this != nullptr);
        __this->ReceivePossessed(NewController);
    }

    void APawn_ReceiveControllerChanged(APawn* __this, AController* OldController, AController* NewController)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveControllerChanged(OldController, NewController);
    }

    void APawn_PawnMakeNoise(APawn* __this, float Loudness, FVector& NoiseLocation, bool bUseNoiseMakerLocation, AActor* NoiseMaker)
    {
        checkSlow(__this != nullptr);
        __this->PawnMakeNoise(Loudness, NoiseLocation, bUseNoiseMakerLocation, NoiseMaker);
    }

    void APawn_OnRep_PlayerState(APawn* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_PlayerState();
    }

    void APawn_OnRep_Controller(APawn* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_Controller();
    }

    void APawn_IsPlayerControlled(APawn* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPlayerControlled();
    }

    void APawn_IsPawnControlled(APawn* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPawnControlled();
    }

    void APawn_IsMoveInputIgnored(APawn* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsMoveInputIgnored();
    }

    void APawn_IsLocallyViewed(APawn* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsLocallyViewed();
    }

    void APawn_IsLocallyControlled(APawn* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsLocallyControlled();
    }

    void APawn_IsControlled(APawn* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsControlled();
    }

    void APawn_IsBotControlled(APawn* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsBotControlled();
    }

    void APawn_GetPlatformUserId(APawn* __this, FPlatformUserId& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlatformUserId();
    }

    void APawn_GetPendingMovementInputVector(APawn* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPendingMovementInputVector();
    }

    void APawn_GetOverrideInputComponentClass(APawn* __this, TSubclassOf<UInputComponent>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOverrideInputComponentClass();
    }

    void APawn_GetNavAgentLocation(APawn* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNavAgentLocation();
    }

    void APawn_GetMovementComponent(APawn* __this, UPawnMovementComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMovementComponent();
    }

    void APawn_GetMovementBaseActor(const APawn* Pawn, AActor*& __result)
    {
        __result = APawn::GetMovementBaseActor(Pawn);
    }

    void APawn_GetLocalViewingPlayerController(APawn* __this, APlayerController*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLocalViewingPlayerController();
    }

    void APawn_GetLastMovementInputVector(APawn* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLastMovementInputVector();
    }

    void APawn_GetControlRotation(APawn* __this, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetControlRotation();
    }

    void APawn_GetController(APawn* __this, AController*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetController();
    }

    void APawn_GetBaseAimRotation(APawn* __this, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBaseAimRotation();
    }

    void APawn_DetachFromControllerPendingDestroy(APawn* __this)
    {
        checkSlow(__this != nullptr);
        __this->DetachFromControllerPendingDestroy();
    }

    void APawn_ConsumeMovementInputVector(APawn* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ConsumeMovementInputVector();
    }

    void APawn_AddMovementInput(APawn* __this, FVector& WorldDirection, float ScaleValue, bool bForce)
    {
        checkSlow(__this != nullptr);
        __this->AddMovementInput(WorldDirection, ScaleValue, bForce);
    }

    void APawn_AddControllerYawInput(APawn* __this, float Val)
    {
        checkSlow(__this != nullptr);
        __this->AddControllerYawInput(Val);
    }

    void APawn_AddControllerRollInput(APawn* __this, float Val)
    {
        checkSlow(__this != nullptr);
        __this->AddControllerRollInput(Val);
    }

    void APawn_AddControllerPitchInput(APawn* __this, float Val)
    {
        checkSlow(__this != nullptr);
        __this->AddControllerPitchInput(Val);
    }

    void APlayerCameraManager_StopCameraShake(APlayerCameraManager* __this, UCameraShakeBase* ShakeInstance, bool bImmediately)
    {
        checkSlow(__this != nullptr);
        __this->StopCameraShake(ShakeInstance, bImmediately);
    }

    void APlayerCameraManager_StopCameraFade(APlayerCameraManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->StopCameraFade();
    }

    void APlayerCameraManager_StopAllInstancesOfCameraShakeFromSource(APlayerCameraManager* __this, TSubclassOf<UCameraShakeBase>& Shake, UCameraShakeSourceComponent* SourceComponent, bool bImmediately)
    {
        checkSlow(__this != nullptr);
        __this->StopAllInstancesOfCameraShakeFromSource(Shake, SourceComponent, bImmediately);
    }

    void APlayerCameraManager_StopAllInstancesOfCameraShake(APlayerCameraManager* __this, TSubclassOf<UCameraShakeBase>& Shake, bool bImmediately)
    {
        checkSlow(__this != nullptr);
        __this->StopAllInstancesOfCameraShake(Shake, bImmediately);
    }

    void APlayerCameraManager_StopAllCameraShakesFromSource(APlayerCameraManager* __this, UCameraShakeSourceComponent* SourceComponent, bool bImmediately)
    {
        checkSlow(__this != nullptr);
        __this->StopAllCameraShakesFromSource(SourceComponent, bImmediately);
    }

    void APlayerCameraManager_StopAllCameraShakes(APlayerCameraManager* __this, bool bImmediately)
    {
        checkSlow(__this != nullptr);
        __this->StopAllCameraShakes(bImmediately);
    }

    void APlayerCameraManager_StartCameraShakeFromSource(APlayerCameraManager* __this, TSubclassOf<UCameraShakeBase>& ShakeClass, UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, FRotator& UserPlaySpaceRot, UCameraShakeBase*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->StartCameraShakeFromSource(ShakeClass, SourceComponent, Scale, PlaySpace, UserPlaySpaceRot);
    }

    void APlayerCameraManager_StartCameraShake(APlayerCameraManager* __this, TSubclassOf<UCameraShakeBase>& ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, FRotator& UserPlaySpaceRot, UCameraShakeBase*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->StartCameraShake(ShakeClass, Scale, PlaySpace, UserPlaySpaceRot);
    }

    void APlayerCameraManager_StartCameraFade(APlayerCameraManager* __this, float FromAlpha, float ToAlpha, float Duration, FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished)
    {
        checkSlow(__this != nullptr);
        __this->StartCameraFade(FromAlpha, ToAlpha, Duration, Color, bShouldFadeAudio, bHoldWhenFinished);
    }

    void APlayerCameraManager_SetManualCameraFade(APlayerCameraManager* __this, float InFadeAmount, FLinearColor& Color, bool bInFadeAudio)
    {
        checkSlow(__this != nullptr);
        __this->SetManualCameraFade(InFadeAmount, Color, bInFadeAudio);
    }

    void APlayerCameraManager_SetGameCameraCutThisFrame(APlayerCameraManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->SetGameCameraCutThisFrame();
    }

    void APlayerCameraManager_RemoveCameraModifier(APlayerCameraManager* __this, UCameraModifier* ModifierToRemove, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->RemoveCameraModifier(ModifierToRemove);
    }

    void APlayerCameraManager_PhotographyCameraModify(APlayerCameraManager* __this, const FVector& NewCameraLocation, const FVector& PreviousCameraLocation, const FVector& OriginalCameraLocation, FVector& ResultCameraLocation)
    {
        checkSlow(__this != nullptr);
        __this->PhotographyCameraModify(NewCameraLocation, PreviousCameraLocation, OriginalCameraLocation, ResultCameraLocation);
    }

    void APlayerCameraManager_OnPhotographySessionStart(APlayerCameraManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnPhotographySessionStart();
    }

    void APlayerCameraManager_OnPhotographySessionEnd(APlayerCameraManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnPhotographySessionEnd();
    }

    void APlayerCameraManager_OnPhotographyMultiPartCaptureStart(APlayerCameraManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnPhotographyMultiPartCaptureStart();
    }

    void APlayerCameraManager_OnPhotographyMultiPartCaptureEnd(APlayerCameraManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnPhotographyMultiPartCaptureEnd();
    }

    void APlayerCameraManager_GetOwningPlayerController(APlayerCameraManager* __this, APlayerController*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOwningPlayerController();
    }

    void APlayerCameraManager_GetFOVAngle(APlayerCameraManager* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFOVAngle();
    }

    void APlayerCameraManager_GetCameraRotation(APlayerCameraManager* __this, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCameraRotation();
    }

    void APlayerCameraManager_GetCameraLocation(APlayerCameraManager* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCameraLocation();
    }

    void APlayerCameraManager_FindCameraModifierByClass(APlayerCameraManager* __this, TSubclassOf<UCameraModifier>& ModifierClass, UCameraModifier*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindCameraModifierByClass(ModifierClass);
    }

    void APlayerCameraManager_ClearCameraLensEffects(APlayerCameraManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearCameraLensEffects();
    }

    void APlayerCameraManager_BlueprintUpdateCamera(APlayerCameraManager* __this, AActor* CameraTarget, FVector& NewCameraLocation, FRotator& NewCameraRotation, float& NewCameraFOV, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->BlueprintUpdateCamera(CameraTarget, NewCameraLocation, NewCameraRotation, NewCameraFOV);
    }

    void APlayerCameraManager_AddNewCameraModifier(APlayerCameraManager* __this, TSubclassOf<UCameraModifier>& ModifierClass, UCameraModifier*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddNewCameraModifier(ModifierClass);
    }

    void APlayerController_ToggleSpeaking(APlayerController* __this, bool bInSpeaking)
    {
        checkSlow(__this != nullptr);
        __this->ToggleSpeaking(bInSpeaking);
    }

    void APlayerController_SwitchLevel(APlayerController* __this, const char* URL)
    {
        checkSlow(__this != nullptr);
        __this->SwitchLevel(US_STRING_TO_TCHAR(URL));
    }

    void APlayerController_StreamingSourceShouldBlockOnSlowStreaming(APlayerController* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->StreamingSourceShouldBlockOnSlowStreaming();
    }

    void APlayerController_StreamingSourceShouldActivate(APlayerController* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->StreamingSourceShouldActivate();
    }

    void APlayerController_StopHapticEffect(APlayerController* __this, EControllerHand Hand)
    {
        checkSlow(__this != nullptr);
        __this->StopHapticEffect(Hand);
    }

    void APlayerController_StartFire(APlayerController* __this, uint8 FireModeNum)
    {
        checkSlow(__this != nullptr);
        __this->StartFire(FireModeNum);
    }

    void APlayerController_SetVirtualJoystickVisibility(APlayerController* __this, bool bVisible)
    {
        checkSlow(__this != nullptr);
        __this->SetVirtualJoystickVisibility(bVisible);
    }

    void APlayerController_SetViewTargetWithBlend(APlayerController* __this, AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)
    {
        checkSlow(__this != nullptr);
        __this->SetViewTargetWithBlend(NewViewTarget, BlendTime, BlendFunc, BlendExp, bLockOutgoing);
    }

    void APlayerController_SetName(APlayerController* __this, const char* S)
    {
        checkSlow(__this != nullptr);
        __this->SetName(US_STRING_TO_TCHAR(S));
    }

    void APlayerController_SetMouseLocation(APlayerController* __this, const int32 X, const int32 Y)
    {
        checkSlow(__this != nullptr);
        __this->SetMouseLocation(X, Y);
    }

    void APlayerController_SetMouseCursorWidget(APlayerController* __this, TEnumAsByte<EMouseCursor::Type> Cursor, UUserWidget* CursorWidget)
    {
        checkSlow(__this != nullptr);
        __this->SetMouseCursorWidget(Cursor, CursorWidget);
    }

    void APlayerController_SetMotionControlsEnabled(APlayerController* __this, bool bEnabled)
    {
        checkSlow(__this != nullptr);
        __this->SetMotionControlsEnabled(bEnabled);
    }

    void APlayerController_SetHapticsByValue(APlayerController* __this, const float Frequency, const float Amplitude, EControllerHand Hand)
    {
        checkSlow(__this != nullptr);
        __this->SetHapticsByValue(Frequency, Amplitude, Hand);
    }

    void APlayerController_SetDisableHaptics(APlayerController* __this, bool bNewDisabled)
    {
        checkSlow(__this != nullptr);
        __this->SetDisableHaptics(bNewDisabled);
    }

    void APlayerController_SetDeprecatedInputYawScale(APlayerController* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetDeprecatedInputYawScale(NewValue);
    }

    void APlayerController_SetDeprecatedInputRollScale(APlayerController* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetDeprecatedInputRollScale(NewValue);
    }

    void APlayerController_SetDeprecatedInputPitchScale(APlayerController* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetDeprecatedInputPitchScale(NewValue);
    }

    void APlayerController_SetControllerLightColor(APlayerController* __this, FColor& Color)
    {
        checkSlow(__this != nullptr);
        __this->SetControllerLightColor(Color);
    }

    void APlayerController_SetCinematicMode(APlayerController* __this, bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
    {
        checkSlow(__this != nullptr);
        __this->SetCinematicMode(bInCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning);
    }

    void APlayerController_SetAudioListenerOverride(APlayerController* __this, USceneComponent* AttachToComponent, FVector& Location, FRotator& Rotation)
    {
        checkSlow(__this != nullptr);
        __this->SetAudioListenerOverride(AttachToComponent, Location, Rotation);
    }

    void APlayerController_SetAudioListenerAttenuationOverride(APlayerController* __this, USceneComponent* AttachToComponent, FVector& AttenuationLocationOVerride)
    {
        checkSlow(__this != nullptr);
        __this->SetAudioListenerAttenuationOverride(AttachToComponent, AttenuationLocationOVerride);
    }

    void APlayerController_ServerViewPrevPlayer(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ServerViewPrevPlayer();
    }

    void APlayerController_ServerViewNextPlayer(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ServerViewNextPlayer();
    }

    void APlayerController_ServerVerifyViewTarget(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ServerVerifyViewTarget();
    }

    void APlayerController_ServerToggleAILogging(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ServerToggleAILogging();
    }

    void APlayerController_ServerShortTimeout(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ServerShortTimeout();
    }

    void APlayerController_ServerSetSpectatorWaiting(APlayerController* __this, bool bWaiting)
    {
        checkSlow(__this != nullptr);
        __this->ServerSetSpectatorWaiting(bWaiting);
    }

    void APlayerController_ServerSetSpectatorLocation(APlayerController* __this, FVector& NewLoc, FRotator& NewRot)
    {
        checkSlow(__this != nullptr);
        __this->ServerSetSpectatorLocation(NewLoc, NewRot);
    }

    void APlayerController_ServerRestartPlayer(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ServerRestartPlayer();
    }

    void APlayerController_ServerPause(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ServerPause();
    }

    void APlayerController_ServerNotifyLoadedWorld(APlayerController* __this, FName& WorldPackageName)
    {
        checkSlow(__this != nullptr);
        __this->ServerNotifyLoadedWorld(WorldPackageName);
    }

    void APlayerController_ServerExecRPC(APlayerController* __this, const char* Msg)
    {
        checkSlow(__this != nullptr);
        __this->ServerExecRPC(US_STRING_TO_TCHAR(Msg));
    }

    void APlayerController_ServerExec(APlayerController* __this, const char* Msg)
    {
        checkSlow(__this != nullptr);
        __this->ServerExec(US_STRING_TO_TCHAR(Msg));
    }

    void APlayerController_ServerCheckClientPossessionReliable(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ServerCheckClientPossessionReliable();
    }

    void APlayerController_ServerCheckClientPossession(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ServerCheckClientPossession();
    }

    void APlayerController_ServerChangeName(APlayerController* __this, const char* S)
    {
        checkSlow(__this != nullptr);
        __this->ServerChangeName(US_STRING_TO_TCHAR(S));
    }

    void APlayerController_ServerCamera(APlayerController* __this, FName& NewMode)
    {
        checkSlow(__this != nullptr);
        __this->ServerCamera(NewMode);
    }

    void APlayerController_ServerAcknowledgePossession(APlayerController* __this, APawn* P)
    {
        checkSlow(__this != nullptr);
        __this->ServerAcknowledgePossession(P);
    }

    void APlayerController_SendToConsole(APlayerController* __this, const char* Command)
    {
        checkSlow(__this != nullptr);
        __this->SendToConsole(US_STRING_TO_TCHAR(Command));
    }

    void APlayerController_RestartLevel(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->RestartLevel();
    }

    void APlayerController_ResetControllerLightColor(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetControllerLightColor();
    }

    void APlayerController_PlayHapticEffect(APlayerController* __this, UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop)
    {
        checkSlow(__this != nullptr);
        __this->PlayHapticEffect(HapticEffect, Hand, Scale, bLoop);
    }

    void APlayerController_Pause(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->Pause();
    }

    void APlayerController_OnServerStartedVisualLogger(APlayerController* __this, bool bIsLogging)
    {
        checkSlow(__this != nullptr);
        __this->OnServerStartedVisualLogger(bIsLogging);
    }

    void APlayerController_LocalTravel(APlayerController* __this, const char* URL)
    {
        checkSlow(__this != nullptr);
        __this->LocalTravel(US_STRING_TO_TCHAR(URL));
    }

    void APlayerController_K2_ClientPlayForceFeedback(APlayerController* __this, UForceFeedbackEffect* ForceFeedbackEffect, FName& Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused)
    {
        checkSlow(__this != nullptr);
        __this->K2_ClientPlayForceFeedback(ForceFeedbackEffect, Tag, bLooping, bIgnoreTimeDilation, bPlayWhilePaused);
    }

    void APlayerController_IsStreamingSourceEnabled(APlayerController* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsStreamingSourceEnabled();
    }

    void APlayerController_GetViewportSize(APlayerController* __this, int32& SizeX, int32& SizeY)
    {
        checkSlow(__this != nullptr);
        __this->GetViewportSize(SizeX, SizeY);
    }

    void APlayerController_GetStreamingSourcePriority(APlayerController* __this, EStreamingSourcePriority& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetStreamingSourcePriority();
    }

    void APlayerController_GetStreamingSourceLocationAndRotation(APlayerController* __this, FVector& OutLocation, FRotator& OutRotation)
    {
        checkSlow(__this != nullptr);
        __this->GetStreamingSourceLocationAndRotation(OutLocation, OutRotation);
    }

    void APlayerController_GetSpectatorPawn(APlayerController* __this, ASpectatorPawn*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSpectatorPawn();
    }

    void APlayerController_GetPlatformUserId(APlayerController* __this, FPlatformUserId& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlatformUserId();
    }

    void APlayerController_GetOverridePlayerInputClass(APlayerController* __this, TSubclassOf<UPlayerInput>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOverridePlayerInputClass();
    }

    void APlayerController_GetMousePosition(APlayerController* __this, float& LocationX, float& LocationY, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMousePosition(LocationX, LocationY);
    }

    void APlayerController_GetInputTouchState(APlayerController* __this, TEnumAsByte<ETouchIndex::Type> FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed)
    {
        checkSlow(__this != nullptr);
        __this->GetInputTouchState(FingerIndex, LocationX, LocationY, bIsCurrentlyPressed);
    }

    void APlayerController_GetInputMouseDelta(APlayerController* __this, float& DeltaX, float& DeltaY)
    {
        checkSlow(__this != nullptr);
        __this->GetInputMouseDelta(DeltaX, DeltaY);
    }

    void APlayerController_GetInputMotionState(APlayerController* __this, FVector& Tilt, FVector& RotationRate, FVector& Gravity, FVector& Acceleration)
    {
        checkSlow(__this != nullptr);
        __this->GetInputMotionState(Tilt, RotationRate, Gravity, Acceleration);
    }

    void APlayerController_GetInputAnalogStickState(APlayerController* __this, TEnumAsByte<EControllerAnalogStick::Type> WhichStick, float& StickX, float& StickY)
    {
        checkSlow(__this != nullptr);
        __this->GetInputAnalogStickState(WhichStick, StickX, StickY);
    }

    void APlayerController_GetHUD(APlayerController* __this, AHUD*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetHUD();
    }

    void APlayerController_GetFocalLocation(APlayerController* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFocalLocation();
    }

    void APlayerController_GetDeprecatedInputYawScale(APlayerController* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDeprecatedInputYawScale();
    }

    void APlayerController_GetDeprecatedInputRollScale(APlayerController* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDeprecatedInputRollScale();
    }

    void APlayerController_GetDeprecatedInputPitchScale(APlayerController* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDeprecatedInputPitchScale();
    }

    void APlayerController_FOV(APlayerController* __this, float NewFOV)
    {
        checkSlow(__this != nullptr);
        __this->FOV(NewFOV);
    }

    void APlayerController_EnableCheats(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->EnableCheats();
    }

    void APlayerController_DeprojectScreenPositionToWorld(APlayerController* __this, float ScreenX, float ScreenY, FVector& WorldLocation, FVector& WorldDirection, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->DeprojectScreenPositionToWorld(ScreenX, ScreenY, WorldLocation, WorldDirection);
    }

    void APlayerController_DeprojectMousePositionToWorld(APlayerController* __this, FVector& WorldLocation, FVector& WorldDirection, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->DeprojectMousePositionToWorld(WorldLocation, WorldDirection);
    }

    void APlayerController_ClientVoiceHandshakeComplete(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientVoiceHandshakeComplete();
    }

    void APlayerController_ClientTravelInternal(APlayerController* __this, const char* URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid& MapPackageGuid)
    {
        checkSlow(__this != nullptr);
        __this->ClientTravelInternal(US_STRING_TO_TCHAR(URL), TravelType, bSeamless, MapPackageGuid);
    }

    void APlayerController_ClientTravel(APlayerController* __this, const char* URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid& MapPackageGuid)
    {
        checkSlow(__this != nullptr);
        __this->ClientTravel(US_STRING_TO_TCHAR(URL), TravelType, bSeamless, MapPackageGuid);
    }

    void APlayerController_ClientTeamMessage(APlayerController* __this, APlayerState* SenderPlayerState, const char* S, FName& Type, float MsgLifeTime)
    {
        checkSlow(__this != nullptr);
        __this->ClientTeamMessage(SenderPlayerState, US_STRING_TO_TCHAR(S), Type, MsgLifeTime);
    }

    void APlayerController_ClientStopForceFeedback(APlayerController* __this, UForceFeedbackEffect* ForceFeedbackEffect, FName& Tag)
    {
        checkSlow(__this != nullptr);
        __this->ClientStopForceFeedback(ForceFeedbackEffect, Tag);
    }

    void APlayerController_ClientStopCameraShakesFromSource(APlayerController* __this, UCameraShakeSourceComponent* SourceComponent, bool bImmediately)
    {
        checkSlow(__this != nullptr);
        __this->ClientStopCameraShakesFromSource(SourceComponent, bImmediately);
    }

    void APlayerController_ClientStopCameraShake(APlayerController* __this, TSubclassOf<UCameraShakeBase>& Shake, bool bImmediately)
    {
        checkSlow(__this != nullptr);
        __this->ClientStopCameraShake(Shake, bImmediately);
    }

    void APlayerController_ClientStartOnlineSession(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientStartOnlineSession();
    }

    void APlayerController_ClientStartCameraShakeFromSource(APlayerController* __this, TSubclassOf<UCameraShakeBase>& Shake, UCameraShakeSourceComponent* SourceComponent)
    {
        checkSlow(__this != nullptr);
        __this->ClientStartCameraShakeFromSource(Shake, SourceComponent);
    }

    void APlayerController_ClientStartCameraShake(APlayerController* __this, TSubclassOf<UCameraShakeBase>& Shake, float Scale, ECameraShakePlaySpace PlaySpace, FRotator& UserPlaySpaceRot)
    {
        checkSlow(__this != nullptr);
        __this->ClientStartCameraShake(Shake, Scale, PlaySpace, UserPlaySpaceRot);
    }

    void APlayerController_ClientSpawnGenericCameraLensEffect(APlayerController* __this, TSubclassOf<AActor>& LensEffectEmitterClass)
    {
        checkSlow(__this != nullptr);
        __this->ClientSpawnGenericCameraLensEffect(LensEffectEmitterClass);
    }

    void APlayerController_ClientSetSpectatorWaiting(APlayerController* __this, bool bWaiting)
    {
        checkSlow(__this != nullptr);
        __this->ClientSetSpectatorWaiting(bWaiting);
    }

    void APlayerController_ClientSetHUD(APlayerController* __this, TSubclassOf<AHUD>& NewHUDClass)
    {
        checkSlow(__this != nullptr);
        __this->ClientSetHUD(NewHUDClass);
    }

    void APlayerController_ClientSetForceMipLevelsToBeResident(APlayerController* __this, UMaterialInterface* Material, float ForceDuration, int32 CinematicTextureGroups)
    {
        checkSlow(__this != nullptr);
        __this->ClientSetForceMipLevelsToBeResident(Material, ForceDuration, CinematicTextureGroups);
    }

    void APlayerController_ClientSetCinematicMode(APlayerController* __this, bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
    {
        checkSlow(__this != nullptr);
        __this->ClientSetCinematicMode(bInCinematicMode, bAffectsMovement, bAffectsTurning, bAffectsHUD);
    }

    void APlayerController_ClientSetCameraMode(APlayerController* __this, FName& NewCamMode)
    {
        checkSlow(__this != nullptr);
        __this->ClientSetCameraMode(NewCamMode);
    }

    void APlayerController_ClientSetBlockOnAsyncLoading(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientSetBlockOnAsyncLoading();
    }

    void APlayerController_ClientRetryClientRestart(APlayerController* __this, APawn* NewPawn)
    {
        checkSlow(__this != nullptr);
        __this->ClientRetryClientRestart(NewPawn);
    }

    void APlayerController_ClientRestart(APlayerController* __this, APawn* NewPawn)
    {
        checkSlow(__this != nullptr);
        __this->ClientRestart(NewPawn);
    }

    void APlayerController_ClientReset(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientReset();
    }

    void APlayerController_ClientRepObjRef(APlayerController* __this, UObject* Object)
    {
        checkSlow(__this != nullptr);
        __this->ClientRepObjRef(Object);
    }

    void APlayerController_ClientRecvServerAckFrameDebug(APlayerController* __this, uint8 NumBuffered, float TargetNumBufferedCmds)
    {
        checkSlow(__this != nullptr);
        __this->ClientRecvServerAckFrameDebug(NumBuffered, TargetNumBufferedCmds);
    }

    void APlayerController_ClientReceiveLocalizedMessage(APlayerController* __this, TSubclassOf<ULocalMessage>& Message, int32 Switch, APlayerState* RelatedPlayerState_1, APlayerState* RelatedPlayerState_2, UObject* OptionalObject)
    {
        checkSlow(__this != nullptr);
        __this->ClientReceiveLocalizedMessage(Message, Switch, RelatedPlayerState_1, RelatedPlayerState_2, OptionalObject);
    }

    void APlayerController_ClientPrestreamTextures(APlayerController* __this, AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32 CinematicTextureGroups)
    {
        checkSlow(__this != nullptr);
        __this->ClientPrestreamTextures(ForcedActor, ForceDuration, bEnableStreaming, CinematicTextureGroups);
    }

    void APlayerController_ClientPrepareMapChange(APlayerController* __this, FName& LevelName, bool bFirst, bool bLast)
    {
        checkSlow(__this != nullptr);
        __this->ClientPrepareMapChange(LevelName, bFirst, bLast);
    }

    void APlayerController_ClientPlaySoundAtLocation(APlayerController* __this, USoundBase* Sound, FVector& Location, float VolumeMultiplier, float PitchMultiplier)
    {
        checkSlow(__this != nullptr);
        __this->ClientPlaySoundAtLocation(Sound, Location, VolumeMultiplier, PitchMultiplier);
    }

    void APlayerController_ClientPlaySound(APlayerController* __this, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier)
    {
        checkSlow(__this != nullptr);
        __this->ClientPlaySound(Sound, VolumeMultiplier, PitchMultiplier);
    }

    void APlayerController_ClientMessage(APlayerController* __this, const char* S, FName& Type, float MsgLifeTime)
    {
        checkSlow(__this != nullptr);
        __this->ClientMessage(US_STRING_TO_TCHAR(S), Type, MsgLifeTime);
    }

    void APlayerController_ClientIgnoreMoveInput(APlayerController* __this, bool bIgnore)
    {
        checkSlow(__this != nullptr);
        __this->ClientIgnoreMoveInput(bIgnore);
    }

    void APlayerController_ClientIgnoreLookInput(APlayerController* __this, bool bIgnore)
    {
        checkSlow(__this != nullptr);
        __this->ClientIgnoreLookInput(bIgnore);
    }

    void APlayerController_ClientGotoState(APlayerController* __this, FName& NewState)
    {
        checkSlow(__this != nullptr);
        __this->ClientGotoState(NewState);
    }

    void APlayerController_ClientGameEnded(APlayerController* __this, AActor* EndGameFocus, bool bIsWinner)
    {
        checkSlow(__this != nullptr);
        __this->ClientGameEnded(EndGameFocus, bIsWinner);
    }

    void APlayerController_ClientForceGarbageCollection(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientForceGarbageCollection();
    }

    void APlayerController_ClientFlushLevelStreaming(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientFlushLevelStreaming();
    }

    void APlayerController_ClientEndOnlineSession(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientEndOnlineSession();
    }

    void APlayerController_ClientEnableNetworkVoice(APlayerController* __this, bool bEnable)
    {
        checkSlow(__this != nullptr);
        __this->ClientEnableNetworkVoice(bEnable);
    }

    void APlayerController_ClientCommitMapChange(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientCommitMapChange();
    }

    void APlayerController_ClientClearCameraLensEffects(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientClearCameraLensEffects();
    }

    void APlayerController_ClientCapBandwidth(APlayerController* __this, int32 Cap)
    {
        checkSlow(__this != nullptr);
        __this->ClientCapBandwidth(Cap);
    }

    void APlayerController_ClientCancelPendingMapChange(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClientCancelPendingMapChange();
    }

    void APlayerController_ClientAddTextureStreamingLoc(APlayerController* __this, FVector& InLoc, float Duration, bool bOverrideLocation)
    {
        checkSlow(__this != nullptr);
        __this->ClientAddTextureStreamingLoc(InLoc, Duration, bOverrideLocation);
    }

    void APlayerController_ClientAckTimeDilation(APlayerController* __this, float TimeDilation, int32 ServerStep)
    {
        checkSlow(__this != nullptr);
        __this->ClientAckTimeDilation(TimeDilation, ServerStep);
    }

    void APlayerController_ClearAudioListenerOverride(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearAudioListenerOverride();
    }

    void APlayerController_ClearAudioListenerAttenuationOverride(APlayerController* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearAudioListenerAttenuationOverride();
    }

    void APlayerController_CanRestartPlayer(APlayerController* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CanRestartPlayer();
    }

    void APlayerController_Camera(APlayerController* __this, FName& NewMode)
    {
        checkSlow(__this != nullptr);
        __this->Camera(NewMode);
    }

    void APlayerController_AddYawInput(APlayerController* __this, float Val)
    {
        checkSlow(__this != nullptr);
        __this->AddYawInput(Val);
    }

    void APlayerController_AddRollInput(APlayerController* __this, float Val)
    {
        checkSlow(__this != nullptr);
        __this->AddRollInput(Val);
    }

    void APlayerController_AddPitchInput(APlayerController* __this, float Val)
    {
        checkSlow(__this != nullptr);
        __this->AddPitchInput(Val);
    }

    void APlayerController_ActivateTouchInterface(APlayerController* __this, UTouchInterface* NewTouchInterface)
    {
        checkSlow(__this != nullptr);
        __this->ActivateTouchInterface(NewTouchInterface);
    }

    void APlayerState_OnRep_UniqueId(APlayerState* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_UniqueId();
    }

    void APlayerState_OnRep_Score(APlayerState* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_Score();
    }

    void APlayerState_OnRep_PlayerName(APlayerState* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_PlayerName();
    }

    void APlayerState_OnRep_PlayerId(APlayerState* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_PlayerId();
    }

    void APlayerState_OnRep_bIsInactive(APlayerState* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_bIsInactive();
    }

    void APlayerState_IsSpectator(APlayerState* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsSpectator();
    }

    void APlayerState_IsOnlyASpectator(APlayerState* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsOnlyASpectator();
    }

    void APlayerState_IsABot(APlayerState* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsABot();
    }

    void APlayerState_GetScore(APlayerState* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScore();
    }

    void APlayerState_GetPlayerId(APlayerState* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayerId();
    }

    void APlayerState_GetPlayerController(APlayerState* __this, APlayerController*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayerController();
    }

    void APlayerState_GetPingInMilliseconds(APlayerState* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPingInMilliseconds();
    }

    void APlayerState_GetPawn(APlayerState* __this, APawn*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPawn();
    }

    void APlayerState_GetCompressedPing(APlayerState* __this, uint8& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCompressedPing();
    }

    void ASceneCaptureCube_OnInterpToggle(ASceneCaptureCube* __this, bool bEnable)
    {
        checkSlow(__this != nullptr);
        __this->OnInterpToggle(bEnable);
    }

    void ASkeletalMeshActor_OnRep_ReplicatedPhysAsset(ASkeletalMeshActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_ReplicatedPhysAsset();
    }

    void ASkeletalMeshActor_OnRep_ReplicatedMesh(ASkeletalMeshActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_ReplicatedMesh();
    }

    void ASkeletalMeshActor_OnRep_ReplicatedMaterial1(ASkeletalMeshActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_ReplicatedMaterial1();
    }

    void ASkeletalMeshActor_OnRep_ReplicatedMaterial0(ASkeletalMeshActor* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_ReplicatedMaterial0();
    }

    void ASkyLight_OnRep_bEnabled(ASkyLight* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_bEnabled();
    }

    void AStaticMeshActor_SetMobility(AStaticMeshActor* __this, TEnumAsByte<EComponentMobility::Type> InMobility)
    {
        checkSlow(__this != nullptr);
        __this->SetMobility(InMobility);
    }

    void AWorldDataLayers_OnDataLayerRuntimeStateChanged(AWorldDataLayers* __this, const UDataLayerInstance* InDataLayer, EDataLayerRuntimeState InState)
    {
        checkSlow(__this != nullptr);
        __this->OnDataLayerRuntimeStateChanged(InDataLayer, InState);
    }

    void AWorldSettings_OnRep_WorldGravityZ(AWorldSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_WorldGravityZ();
    }

    void AWorldSettings_OnRep_NaniteSettings(AWorldSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_NaniteSettings();
    }

    void AWorldSettings_HasAssetUserDataOfClass(AWorldSettings* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void AWorldSettings_GetAssetUserDataOfClass(AWorldSettings* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void AWorldSettings_AddAssetUserDataOfClass(AWorldSettings* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void UActorComponent_ToggleActive(UActorComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ToggleActive();
    }

    void UActorComponent_SetTickGroup(UActorComponent* __this, TEnumAsByte<ETickingGroup> NewTickGroup)
    {
        checkSlow(__this != nullptr);
        __this->SetTickGroup(NewTickGroup);
    }

    void UActorComponent_SetTickableWhenPaused(UActorComponent* __this, bool bTickableWhenPaused)
    {
        checkSlow(__this != nullptr);
        __this->SetTickableWhenPaused(bTickableWhenPaused);
    }

    void UActorComponent_SetIsReplicated(UActorComponent* __this, bool ShouldReplicate)
    {
        checkSlow(__this != nullptr);
        __this->SetIsReplicated(ShouldReplicate);
    }

    void UActorComponent_SetComponentTickIntervalAndCooldown(UActorComponent* __this, float TickInterval)
    {
        checkSlow(__this != nullptr);
        __this->SetComponentTickIntervalAndCooldown(TickInterval);
    }

    void UActorComponent_SetComponentTickInterval(UActorComponent* __this, float TickInterval)
    {
        checkSlow(__this != nullptr);
        __this->SetComponentTickInterval(TickInterval);
    }

    void UActorComponent_SetComponentTickEnabled(UActorComponent* __this, bool bEnabled)
    {
        checkSlow(__this != nullptr);
        __this->SetComponentTickEnabled(bEnabled);
    }

    void UActorComponent_SetAutoActivate(UActorComponent* __this, bool bNewAutoActivate)
    {
        checkSlow(__this != nullptr);
        __this->SetAutoActivate(bNewAutoActivate);
    }

    void UActorComponent_SetActive(UActorComponent* __this, bool bNewActive, bool bReset)
    {
        checkSlow(__this != nullptr);
        __this->SetActive(bNewActive, bReset);
    }

    void UActorComponent_RemoveTickPrerequisiteComponent(UActorComponent* __this, UActorComponent* PrerequisiteComponent)
    {
        checkSlow(__this != nullptr);
        __this->RemoveTickPrerequisiteComponent(PrerequisiteComponent);
    }

    void UActorComponent_RemoveTickPrerequisiteActor(UActorComponent* __this, AActor* PrerequisiteActor)
    {
        checkSlow(__this != nullptr);
        __this->RemoveTickPrerequisiteActor(PrerequisiteActor);
    }

    void UActorComponent_ReceiveTick(UActorComponent* __this, float DeltaSeconds)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveTick(DeltaSeconds);
    }

    void UActorComponent_ReceiveEndPlay(UActorComponent* __this, TEnumAsByte<EEndPlayReason::Type> EndPlayReason)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveEndPlay(EndPlayReason);
    }

    void UActorComponent_ReceiveBeginPlay(UActorComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveBeginPlay();
    }

    void UActorComponent_ReceiveAsyncPhysicsTick(UActorComponent* __this, float DeltaSeconds, float SimSeconds)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveAsyncPhysicsTick(DeltaSeconds, SimSeconds);
    }

    void UActorComponent_OnRep_IsActive(UActorComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_IsActive();
    }

    void UActorComponent_K2_DestroyComponent(UActorComponent* __this, UObject* Object)
    {
        checkSlow(__this != nullptr);
        __this->K2_DestroyComponent(Object);
    }

    void UActorComponent_IsComponentTickEnabled(UActorComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsComponentTickEnabled();
    }

    void UActorComponent_IsBeingDestroyed(UActorComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsBeingDestroyed();
    }

    void UActorComponent_IsActive(UActorComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsActive();
    }

    void UActorComponent_GetOwner(UActorComponent* __this, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOwner();
    }

    void UActorComponent_GetComponentTickInterval(UActorComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetComponentTickInterval();
    }

    void UActorComponent_Deactivate(UActorComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->Deactivate();
    }

    void UActorComponent_ComponentHasTag(UActorComponent* __this, FName& Tag, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ComponentHasTag(Tag);
    }

    void UActorComponent_AddTickPrerequisiteComponent(UActorComponent* __this, UActorComponent* PrerequisiteComponent)
    {
        checkSlow(__this != nullptr);
        __this->AddTickPrerequisiteComponent(PrerequisiteComponent);
    }

    void UActorComponent_AddTickPrerequisiteActor(UActorComponent* __this, AActor* PrerequisiteActor)
    {
        checkSlow(__this != nullptr);
        __this->AddTickPrerequisiteActor(PrerequisiteActor);
    }

    void UActorComponent_Activate(UActorComponent* __this, bool bReset)
    {
        checkSlow(__this != nullptr);
        __this->Activate(bReset);
    }

    void UActorComponent_HasAssetUserDataOfClass(UActorComponent* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void UActorComponent_GetAssetUserDataOfClass(UActorComponent* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void UActorComponent_AddAssetUserDataOfClass(UActorComponent* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void UAnimatedSparseVolumeTextureController_Update(UAnimatedSparseVolumeTextureController* __this, float DeltaTime)
    {
        checkSlow(__this != nullptr);
        __this->Update(DeltaTime);
    }

    void UAnimatedSparseVolumeTextureController_Stop(UAnimatedSparseVolumeTextureController* __this)
    {
        checkSlow(__this != nullptr);
        __this->Stop();
    }

    void UAnimatedSparseVolumeTextureController_Play(UAnimatedSparseVolumeTextureController* __this)
    {
        checkSlow(__this != nullptr);
        __this->Play();
    }

    void UAnimatedSparseVolumeTextureController_Pause(UAnimatedSparseVolumeTextureController* __this)
    {
        checkSlow(__this != nullptr);
        __this->Pause();
    }

    void UAnimatedSparseVolumeTextureController_GetFrameByIndex(UAnimatedSparseVolumeTextureController* __this, int32 FrameIndex, USparseVolumeTextureFrame*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFrameByIndex(FrameIndex);
    }

    void UAnimatedSparseVolumeTextureController_GetFractionalFrameIndex(UAnimatedSparseVolumeTextureController* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFractionalFrameIndex();
    }

    void UAnimatedSparseVolumeTextureController_GetDuration(UAnimatedSparseVolumeTextureController* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDuration();
    }

    void UAnimatedSparseVolumeTextureController_GetCurrentFramesForInterpolation(UAnimatedSparseVolumeTextureController* __this, USparseVolumeTextureFrame*& Frame0, USparseVolumeTextureFrame*& Frame1, float& LerpAlpha)
    {
        checkSlow(__this != nullptr);
        __this->GetCurrentFramesForInterpolation(Frame0, Frame1, LerpAlpha);
    }

    void UAnimatedSparseVolumeTextureController_GetCurrentFrame(UAnimatedSparseVolumeTextureController* __this, USparseVolumeTextureFrame*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurrentFrame();
    }

    void UAnimationAsset_GetPlayLength(UAnimationAsset* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayLength();
    }

    void UAnimationAsset_FindMetaDataByClass(UAnimationAsset* __this, const TSubclassOf<UAnimMetaData>& MetaDataClass, UAnimMetaData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindMetaDataByClass(MetaDataClass);
    }

    void UAnimationAsset_HasAssetUserDataOfClass(UAnimationAsset* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void UAnimationAsset_GetAssetUserDataOfClass(UAnimationAsset* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void UAnimationAsset_AddAssetUserDataOfClass(UAnimationAsset* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void UAnimDataModel_IsValidBoneTrackName(UAnimDataModel* __this, const FName& TrackName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsValidBoneTrackName(TrackName);
    }

    void UAnimDataModel_IsValidBoneTrackIndex(UAnimDataModel* __this, int32 TrackIndex, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsValidBoneTrackIndex(TrackIndex);
    }

    void UAnimDataModel_GetPlayLength(UAnimDataModel* __this, double& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayLength();
    }

    void UAnimDataModel_GetNumBoneTracks(UAnimDataModel* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumBoneTracks();
    }

    void UAnimDataModel_GetNumberOfTransformCurves(UAnimDataModel* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumberOfTransformCurves();
    }

    void UAnimDataModel_GetNumberOfKeys(UAnimDataModel* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumberOfKeys();
    }

    void UAnimDataModel_GetNumberOfFrames(UAnimDataModel* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumberOfFrames();
    }

    void UAnimDataModel_GetNumberOfFloatCurves(UAnimDataModel* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumberOfFloatCurves();
    }

    void UAnimDataModel_GetFrameRate(UAnimDataModel* __this, FFrameRate& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFrameRate();
    }

    void UAnimDataModel_GetBoneTrackIndexByName(UAnimDataModel* __this, FName& TrackName, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBoneTrackIndexByName(TrackName);
    }

    void UAnimDataModel_GetAnimationSequence(UAnimDataModel* __this, UAnimSequence*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAnimationSequence();
    }

    void UAnimInstance_WasAnimNotifyStateActiveInAnyState(UAnimInstance* __this, TSubclassOf<UAnimNotifyState>& AnimNotifyStateType, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->WasAnimNotifyStateActiveInAnyState(AnimNotifyStateType);
    }

    void UAnimInstance_UnlinkAnimClassLayers(UAnimInstance* __this, TSubclassOf<UAnimInstance>& InClass)
    {
        checkSlow(__this != nullptr);
        __this->UnlinkAnimClassLayers(InClass);
    }

    void UAnimInstance_TryGetPawnOwner(UAnimInstance* __this, APawn*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->TryGetPawnOwner();
    }

    void UAnimInstance_StopSlotAnimation(UAnimInstance* __this, float InBlendOutTime, FName& SlotNodeName)
    {
        checkSlow(__this != nullptr);
        __this->StopSlotAnimation(InBlendOutTime, SlotNodeName);
    }

    void UAnimInstance_SetUseMainInstanceMontageEvaluationData(UAnimInstance* __this, bool bSet)
    {
        checkSlow(__this != nullptr);
        __this->SetUseMainInstanceMontageEvaluationData(bSet);
    }

    void UAnimInstance_SetRootMotionMode(UAnimInstance* __this, TEnumAsByte<ERootMotionMode::Type> Value)
    {
        checkSlow(__this != nullptr);
        __this->SetRootMotionMode(Value);
    }

    void UAnimInstance_SetReceiveNotifiesFromLinkedInstances(UAnimInstance* __this, bool bSet)
    {
        checkSlow(__this != nullptr);
        __this->SetReceiveNotifiesFromLinkedInstances(bSet);
    }

    void UAnimInstance_SetPropagateNotifiesToLinkedInstances(UAnimInstance* __this, bool bSet)
    {
        checkSlow(__this != nullptr);
        __this->SetPropagateNotifiesToLinkedInstances(bSet);
    }

    void UAnimInstance_SetMorphTarget(UAnimInstance* __this, FName& MorphTargetName, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetMorphTarget(MorphTargetName, Value);
    }

    void UAnimInstance_SavePoseSnapshot(UAnimInstance* __this, FName& SnapshotName)
    {
        checkSlow(__this != nullptr);
        __this->SavePoseSnapshot(SnapshotName);
    }

    void UAnimInstance_ResetDynamics(UAnimInstance* __this, ETeleportType InTeleportType)
    {
        checkSlow(__this != nullptr);
        __this->ResetDynamics(InTeleportType);
    }

    void UAnimInstance_RequestTransitionEvent(UAnimInstance* __this, const FName& EventName, const double RequestTimeout, const ETransitionRequestQueueMode QueueMode, const ETransitionRequestOverwriteMode OverwriteMode, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->RequestTransitionEvent(EventName, RequestTimeout, QueueMode, OverwriteMode);
    }

    void UAnimInstance_RequestSlotGroupInertialization(UAnimInstance* __this, FName& InSlotGroupName, float Duration, const UBlendProfile* BlendProfile)
    {
        checkSlow(__this != nullptr);
        __this->RequestSlotGroupInertialization(InSlotGroupName, Duration, BlendProfile);
    }

    void UAnimInstance_RemovePoseSnapshot(UAnimInstance* __this, FName& SnapshotName)
    {
        checkSlow(__this != nullptr);
        __this->RemovePoseSnapshot(SnapshotName);
    }

    void UAnimInstance_PlaySlotAnimationAsDynamicMontage(UAnimInstance* __this, UAnimSequenceBase* Asset, FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt, UAnimMontage*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->PlaySlotAnimationAsDynamicMontage(Asset, SlotNodeName, BlendInTime, BlendOutTime, InPlayRate, LoopCount, BlendOutTriggerTime, InTimeToStartMontageAt);
    }

    void UAnimInstance_MontageSync_StopFollowing(UAnimInstance* __this, const UAnimMontage* MontageFollower)
    {
        checkSlow(__this != nullptr);
        __this->MontageSync_StopFollowing(MontageFollower);
    }

    void UAnimInstance_MontageSync_Follow(UAnimInstance* __this, const UAnimMontage* MontageFollower, const UAnimInstance* OtherAnimInstance, const UAnimMontage* MontageLeader)
    {
        checkSlow(__this != nullptr);
        __this->MontageSync_Follow(MontageFollower, OtherAnimInstance, MontageLeader);
    }

    void UAnimInstance_Montage_StopGroupByName(UAnimInstance* __this, float InBlendOutTime, FName& GroupName)
    {
        checkSlow(__this != nullptr);
        __this->Montage_StopGroupByName(InBlendOutTime, GroupName);
    }

    void UAnimInstance_Montage_Stop(UAnimInstance* __this, float InBlendOutTime, const UAnimMontage* Montage)
    {
        checkSlow(__this != nullptr);
        __this->Montage_Stop(InBlendOutTime, Montage);
    }

    void UAnimInstance_Montage_SetPosition(UAnimInstance* __this, const UAnimMontage* Montage, float NewPosition)
    {
        checkSlow(__this != nullptr);
        __this->Montage_SetPosition(Montage, NewPosition);
    }

    void UAnimInstance_Montage_SetPlayRate(UAnimInstance* __this, const UAnimMontage* Montage, float NewPlayRate)
    {
        checkSlow(__this != nullptr);
        __this->Montage_SetPlayRate(Montage, NewPlayRate);
    }

    void UAnimInstance_Montage_SetNextSection(UAnimInstance* __this, FName& SectionNameToChange, FName& NextSection, const UAnimMontage* Montage)
    {
        checkSlow(__this != nullptr);
        __this->Montage_SetNextSection(SectionNameToChange, NextSection, Montage);
    }

    void UAnimInstance_Montage_Resume(UAnimInstance* __this, const UAnimMontage* Montage)
    {
        checkSlow(__this != nullptr);
        __this->Montage_Resume(Montage);
    }

    void UAnimInstance_Montage_Play(UAnimInstance* __this, UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Montage_Play(MontageToPlay, InPlayRate, ReturnValueType, InTimeToStartMontageAt, bStopAllMontages);
    }

    void UAnimInstance_Montage_Pause(UAnimInstance* __this, const UAnimMontage* Montage)
    {
        checkSlow(__this != nullptr);
        __this->Montage_Pause(Montage);
    }

    void UAnimInstance_Montage_JumpToSectionsEnd(UAnimInstance* __this, FName& SectionName, const UAnimMontage* Montage)
    {
        checkSlow(__this != nullptr);
        __this->Montage_JumpToSectionsEnd(SectionName, Montage);
    }

    void UAnimInstance_Montage_JumpToSection(UAnimInstance* __this, FName& SectionName, const UAnimMontage* Montage)
    {
        checkSlow(__this != nullptr);
        __this->Montage_JumpToSection(SectionName, Montage);
    }

    void UAnimInstance_Montage_IsPlaying(UAnimInstance* __this, const UAnimMontage* Montage, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Montage_IsPlaying(Montage);
    }

    void UAnimInstance_Montage_IsActive(UAnimInstance* __this, const UAnimMontage* Montage, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Montage_IsActive(Montage);
    }

    void UAnimInstance_Montage_GetPosition(UAnimInstance* __this, const UAnimMontage* Montage, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Montage_GetPosition(Montage);
    }

    void UAnimInstance_Montage_GetPlayRate(UAnimInstance* __this, const UAnimMontage* Montage, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Montage_GetPlayRate(Montage);
    }

    void UAnimInstance_Montage_GetIsStopped(UAnimInstance* __this, const UAnimMontage* Montage, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Montage_GetIsStopped(Montage);
    }

    void UAnimInstance_Montage_GetEffectivePlayRate(UAnimInstance* __this, const UAnimMontage* Montage, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Montage_GetEffectivePlayRate(Montage);
    }

    void UAnimInstance_Montage_GetCurrentSection(UAnimInstance* __this, const UAnimMontage* Montage, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Montage_GetCurrentSection(Montage);
    }

    void UAnimInstance_Montage_GetBlendTime(UAnimInstance* __this, const UAnimMontage* Montage, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Montage_GetBlendTime(Montage);
    }

    void UAnimInstance_LinkAnimGraphByTag(UAnimInstance* __this, FName& InTag, TSubclassOf<UAnimInstance>& InClass)
    {
        checkSlow(__this != nullptr);
        __this->LinkAnimGraphByTag(InTag, InClass);
    }

    void UAnimInstance_LinkAnimClassLayers(UAnimInstance* __this, TSubclassOf<UAnimInstance>& InClass)
    {
        checkSlow(__this != nullptr);
        __this->LinkAnimClassLayers(InClass);
    }

    void UAnimInstance_IsUsingMainInstanceMontageEvaluationData(UAnimInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsUsingMainInstanceMontageEvaluationData();
    }

    void UAnimInstance_IsSyncGroupBetweenMarkers(UAnimInstance* __this, FName& InSyncGroupName, FName& PreviousMarker, FName& NextMarker, bool bRespectMarkerOrder, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsSyncGroupBetweenMarkers(InSyncGroupName, PreviousMarker, NextMarker, bRespectMarkerOrder);
    }

    void UAnimInstance_IsSlotActive(UAnimInstance* __this, FName& SlotNodeName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsSlotActive(SlotNodeName);
    }

    void UAnimInstance_IsPlayingSlotAnimation(UAnimInstance* __this, const UAnimSequenceBase* Asset, FName& SlotNodeName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPlayingSlotAnimation(Asset, SlotNodeName);
    }

    void UAnimInstance_IsAnyMontagePlaying(UAnimInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsAnyMontagePlaying();
    }

    void UAnimInstance_HasMarkerBeenHitThisFrame(UAnimInstance* __this, FName& SyncGroup, FName& MarkerName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasMarkerBeenHitThisFrame(SyncGroup, MarkerName);
    }

    void UAnimInstance_GetTimeToClosestMarker(UAnimInstance* __this, FName& SyncGroup, FName& MarkerName, float& OutMarkerTime, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTimeToClosestMarker(SyncGroup, MarkerName, OutMarkerTime);
    }

    void UAnimInstance_GetReceiveNotifiesFromLinkedInstances(UAnimInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetReceiveNotifiesFromLinkedInstances();
    }

    void UAnimInstance_GetPropagateNotifiesToLinkedInstances(UAnimInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPropagateNotifiesToLinkedInstances();
    }

    void UAnimInstance_GetOwningComponent(UAnimInstance* __this, USkeletalMeshComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOwningComponent();
    }

    void UAnimInstance_GetOwningActor(UAnimInstance* __this, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOwningActor();
    }

    void UAnimInstance_GetLinkedAnimLayerInstanceByGroupAndClass(UAnimInstance* __this, FName& InGroup, TSubclassOf<UAnimInstance>& InClass, UAnimInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLinkedAnimLayerInstanceByGroupAndClass(InGroup, InClass);
    }

    void UAnimInstance_GetLinkedAnimLayerInstanceByGroup(UAnimInstance* __this, FName& InGroup, UAnimInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLinkedAnimLayerInstanceByGroup(InGroup);
    }

    void UAnimInstance_GetLinkedAnimLayerInstanceByClass(UAnimInstance* __this, TSubclassOf<UAnimInstance>& InClass, bool bCheckForChildClass, UAnimInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLinkedAnimLayerInstanceByClass(InClass, bCheckForChildClass);
    }

    void UAnimInstance_GetLinkedAnimGraphInstanceByTag(UAnimInstance* __this, FName& InTag, UAnimInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLinkedAnimGraphInstanceByTag(InTag);
    }

    void UAnimInstance_GetDeltaSeconds(UAnimInstance* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDeltaSeconds();
    }

    void UAnimInstance_GetCurveValueWithDefault(UAnimInstance* __this, FName& CurveName, float DefaultValue, float& OutValue, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurveValueWithDefault(CurveName, DefaultValue, OutValue);
    }

    void UAnimInstance_GetCurveValue(UAnimInstance* __this, FName& CurveName, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurveValue(CurveName);
    }

    void UAnimInstance_GetCurrentActiveMontage(UAnimInstance* __this, UAnimMontage*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurrentActiveMontage();
    }

    void UAnimInstance_DynamicMontage_IsPlayingFrom(UAnimInstance* __this, const UAnimSequenceBase* Animation, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->DynamicMontage_IsPlayingFrom(Animation);
    }

    void UAnimInstance_ClearTransitionEvents(UAnimInstance* __this, const FName& EventName)
    {
        checkSlow(__this != nullptr);
        __this->ClearTransitionEvents(EventName);
    }

    void UAnimInstance_ClearMorphTargets(UAnimInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearMorphTargets();
    }

    void UAnimInstance_ClearAllTransitionEvents(UAnimInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearAllTransitionEvents();
    }

    void UAnimInstance_CalculateDirection(UAnimInstance* __this, const FVector& Velocity, const FRotator& BaseRotation, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CalculateDirection(Velocity, BaseRotation);
    }

    void UAnimInstance_BlueprintUpdateAnimation(UAnimInstance* __this, float DeltaTimeX)
    {
        checkSlow(__this != nullptr);
        __this->BlueprintUpdateAnimation(DeltaTimeX);
    }

    void UAnimInstance_BlueprintThreadSafeUpdateAnimation(UAnimInstance* __this, float DeltaTime)
    {
        checkSlow(__this != nullptr);
        __this->BlueprintThreadSafeUpdateAnimation(DeltaTime);
    }

    void UAnimInstance_BlueprintPostEvaluateAnimation(UAnimInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->BlueprintPostEvaluateAnimation();
    }

    void UAnimInstance_BlueprintLinkedAnimationLayersInitialized(UAnimInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->BlueprintLinkedAnimationLayersInitialized();
    }

    void UAnimInstance_BlueprintInitializeAnimation(UAnimInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->BlueprintInitializeAnimation();
    }

    void UAnimInstance_BlueprintBeginPlay(UAnimInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->BlueprintBeginPlay();
    }

    void UAnimInstance_Blueprint_GetSlotMontageLocalWeight(UAnimInstance* __this, FName& SlotNodeName, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Blueprint_GetSlotMontageLocalWeight(SlotNodeName);
    }

    void UAnimInstance_Blueprint_GetMainAnimInstance(UAnimInstance* __this, UAnimInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->Blueprint_GetMainAnimInstance();
    }

    void UAnimMontage_IsValidSectionName(UAnimMontage* __this, FName& InSectionName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsValidSectionName(InSectionName);
    }

    void UAnimMontage_IsDynamicMontage(UAnimMontage* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsDynamicMontage();
    }

    void UAnimMontage_GetSectionName(UAnimMontage* __this, int32 SectionIndex, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSectionName(SectionIndex);
    }

    void UAnimMontage_GetSectionIndex(UAnimMontage* __this, FName& InSectionName, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSectionIndex(InSectionName);
    }

    void UAnimMontage_GetNumSections(UAnimMontage* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumSections();
    }

    void UAnimMontage_GetGroupName(UAnimMontage* __this, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetGroupName();
    }

    void UAnimMontage_GetFirstAnimReference(UAnimMontage* __this, UAnimSequenceBase*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFirstAnimReference();
    }

    void UAnimMontage_GetDefaultBlendOutTime(UAnimMontage* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDefaultBlendOutTime();
    }

    void UAnimMontage_GetDefaultBlendInTime(UAnimMontage* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDefaultBlendInTime();
    }

    void UAnimNotify_GetDefaultTriggerWeightThreshold(UAnimNotify* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDefaultTriggerWeightThreshold();
    }

    void UAnimNotifyState_GetDefaultTriggerWeightThreshold(UAnimNotifyState* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDefaultTriggerWeightThreshold();
    }

    void UAnimNotifyState_Trail_OverridePSTemplate(UAnimNotifyState_Trail* __this, USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, UParticleSystem*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->OverridePSTemplate(MeshComp, Animation);
    }

    void UAnimSingleNodeInstance_StopAnim(UAnimSingleNodeInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->StopAnim();
    }

    void UAnimSingleNodeInstance_SetReverse(UAnimSingleNodeInstance* __this, bool bInReverse)
    {
        checkSlow(__this != nullptr);
        __this->SetReverse(bInReverse);
    }

    void UAnimSingleNodeInstance_SetPreviewCurveOverride(UAnimSingleNodeInstance* __this, const FName& PoseName, float Value, bool bRemoveIfZero)
    {
        checkSlow(__this != nullptr);
        __this->SetPreviewCurveOverride(PoseName, Value, bRemoveIfZero);
    }

    void UAnimSingleNodeInstance_SetPositionWithPreviousTime(UAnimSingleNodeInstance* __this, float InPosition, float InPreviousTime, bool bFireNotifies)
    {
        checkSlow(__this != nullptr);
        __this->SetPositionWithPreviousTime(InPosition, InPreviousTime, bFireNotifies);
    }

    void UAnimSingleNodeInstance_SetPosition(UAnimSingleNodeInstance* __this, float InPosition, bool bFireNotifies)
    {
        checkSlow(__this != nullptr);
        __this->SetPosition(InPosition, bFireNotifies);
    }

    void UAnimSingleNodeInstance_SetPlayRate(UAnimSingleNodeInstance* __this, float InPlayRate)
    {
        checkSlow(__this != nullptr);
        __this->SetPlayRate(InPlayRate);
    }

    void UAnimSingleNodeInstance_SetPlaying(UAnimSingleNodeInstance* __this, bool bIsPlaying)
    {
        checkSlow(__this != nullptr);
        __this->SetPlaying(bIsPlaying);
    }

    void UAnimSingleNodeInstance_SetMirrorDataTable(UAnimSingleNodeInstance* __this, const UMirrorDataTable* MirrorDataTable)
    {
        checkSlow(__this != nullptr);
        __this->SetMirrorDataTable(MirrorDataTable);
    }

    void UAnimSingleNodeInstance_SetLooping(UAnimSingleNodeInstance* __this, bool bIsLooping)
    {
        checkSlow(__this != nullptr);
        __this->SetLooping(bIsLooping);
    }

    void UAnimSingleNodeInstance_SetBlendSpacePosition(UAnimSingleNodeInstance* __this, const FVector& InPosition)
    {
        checkSlow(__this != nullptr);
        __this->SetBlendSpacePosition(InPosition);
    }

    void UAnimSingleNodeInstance_SetAnimationAsset(UAnimSingleNodeInstance* __this, UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate)
    {
        checkSlow(__this != nullptr);
        __this->SetAnimationAsset(NewAsset, bIsLooping, InPlayRate);
    }

    void UAnimSingleNodeInstance_PlayAnim(UAnimSingleNodeInstance* __this, bool bIsLooping, float InPlayRate, float InStartPosition)
    {
        checkSlow(__this != nullptr);
        __this->PlayAnim(bIsLooping, InPlayRate, InStartPosition);
    }

    void UAnimSingleNodeInstance_GetMirrorDataTable(UAnimSingleNodeInstance* __this, const UMirrorDataTable*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMirrorDataTable();
    }

    void UAnimSingleNodeInstance_GetLength(UAnimSingleNodeInstance* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLength();
    }

    void UAnimSingleNodeInstance_GetAnimationAsset(UAnimSingleNodeInstance* __this, UAnimationAsset*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAnimationAsset();
    }

    void UArrowComponent_SetUseInEditorScaling(UArrowComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetUseInEditorScaling(bNewValue);
    }

    void UArrowComponent_SetTreatAsASprite(UArrowComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetTreatAsASprite(bNewValue);
    }

    void UArrowComponent_SetScreenSize(UArrowComponent* __this, float NewScreenSize)
    {
        checkSlow(__this != nullptr);
        __this->SetScreenSize(NewScreenSize);
    }

    void UArrowComponent_SetIsScreenSizeScaled(UArrowComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetIsScreenSizeScaled(bNewValue);
    }

    void UArrowComponent_SetArrowSize(UArrowComponent* __this, float NewSize)
    {
        checkSlow(__this != nullptr);
        __this->SetArrowSize(NewSize);
    }

    void UArrowComponent_SetArrowLength(UArrowComponent* __this, float NewLength)
    {
        checkSlow(__this != nullptr);
        __this->SetArrowLength(NewLength);
    }

    void UArrowComponent_SetArrowFColor(UArrowComponent* __this, FColor& NewColor)
    {
        checkSlow(__this != nullptr);
        __this->SetArrowFColor(NewColor);
    }

    void UArrowComponent_SetArrowColor(UArrowComponent* __this, FLinearColor& NewColor)
    {
        checkSlow(__this != nullptr);
        __this->SetArrowColor(NewColor);
    }

    void UAsyncPhysicsInputComponent_ServerRPCBufferInput(UAsyncPhysicsInputComponent* __this, UAsyncPhysicsData* AsyncPhysicsData)
    {
        checkSlow(__this != nullptr);
        __this->ServerRPCBufferInput(AsyncPhysicsData);
    }

    void UAsyncPhysicsInputComponent_GetDataToWrite(UAsyncPhysicsInputComponent* __this, UAsyncPhysicsData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDataToWrite();
    }

    void UAsyncPhysicsInputComponent_GetDataToConsume(UAsyncPhysicsInputComponent* __this, const UAsyncPhysicsData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDataToConsume();
    }

    void UAtmosphericFogComponent_SetSunMultiplier(UAtmosphericFogComponent* __this, float NewSunMultiplier)
    {
        checkSlow(__this != nullptr);
        __this->SetSunMultiplier(NewSunMultiplier);
    }

    void UAtmosphericFogComponent_SetStartDistance(UAtmosphericFogComponent* __this, float NewStartDistance)
    {
        checkSlow(__this != nullptr);
        __this->SetStartDistance(NewStartDistance);
    }

    void UAtmosphericFogComponent_SetPrecomputeParams(UAtmosphericFogComponent* __this, float DensityHeight, int32 MaxScatteringOrder, int32 InscatterAltitudeSampleNum)
    {
        checkSlow(__this != nullptr);
        __this->SetPrecomputeParams(DensityHeight, MaxScatteringOrder, InscatterAltitudeSampleNum);
    }

    void UAtmosphericFogComponent_SetFogMultiplier(UAtmosphericFogComponent* __this, float NewFogMultiplier)
    {
        checkSlow(__this != nullptr);
        __this->SetFogMultiplier(NewFogMultiplier);
    }

    void UAtmosphericFogComponent_SetDistanceScale(UAtmosphericFogComponent* __this, float NewDistanceScale)
    {
        checkSlow(__this != nullptr);
        __this->SetDistanceScale(NewDistanceScale);
    }

    void UAtmosphericFogComponent_SetDistanceOffset(UAtmosphericFogComponent* __this, float NewDistanceOffset)
    {
        checkSlow(__this != nullptr);
        __this->SetDistanceOffset(NewDistanceOffset);
    }

    void UAtmosphericFogComponent_SetDensityOffset(UAtmosphericFogComponent* __this, float NewDensityOffset)
    {
        checkSlow(__this != nullptr);
        __this->SetDensityOffset(NewDensityOffset);
    }

    void UAtmosphericFogComponent_SetDensityMultiplier(UAtmosphericFogComponent* __this, float NewDensityMultiplier)
    {
        checkSlow(__this != nullptr);
        __this->SetDensityMultiplier(NewDensityMultiplier);
    }

    void UAtmosphericFogComponent_SetDefaultLightColor(UAtmosphericFogComponent* __this, FLinearColor& NewLightColor)
    {
        checkSlow(__this != nullptr);
        __this->SetDefaultLightColor(NewLightColor);
    }

    void UAtmosphericFogComponent_SetDefaultBrightness(UAtmosphericFogComponent* __this, float NewBrightness)
    {
        checkSlow(__this != nullptr);
        __this->SetDefaultBrightness(NewBrightness);
    }

    void UAtmosphericFogComponent_SetAltitudeScale(UAtmosphericFogComponent* __this, float NewAltitudeScale)
    {
        checkSlow(__this != nullptr);
        __this->SetAltitudeScale(NewAltitudeScale);
    }

    void UAtmosphericFogComponent_DisableSunDisk(UAtmosphericFogComponent* __this, bool NewSunDisk)
    {
        checkSlow(__this != nullptr);
        __this->DisableSunDisk(NewSunDisk);
    }

    void UAtmosphericFogComponent_DisableGroundScattering(UAtmosphericFogComponent* __this, bool NewGroundScattering)
    {
        checkSlow(__this != nullptr);
        __this->DisableGroundScattering(NewGroundScattering);
    }

    void UAudioComponent_StopDelayed(UAudioComponent* __this, float DelayTime)
    {
        checkSlow(__this != nullptr);
        __this->StopDelayed(DelayTime);
    }

    void UAudioComponent_Stop(UAudioComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->Stop();
    }

    void UAudioComponent_SetWaveParameter(UAudioComponent* __this, FName& InName, USoundWave* InWave)
    {
        checkSlow(__this != nullptr);
        __this->SetWaveParameter(InName, InWave);
    }

    void UAudioComponent_SetVolumeMultiplier(UAudioComponent* __this, float NewVolumeMultiplier)
    {
        checkSlow(__this != nullptr);
        __this->SetVolumeMultiplier(NewVolumeMultiplier);
    }

    void UAudioComponent_SetUISound(UAudioComponent* __this, bool bInUISound)
    {
        checkSlow(__this != nullptr);
        __this->SetUISound(bInUISound);
    }

    void UAudioComponent_SetSubmixSend(UAudioComponent* __this, USoundSubmixBase* Submix, float SendLevel)
    {
        checkSlow(__this != nullptr);
        __this->SetSubmixSend(Submix, SendLevel);
    }

    void UAudioComponent_SetSourceBusSendPreEffect(UAudioComponent* __this, USoundSourceBus* SoundSourceBus, float SourceBusSendLevel)
    {
        checkSlow(__this != nullptr);
        __this->SetSourceBusSendPreEffect(SoundSourceBus, SourceBusSendLevel);
    }

    void UAudioComponent_SetSourceBusSendPostEffect(UAudioComponent* __this, USoundSourceBus* SoundSourceBus, float SourceBusSendLevel)
    {
        checkSlow(__this != nullptr);
        __this->SetSourceBusSendPostEffect(SoundSourceBus, SourceBusSendLevel);
    }

    void UAudioComponent_SetSound(UAudioComponent* __this, USoundBase* NewSound)
    {
        checkSlow(__this != nullptr);
        __this->SetSound(NewSound);
    }

    void UAudioComponent_SetPitchMultiplier(UAudioComponent* __this, float NewPitchMultiplier)
    {
        checkSlow(__this != nullptr);
        __this->SetPitchMultiplier(NewPitchMultiplier);
    }

    void UAudioComponent_SetPaused(UAudioComponent* __this, bool bPause)
    {
        checkSlow(__this != nullptr);
        __this->SetPaused(bPause);
    }

    void UAudioComponent_SetOutputToBusOnly(UAudioComponent* __this, bool bInOutputToBusOnly)
    {
        checkSlow(__this != nullptr);
        __this->SetOutputToBusOnly(bInOutputToBusOnly);
    }

    void UAudioComponent_SetLowPassFilterFrequency(UAudioComponent* __this, float InLowPassFilterFrequency)
    {
        checkSlow(__this != nullptr);
        __this->SetLowPassFilterFrequency(InLowPassFilterFrequency);
    }

    void UAudioComponent_SetLowPassFilterEnabled(UAudioComponent* __this, bool InLowPassFilterEnabled)
    {
        checkSlow(__this != nullptr);
        __this->SetLowPassFilterEnabled(InLowPassFilterEnabled);
    }

    void UAudioComponent_SetIntParameter(UAudioComponent* __this, FName& InName, int32 InInt)
    {
        checkSlow(__this != nullptr);
        __this->SetIntParameter(InName, InInt);
    }

    void UAudioComponent_SetFloatParameter(UAudioComponent* __this, FName& InName, float InFloat)
    {
        checkSlow(__this != nullptr);
        __this->SetFloatParameter(InName, InFloat);
    }

    void UAudioComponent_SetBoolParameter(UAudioComponent* __this, FName& InName, bool InBool)
    {
        checkSlow(__this != nullptr);
        __this->SetBoolParameter(InName, InBool);
    }

    void UAudioComponent_SetAudioBusSendPreEffect(UAudioComponent* __this, UAudioBus* AudioBus, float AudioBusSendLevel)
    {
        checkSlow(__this != nullptr);
        __this->SetAudioBusSendPreEffect(AudioBus, AudioBusSendLevel);
    }

    void UAudioComponent_SetAudioBusSendPostEffect(UAudioComponent* __this, UAudioBus* AudioBus, float AudioBusSendLevel)
    {
        checkSlow(__this != nullptr);
        __this->SetAudioBusSendPostEffect(AudioBus, AudioBusSendLevel);
    }

    void UAudioComponent_Play(UAudioComponent* __this, float StartTime)
    {
        checkSlow(__this != nullptr);
        __this->Play(StartTime);
    }

    void UAudioComponent_IsVirtualized(UAudioComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsVirtualized();
    }

    void UAudioComponent_IsPlaying(UAudioComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPlaying();
    }

    void UAudioComponent_HasCookedFFTData(UAudioComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasCookedFFTData();
    }

    void UAudioComponent_HasCookedAmplitudeEnvelopeData(UAudioComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasCookedAmplitudeEnvelopeData();
    }

    void UAudioComponent_GetPlayState(UAudioComponent* __this, EAudioComponentPlayState& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayState();
    }

    void UAudioComponent_GetCookedEnvelopeData(UAudioComponent* __this, float& OutEnvelopeData, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCookedEnvelopeData(OutEnvelopeData);
    }

    void UAudioComponent_FadeOut(UAudioComponent* __this, float FadeOutDuration, float FadeVolumeLevel, const EAudioFaderCurve FadeCurve)
    {
        checkSlow(__this != nullptr);
        __this->FadeOut(FadeOutDuration, FadeVolumeLevel, FadeCurve);
    }

    void UAudioComponent_FadeIn(UAudioComponent* __this, float FadeInDuration, float FadeVolumeLevel, float StartTime, const EAudioFaderCurve FadeCurve)
    {
        checkSlow(__this != nullptr);
        __this->FadeIn(FadeInDuration, FadeVolumeLevel, StartTime, FadeCurve);
    }

    void UAudioComponent_AdjustVolume(UAudioComponent* __this, float AdjustVolumeDuration, float AdjustVolumeLevel, const EAudioFaderCurve FadeCurve)
    {
        checkSlow(__this != nullptr);
        __this->AdjustVolume(AdjustVolumeDuration, AdjustVolumeLevel, FadeCurve);
    }

    void UAudioComponent_SetTriggerParameter(UAudioComponent* __this, FName& InName)
    {
        checkSlow(__this != nullptr);
        __this->SetTriggerParameter(InName);
    }

    void UAudioComponent_SetStringParameter(UAudioComponent* __this, FName& InName, const char* InValue)
    {
        checkSlow(__this != nullptr);
        __this->SetStringParameter(InName, US_STRING_TO_TCHAR(InValue));
    }

    void UAudioComponent_SetObjectParameter(UAudioComponent* __this, FName& InName, UObject* InValue)
    {
        checkSlow(__this != nullptr);
        __this->SetObjectParameter(InName, InValue);
    }

    void UAudioComponent_ResetParameters(UAudioComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetParameters();
    }

    void UAvoidanceManager_RegisterMovementComponent(UAvoidanceManager* __this, UMovementComponent* MovementComp, float AvoidanceWeight, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->RegisterMovementComponent(MovementComp, AvoidanceWeight);
    }

    void UAvoidanceManager_GetObjectCount(UAvoidanceManager* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetObjectCount();
    }

    void UAvoidanceManager_GetNewAvoidanceUID(UAvoidanceManager* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNewAvoidanceUID();
    }

    void UAvoidanceManager_GetAvoidanceVelocityForComponent(UAvoidanceManager* __this, UMovementComponent* MovementComp, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAvoidanceVelocityForComponent(MovementComp);
    }

    void UBillboardComponent_SetUV(UBillboardComponent* __this, int32 NewU, int32 NewUL, int32 NewV, int32 NewVL)
    {
        checkSlow(__this != nullptr);
        __this->SetUV(NewU, NewUL, NewV, NewVL);
    }

    void UBillboardComponent_SetSpriteAndUV(UBillboardComponent* __this, UTexture2D* NewSprite, int32 NewU, int32 NewUL, int32 NewV, int32 NewVL)
    {
        checkSlow(__this != nullptr);
        __this->SetSpriteAndUV(NewSprite, NewU, NewUL, NewV, NewVL);
    }

    void UBillboardComponent_SetSprite(UBillboardComponent* __this, UTexture2D* NewSprite)
    {
        checkSlow(__this != nullptr);
        __this->SetSprite(NewSprite);
    }

    void UBillboardComponent_SetOpacityMaskRefVal(UBillboardComponent* __this, float RefVal)
    {
        checkSlow(__this != nullptr);
        __this->SetOpacityMaskRefVal(RefVal);
    }

    void UBlueprintPathsLibrary_ShouldSaveToUserDir(bool& __result)
    {
        __result = UBlueprintPathsLibrary::ShouldSaveToUserDir();
    }

    void UBlueprintPathsLibrary_SetProjectFilePath(const char* NewGameProjectFilePath)
    {
        UBlueprintPathsLibrary::SetProjectFilePath(US_STRING_TO_TCHAR(NewGameProjectFilePath));
    }

    void UBlueprintPathsLibrary_IsSamePath(const char* PathA, const char* PathB, bool& __result)
    {
        __result = UBlueprintPathsLibrary::IsSamePath(US_STRING_TO_TCHAR(PathA), US_STRING_TO_TCHAR(PathB));
    }

    void UBlueprintPathsLibrary_IsRestrictedPath(const char* InPath, bool& __result)
    {
        __result = UBlueprintPathsLibrary::IsRestrictedPath(US_STRING_TO_TCHAR(InPath));
    }

    void UBlueprintPathsLibrary_IsRelative(const char* InPath, bool& __result)
    {
        __result = UBlueprintPathsLibrary::IsRelative(US_STRING_TO_TCHAR(InPath));
    }

    void UBlueprintPathsLibrary_IsProjectFilePathSet(bool& __result)
    {
        __result = UBlueprintPathsLibrary::IsProjectFilePathSet();
    }

    void UBlueprintPathsLibrary_IsDrive(const char* InPath, bool& __result)
    {
        __result = UBlueprintPathsLibrary::IsDrive(US_STRING_TO_TCHAR(InPath));
    }

    void UBlueprintPathsLibrary_HasProjectPersistentDownloadDir(bool& __result)
    {
        __result = UBlueprintPathsLibrary::HasProjectPersistentDownloadDir();
    }

    void UBlueprintPathsLibrary_FileExists(const char* InPath, bool& __result)
    {
        __result = UBlueprintPathsLibrary::FileExists(US_STRING_TO_TCHAR(InPath));
    }

    void UBlueprintPathsLibrary_DirectoryExists(const char* InPath, bool& __result)
    {
        __result = UBlueprintPathsLibrary::DirectoryExists(US_STRING_TO_TCHAR(InPath));
    }

    void UBlueprintPlatformLibrary_SetAllowedDeviceOrientation(TEnumAsByte<EScreenOrientation::Type> NewAllowedDeviceOrientation)
    {
        UBlueprintPlatformLibrary::SetAllowedDeviceOrientation(NewAllowedDeviceOrientation);
    }

    void UBlueprintPlatformLibrary_ScheduleLocalNotificationBadgeFromNow(int32 inSecondsFromNow, const char* ActivationEvent)
    {
        UBlueprintPlatformLibrary::ScheduleLocalNotificationBadgeFromNow(inSecondsFromNow, US_STRING_TO_TCHAR(ActivationEvent));
    }

    void UBlueprintPlatformLibrary_GetDeviceOrientation(TEnumAsByte<EScreenOrientation::Type>& __result)
    {
        __result = UBlueprintPlatformLibrary::GetDeviceOrientation();
    }

    void UBlueprintPlatformLibrary_GetAllowedDeviceOrientation(TEnumAsByte<EScreenOrientation::Type>& __result)
    {
        __result = UBlueprintPlatformLibrary::GetAllowedDeviceOrientation();
    }

    void UBlueprintPlatformLibrary_ClearAllLocalNotifications()
    {
        UBlueprintPlatformLibrary::ClearAllLocalNotifications();
    }

    void UBlueprintPlatformLibrary_CancelLocalNotificationById(int32 NotificationId)
    {
        UBlueprintPlatformLibrary::CancelLocalNotificationById(NotificationId);
    }

    void UBlueprintPlatformLibrary_CancelLocalNotification(const char* ActivationEvent)
    {
        UBlueprintPlatformLibrary::CancelLocalNotification(US_STRING_TO_TCHAR(ActivationEvent));
    }

    void UBoxComponent_SetBoxExtent(UBoxComponent* __this, FVector& InBoxExtent, bool bUpdateOverlaps)
    {
        checkSlow(__this != nullptr);
        __this->SetBoxExtent(InBoxExtent, bUpdateOverlaps);
    }

    void UBoxComponent_GetUnscaledBoxExtent(UBoxComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUnscaledBoxExtent();
    }

    void UBoxComponent_GetScaledBoxExtent(UBoxComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScaledBoxExtent();
    }

    void UCameraComponent_SetUseFieldOfViewForLOD(UCameraComponent* __this, bool bInUseFieldOfViewForLOD)
    {
        checkSlow(__this != nullptr);
        __this->SetUseFieldOfViewForLOD(bInUseFieldOfViewForLOD);
    }

    void UCameraComponent_SetUseCameraHeightAsViewTarget(UCameraComponent* __this, bool bInUseCameraHeightAsViewTarget)
    {
        checkSlow(__this != nullptr);
        __this->SetUseCameraHeightAsViewTarget(bInUseCameraHeightAsViewTarget);
    }

    void UCameraComponent_SetUpdateOrthoPlanes(UCameraComponent* __this, bool bInUpdateOrthoPlanes)
    {
        checkSlow(__this != nullptr);
        __this->SetUpdateOrthoPlanes(bInUpdateOrthoPlanes);
    }

    void UCameraComponent_SetProjectionMode(UCameraComponent* __this, TEnumAsByte<ECameraProjectionMode::Type> InProjectionMode)
    {
        checkSlow(__this != nullptr);
        __this->SetProjectionMode(InProjectionMode);
    }

    void UCameraComponent_SetPostProcessBlendWeight(UCameraComponent* __this, float InPostProcessBlendWeight)
    {
        checkSlow(__this != nullptr);
        __this->SetPostProcessBlendWeight(InPostProcessBlendWeight);
    }

    void UCameraComponent_SetOrthoWidth(UCameraComponent* __this, float InOrthoWidth)
    {
        checkSlow(__this != nullptr);
        __this->SetOrthoWidth(InOrthoWidth);
    }

    void UCameraComponent_SetOrthoNearClipPlane(UCameraComponent* __this, float InOrthoNearClipPlane)
    {
        checkSlow(__this != nullptr);
        __this->SetOrthoNearClipPlane(InOrthoNearClipPlane);
    }

    void UCameraComponent_SetOrthoFarClipPlane(UCameraComponent* __this, float InOrthoFarClipPlane)
    {
        checkSlow(__this != nullptr);
        __this->SetOrthoFarClipPlane(InOrthoFarClipPlane);
    }

    void UCameraComponent_SetFieldOfView(UCameraComponent* __this, float InFieldOfView)
    {
        checkSlow(__this != nullptr);
        __this->SetFieldOfView(InFieldOfView);
    }

    void UCameraComponent_SetConstraintAspectRatio(UCameraComponent* __this, bool bInConstrainAspectRatio)
    {
        checkSlow(__this != nullptr);
        __this->SetConstraintAspectRatio(bInConstrainAspectRatio);
    }

    void UCameraComponent_SetAutoPlaneShift(UCameraComponent* __this, float InAutoPlaneShift)
    {
        checkSlow(__this != nullptr);
        __this->SetAutoPlaneShift(InAutoPlaneShift);
    }

    void UCameraComponent_SetAutoCalculateOrthoPlanes(UCameraComponent* __this, bool bAutoCalculate)
    {
        checkSlow(__this != nullptr);
        __this->SetAutoCalculateOrthoPlanes(bAutoCalculate);
    }

    void UCameraComponent_SetAspectRatioAxisConstraint(UCameraComponent* __this, TEnumAsByte<EAspectRatioAxisConstraint> InAspectRatioAxisConstraint)
    {
        checkSlow(__this != nullptr);
        __this->SetAspectRatioAxisConstraint(InAspectRatioAxisConstraint);
    }

    void UCameraComponent_SetAspectRatio(UCameraComponent* __this, float InAspectRatio)
    {
        checkSlow(__this != nullptr);
        __this->SetAspectRatio(InAspectRatio);
    }

    void UCameraModifier_IsPendingDisable(UCameraModifier* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPendingDisable();
    }

    void UCameraModifier_IsDisabled(UCameraModifier* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsDisabled();
    }

    void UCameraModifier_GetViewTarget(UCameraModifier* __this, AActor*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetViewTarget();
    }

    void UCameraModifier_EnableModifier(UCameraModifier* __this)
    {
        checkSlow(__this != nullptr);
        __this->EnableModifier();
    }

    void UCameraModifier_DisableModifier(UCameraModifier* __this, bool bImmediate)
    {
        checkSlow(__this != nullptr);
        __this->DisableModifier(bImmediate);
    }

    void UCameraModifier_BlueprintModifyCamera(UCameraModifier* __this, float DeltaTime, FVector& ViewLocation, FRotator& ViewRotation, float FOV, FVector& NewViewLocation, FRotator& NewViewRotation, float& NewFOV)
    {
        checkSlow(__this != nullptr);
        __this->BlueprintModifyCamera(DeltaTime, ViewLocation, ViewRotation, FOV, NewViewLocation, NewViewRotation, NewFOV);
    }

    void UCameraShakeBase_SetRootShakePattern(UCameraShakeBase* __this, UCameraShakePattern* InPattern)
    {
        checkSlow(__this != nullptr);
        __this->SetRootShakePattern(InPattern);
    }

    void UCameraShakeBase_GetRootShakePattern(UCameraShakeBase* __this, UCameraShakePattern*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRootShakePattern();
    }

    void UCameraShakeSourceComponent_StopAllCameraShakesOfType(UCameraShakeSourceComponent* __this, TSubclassOf<UCameraShakeBase>& InCameraShake, bool bImmediately)
    {
        checkSlow(__this != nullptr);
        __this->StopAllCameraShakesOfType(InCameraShake, bImmediately);
    }

    void UCameraShakeSourceComponent_StopAllCameraShakes(UCameraShakeSourceComponent* __this, bool bImmediately)
    {
        checkSlow(__this != nullptr);
        __this->StopAllCameraShakes(bImmediately);
    }

    void UCameraShakeSourceComponent_StartCameraShake(UCameraShakeSourceComponent* __this, TSubclassOf<UCameraShakeBase>& InCameraShake, float Scale, ECameraShakePlaySpace PlaySpace, FRotator& UserPlaySpaceRot)
    {
        checkSlow(__this != nullptr);
        __this->StartCameraShake(InCameraShake, Scale, PlaySpace, UserPlaySpaceRot);
    }

    void UCameraShakeSourceComponent_Start(UCameraShakeSourceComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->Start();
    }

    void UCameraShakeSourceComponent_GetAttenuationFactor(UCameraShakeSourceComponent* __this, const FVector& Location, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAttenuationFactor(Location);
    }

    void UCancellableAsyncAction_IsActive(UCancellableAsyncAction* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsActive();
    }

    void UCancellableAsyncAction_Cancel(UCancellableAsyncAction* __this)
    {
        checkSlow(__this != nullptr);
        __this->Cancel();
    }

    void UCanvas_K2_Project(UCanvas* __this, FVector& WorldLocation, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_Project(WorldLocation);
    }

    void UCanvasRenderTarget2D_UpdateResource(UCanvasRenderTarget2D* __this)
    {
        checkSlow(__this != nullptr);
        __this->UpdateResource();
    }

    void UCanvasRenderTarget2D_SetSampleCount(UCanvasRenderTarget2D* __this, ETextureRenderTargetSampleCount InSampleCount)
    {
        checkSlow(__this != nullptr);
        __this->SetSampleCount(InSampleCount);
    }

    void UCanvasRenderTarget2D_ReceiveUpdate(UCanvasRenderTarget2D* __this, UCanvas* Canvas, int32 Width, int32 Height)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveUpdate(Canvas, Width, Height);
    }

    void UCanvasRenderTarget2D_GetSize(UCanvasRenderTarget2D* __this, int32& Width, int32& Height)
    {
        checkSlow(__this != nullptr);
        __this->GetSize(Width, Height);
    }

    void UCanvasRenderTarget2D_GetSampleCount(UCanvasRenderTarget2D* __this, ETextureRenderTargetSampleCount& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSampleCount();
    }

    void UCanvasRenderTarget2D_CreateCanvasRenderTarget2D(UObject* WorldContextObject, TSubclassOf<UCanvasRenderTarget2D>& CanvasRenderTarget2DClass, int32 Width, int32 Height, UCanvasRenderTarget2D*& __result)
    {
        __result = UCanvasRenderTarget2D::CreateCanvasRenderTarget2D(WorldContextObject, CanvasRenderTarget2DClass, Width, Height);
    }

    void UCapsuleComponent_SetCapsuleSize(UCapsuleComponent* __this, float InRadius, float InHalfHeight, bool bUpdateOverlaps)
    {
        checkSlow(__this != nullptr);
        __this->SetCapsuleSize(InRadius, InHalfHeight, bUpdateOverlaps);
    }

    void UCapsuleComponent_SetCapsuleRadius(UCapsuleComponent* __this, float Radius, bool bUpdateOverlaps)
    {
        checkSlow(__this != nullptr);
        __this->SetCapsuleRadius(Radius, bUpdateOverlaps);
    }

    void UCapsuleComponent_SetCapsuleHalfHeight(UCapsuleComponent* __this, float HalfHeight, bool bUpdateOverlaps)
    {
        checkSlow(__this != nullptr);
        __this->SetCapsuleHalfHeight(HalfHeight, bUpdateOverlaps);
    }

    void UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere(UCapsuleComponent* __this, float& OutRadius, float& OutHalfHeightWithoutHemisphere)
    {
        checkSlow(__this != nullptr);
        __this->GetUnscaledCapsuleSize_WithoutHemisphere(OutRadius, OutHalfHeightWithoutHemisphere);
    }

    void UCapsuleComponent_GetUnscaledCapsuleSize(UCapsuleComponent* __this, float& OutRadius, float& OutHalfHeight)
    {
        checkSlow(__this != nullptr);
        __this->GetUnscaledCapsuleSize(OutRadius, OutHalfHeight);
    }

    void UCapsuleComponent_GetUnscaledCapsuleRadius(UCapsuleComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUnscaledCapsuleRadius();
    }

    void UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere(UCapsuleComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
    }

    void UCapsuleComponent_GetUnscaledCapsuleHalfHeight(UCapsuleComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUnscaledCapsuleHalfHeight();
    }

    void UCapsuleComponent_GetShapeScale(UCapsuleComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetShapeScale();
    }

    void UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere(UCapsuleComponent* __this, float& OutRadius, float& OutHalfHeightWithoutHemisphere)
    {
        checkSlow(__this != nullptr);
        __this->GetScaledCapsuleSize_WithoutHemisphere(OutRadius, OutHalfHeightWithoutHemisphere);
    }

    void UCapsuleComponent_GetScaledCapsuleSize(UCapsuleComponent* __this, float& OutRadius, float& OutHalfHeight)
    {
        checkSlow(__this != nullptr);
        __this->GetScaledCapsuleSize(OutRadius, OutHalfHeight);
    }

    void UCapsuleComponent_GetScaledCapsuleRadius(UCapsuleComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScaledCapsuleRadius();
    }

    void UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere(UCapsuleComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScaledCapsuleHalfHeight_WithoutHemisphere();
    }

    void UCapsuleComponent_GetScaledCapsuleHalfHeight(UCapsuleComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScaledCapsuleHalfHeight();
    }

    void UCharacterMovementComponent_SetWalkableFloorZ(UCharacterMovementComponent* __this, float InWalkableFloorZ)
    {
        checkSlow(__this != nullptr);
        __this->SetWalkableFloorZ(InWalkableFloorZ);
    }

    void UCharacterMovementComponent_SetWalkableFloorAngle(UCharacterMovementComponent* __this, float InWalkableFloorAngle)
    {
        checkSlow(__this != nullptr);
        __this->SetWalkableFloorAngle(InWalkableFloorAngle);
    }

    void UCharacterMovementComponent_SetMovementMode(UCharacterMovementComponent* __this, TEnumAsByte<EMovementMode> NewMovementMode, uint8 NewCustomMode)
    {
        checkSlow(__this != nullptr);
        __this->SetMovementMode(NewMovementMode, NewCustomMode);
    }

    void UCharacterMovementComponent_SetGravityDirection(UCharacterMovementComponent* __this, const FVector& GravityDir)
    {
        checkSlow(__this != nullptr);
        __this->SetGravityDirection(GravityDir);
    }

    void UCharacterMovementComponent_SetCrouchedHalfHeight(UCharacterMovementComponent* __this, const float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetCrouchedHalfHeight(NewValue);
    }

    void UCharacterMovementComponent_SetAvoidanceEnabled(UCharacterMovementComponent* __this, bool bEnable)
    {
        checkSlow(__this != nullptr);
        __this->SetAvoidanceEnabled(bEnable);
    }

    void UCharacterMovementComponent_K2_GetWalkableFloorZ(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetWalkableFloorZ();
    }

    void UCharacterMovementComponent_K2_GetWalkableFloorAngle(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetWalkableFloorAngle();
    }

    void UCharacterMovementComponent_IsWalking(UCharacterMovementComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsWalking();
    }

    void UCharacterMovementComponent_HasCustomGravity(UCharacterMovementComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasCustomGravity();
    }

    void UCharacterMovementComponent_GetValidPerchRadius(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetValidPerchRadius();
    }

    void UCharacterMovementComponent_GetPerchRadiusThreshold(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPerchRadiusThreshold();
    }

    void UCharacterMovementComponent_GetMovementBase(UCharacterMovementComponent* __this, UPrimitiveComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMovementBase();
    }

    void UCharacterMovementComponent_GetMinAnalogSpeed(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMinAnalogSpeed();
    }

    void UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaxJumpHeightWithJumpTime();
    }

    void UCharacterMovementComponent_GetMaxJumpHeight(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaxJumpHeight();
    }

    void UCharacterMovementComponent_GetMaxBrakingDeceleration(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaxBrakingDeceleration();
    }

    void UCharacterMovementComponent_GetMaxAcceleration(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaxAcceleration();
    }

    void UCharacterMovementComponent_GetLastUpdateVelocity(UCharacterMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLastUpdateVelocity();
    }

    void UCharacterMovementComponent_GetLastUpdateRotation(UCharacterMovementComponent* __this, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLastUpdateRotation();
    }

    void UCharacterMovementComponent_GetLastUpdateRequestedVelocity(UCharacterMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLastUpdateRequestedVelocity();
    }

    void UCharacterMovementComponent_GetLastUpdateLocation(UCharacterMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLastUpdateLocation();
    }

    void UCharacterMovementComponent_GetImpartedMovementBaseVelocity(UCharacterMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetImpartedMovementBaseVelocity();
    }

    void UCharacterMovementComponent_GetGravityDirection(UCharacterMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetGravityDirection();
    }

    void UCharacterMovementComponent_GetCurrentAcceleration(UCharacterMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurrentAcceleration();
    }

    void UCharacterMovementComponent_GetCrouchedHalfHeight(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCrouchedHalfHeight();
    }

    void UCharacterMovementComponent_GetCharacterOwner(UCharacterMovementComponent* __this, ACharacter*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCharacterOwner();
    }

    void UCharacterMovementComponent_GetAnalogInputModifier(UCharacterMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAnalogInputModifier();
    }

    void UCharacterMovementComponent_DisableMovement(UCharacterMovementComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->DisableMovement();
    }

    void UCharacterMovementComponent_ClearAccumulatedForces(UCharacterMovementComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearAccumulatedForces();
    }

    void UCharacterMovementComponent_CalcVelocity(UCharacterMovementComponent* __this, float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration)
    {
        checkSlow(__this != nullptr);
        __this->CalcVelocity(DeltaTime, Friction, bFluid, BrakingDeceleration);
    }

    void UCharacterMovementComponent_AddImpulse(UCharacterMovementComponent* __this, FVector& Impulse, bool bVelocityChange)
    {
        checkSlow(__this != nullptr);
        __this->AddImpulse(Impulse, bVelocityChange);
    }

    void UCharacterMovementComponent_AddForce(UCharacterMovementComponent* __this, FVector& Force)
    {
        checkSlow(__this != nullptr);
        __this->AddForce(Force);
    }


    // Export register function
    void RegisterFastInvokeApis_0(FUnrealInteropFunctions* InInteropFunctions)
    {
        check(InInteropFunctions);

        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_WasRecentlyRendered);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_TearOff);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetTickGroup);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetTickableWhenPaused);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetReplicates);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetReplicateMovement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetRayTracingGroupId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetPhysicsReplicationMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetOwner);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetNetDormancy);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetLifeSpan);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetAutoDestroyWhenFinished);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetActorTickInterval);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetActorTickEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetActorScale3D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetActorRelativeScale3D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetActorHiddenInGame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_SetActorEnableCollision);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_RemoveTickPrerequisiteComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_RemoveTickPrerequisiteActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveTick);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveDestroyed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveAsyncPhysicsTick);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveAnyDamage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveActorOnInputTouchLeave);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveActorOnInputTouchEnter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveActorOnInputTouchEnd);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveActorOnInputTouchBegin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveActorEndOverlap);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveActorEndCursorOver);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveActorBeginOverlap);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ReceiveActorBeginCursorOver);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_PrestreamTextures);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_OnRep_ReplicateMovement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_OnRep_ReplicatedMovement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_OnRep_Instigator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_OnRep_AttachmentReplication);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_MakeNoise);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_TeleportTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_SetActorRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_OnReset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_OnEndViewTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_OnBecomeViewTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_GetRootComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_GetActorRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_GetActorLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_DetachFromActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_DestroyActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_AttachToComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_AttachToActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_AttachRootComponentToActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_K2_AttachRootComponentTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_IsOverlappingActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_IsChildActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_IsActorTickEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_IsActorBeingDestroyed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_HasAuthority);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetVerticalDistanceTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetTickableWhenPaused);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetSquaredHorizontalDistanceTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetSquaredDistanceTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetResimulationThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetRemoteRole);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetRayTracingGroupId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetPhysicsReplicationMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetParentComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetParentActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetOwner);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetLocalRole);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetLifeSpan);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetInstigatorController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetInstigator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetHorizontalDotProductTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetHorizontalDistanceTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetGameTimeSinceCreation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetDotProductTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetDistanceTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetComponentByClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetAttachParentSocketName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetAttachParentActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetActorUpVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetActorTimeDilation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetActorTickInterval);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetActorScale3D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetActorRightVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetActorRelativeScale3D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetActorForwardVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetActorEyesViewPoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetActorEnableCollision);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_GetActorBounds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ForceNetUpdate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_FlushNetDormancy);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_FindComponentByTag);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_EnableInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_DisableInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_DetachRootComponentFromParent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_CreateInputComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_CanTriggerResimulation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_AddTickPrerequisiteComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_AddTickPrerequisiteActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AActor_ActorHasTag);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AAudioVolume_SetPriority);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AAudioVolume_SetEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACameraActor_GetAutoActivatePlayerIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_UnCrouch);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_StopJumping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_StopAnimMontage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_RootMotionDebugClientPrintOnScreen);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_PlayAnimMontage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_OnWalkingOffLedge);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_OnRep_RootMotion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_OnRep_ReplicatedBasedMovement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_OnRep_ReplayLastTransformUpdateTimeStamp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_OnRep_IsCrouched);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_OnLaunched);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_OnJumped);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_LaunchCharacter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_K2_UpdateCustomMovement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_K2_OnStartCrouch);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_K2_OnMovementModeChanged);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_K2_OnEndCrouch);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_Jump);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_IsPlayingRootMotion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_IsPlayingNetworkedRootMotionMontage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_IsJumpProvidingForce);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_HasAnyRootMotion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_GetCurrentMontage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_GetBaseTranslationOffset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_GetBaseRotationOffsetRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_GetAnimRootMotionTranslationScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_Crouch);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_ClientVeryShortAdjustPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_ClientCheatWalk);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_ClientCheatGhost);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_ClientCheatFly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_ClientAdjustPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_ClientAckGoodMove);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_CanJump);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_CanCrouch);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ACharacter_CacheInitialMeshOffset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AClusterUnionActor_GetClusterUnionComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_UnPossess);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_StopMovement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_SetInitialLocationAndRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_SetIgnoreMoveInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_SetIgnoreLookInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_SetControlRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_ResetIgnoreMoveInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_ResetIgnoreLookInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_ResetIgnoreInputFlags);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_Possess);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_OnRep_PlayerState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_OnRep_Pawn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_LineOfSightTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_K2_GetPawn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_IsPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_IsMoveInputIgnored);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_IsLookInputIgnored);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_IsLocalPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_IsLocalController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_GetViewTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_GetPlayerViewPoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_GetDesiredRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_GetControlRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_ClientSetRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AController_ClientSetLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADebugCameraController_ToggleDisplay);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADebugCameraController_ShowDebugSelectedInfo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADebugCameraController_SetPawnMovementSpeedScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADebugCameraController_ReceiveOnDeactivate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADebugCameraController_ReceiveOnActivate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADebugCameraController_GetSelectedActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADefaultPawn_TurnAtRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADefaultPawn_MoveUp_World);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADefaultPawn_MoveRight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADefaultPawn_MoveForward);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ADefaultPawn_LookUpAtRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AEmitter_OnRep_bCurrentlyActive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AEmitter_OnParticleSystemFinished);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AEmitterCameraLensEffectBase_GetPrimaryParticleComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AExponentialHeightFog_OnRep_bEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameMode_StartMatch);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameMode_Say);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameMode_RestartGame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameMode_IsMatchInProgress);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameMode_GetMatchState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameMode_EndMatch);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameMode_AbortMatch);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_StartPlay);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_SpawnDefaultPawnFor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_ShouldReset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_ReturnToMainMenuHost);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_RestartPlayerAtPlayerStart);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_RestartPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_ResetLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_PlayerCanRestart);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_MustSpectate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_K2_PostLogin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_K2_OnRestartPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_K2_OnLogout);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_K2_OnChangeName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_K2_FindPlayerStart);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_InitStartSpot);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_HasMatchStarted);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_HasMatchEnded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_HandleStartingNewPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_GetNumSpectators);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_GetNumPlayers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_GetDefaultPawnClassForController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_FindPlayerStart);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_ChoosePlayerStart);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_ChangeName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameModeBase_CanSpectate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameState_OnRep_MatchState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameState_OnRep_ElapsedTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameStateBase_HasMatchStarted);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameStateBase_HasMatchEnded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameStateBase_HasBegunPlay);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameStateBase_GetServerWorldTimeSeconds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameStateBase_GetPlayerStartTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AGameStateBase_GetPlayerRespawnDelay);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_ShowHUD);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_ShowDebugToggleSubCategory);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_ShowDebugForReticleTargetToggle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_ShowDebug);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_RemoveDebugText);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_RemoveAllDebugStrings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_ReceiveHitBoxRelease);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_ReceiveHitBoxEndCursorOver);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_ReceiveHitBoxClick);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_ReceiveHitBoxBeginCursorOver);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_ReceiveDrawHUD);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_Project);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_PreviousDebugTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_NextDebugTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_GetTextSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_GetOwningPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_GetOwningPawn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_DrawTextureSimple);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_DrawText);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_DrawRect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_DrawMaterialSimple);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_DrawLine);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_Deproject);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AHUD_AddDebugText);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALevelInstance_OnRep_LevelInstanceSpawnGuid);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALevelInstance_UnloadLevelInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALevelInstance_LoadLevelInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALevelInstance_IsLoaded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALevelInstance_GetLoadedLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALevelScriptActor_SetCinematicMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALevelScriptActor_RemoteEvent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALevelScriptActor_LevelReset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALight_OnRep_bEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALocationVolume_Unload);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALocationVolume_Load);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ALocationVolume_IsLoaded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_SpawnDefaultController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_SetCanAffectNavigationGeneration);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_ReceiveUnpossessed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_ReceiveRestarted);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_ReceivePossessed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_ReceiveControllerChanged);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_PawnMakeNoise);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_OnRep_PlayerState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_OnRep_Controller);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_IsPlayerControlled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_IsPawnControlled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_IsMoveInputIgnored);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_IsLocallyViewed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_IsLocallyControlled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_IsControlled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_IsBotControlled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetPlatformUserId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetPendingMovementInputVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetOverrideInputComponentClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetNavAgentLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetMovementComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetMovementBaseActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetLocalViewingPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetLastMovementInputVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetControlRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_GetBaseAimRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_DetachFromControllerPendingDestroy);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_ConsumeMovementInputVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_AddMovementInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_AddControllerYawInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_AddControllerRollInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APawn_AddControllerPitchInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_StopCameraShake);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_StopCameraFade);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_StopAllInstancesOfCameraShakeFromSource);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_StopAllInstancesOfCameraShake);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_StopAllCameraShakesFromSource);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_StopAllCameraShakes);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_StartCameraShakeFromSource);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_StartCameraShake);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_StartCameraFade);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_SetManualCameraFade);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_SetGameCameraCutThisFrame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_RemoveCameraModifier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_PhotographyCameraModify);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_OnPhotographySessionStart);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_OnPhotographySessionEnd);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_OnPhotographyMultiPartCaptureStart);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_OnPhotographyMultiPartCaptureEnd);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_GetOwningPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_GetFOVAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_GetCameraRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_GetCameraLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_FindCameraModifierByClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_ClearCameraLensEffects);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_BlueprintUpdateCamera);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerCameraManager_AddNewCameraModifier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ToggleSpeaking);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SwitchLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_StreamingSourceShouldBlockOnSlowStreaming);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_StreamingSourceShouldActivate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_StopHapticEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_StartFire);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetVirtualJoystickVisibility);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetViewTargetWithBlend);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetMouseLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetMouseCursorWidget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetMotionControlsEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetHapticsByValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetDisableHaptics);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetDeprecatedInputYawScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetDeprecatedInputRollScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetDeprecatedInputPitchScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetControllerLightColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetCinematicMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetAudioListenerOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SetAudioListenerAttenuationOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerViewPrevPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerViewNextPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerVerifyViewTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerToggleAILogging);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerShortTimeout);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerSetSpectatorWaiting);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerSetSpectatorLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerRestartPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerPause);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerNotifyLoadedWorld);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerExecRPC);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerExec);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerCheckClientPossessionReliable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerCheckClientPossession);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerChangeName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerCamera);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ServerAcknowledgePossession);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_SendToConsole);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_RestartLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ResetControllerLightColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_PlayHapticEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_Pause);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_OnServerStartedVisualLogger);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_LocalTravel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_K2_ClientPlayForceFeedback);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_IsStreamingSourceEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetViewportSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetStreamingSourcePriority);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetStreamingSourceLocationAndRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetSpectatorPawn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetPlatformUserId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetOverridePlayerInputClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetMousePosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetInputTouchState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetInputMouseDelta);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetInputMotionState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetInputAnalogStickState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetHUD);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetFocalLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetDeprecatedInputYawScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetDeprecatedInputRollScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_GetDeprecatedInputPitchScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_FOV);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_EnableCheats);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_DeprojectScreenPositionToWorld);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_DeprojectMousePositionToWorld);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientVoiceHandshakeComplete);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientTravelInternal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientTravel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientTeamMessage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientStopForceFeedback);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientStopCameraShakesFromSource);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientStopCameraShake);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientStartOnlineSession);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientStartCameraShakeFromSource);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientStartCameraShake);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientSpawnGenericCameraLensEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientSetSpectatorWaiting);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientSetHUD);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientSetForceMipLevelsToBeResident);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientSetCinematicMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientSetCameraMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientSetBlockOnAsyncLoading);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientRetryClientRestart);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientRestart);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientReset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientRepObjRef);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientRecvServerAckFrameDebug);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientReceiveLocalizedMessage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientPrestreamTextures);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientPrepareMapChange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientPlaySoundAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientPlaySound);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientMessage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientIgnoreMoveInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientIgnoreLookInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientGotoState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientGameEnded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientForceGarbageCollection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientFlushLevelStreaming);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientEndOnlineSession);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientEnableNetworkVoice);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientCommitMapChange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientClearCameraLensEffects);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientCapBandwidth);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientCancelPendingMapChange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientAddTextureStreamingLoc);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClientAckTimeDilation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClearAudioListenerOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ClearAudioListenerAttenuationOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_CanRestartPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_Camera);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_AddYawInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_AddRollInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_AddPitchInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerController_ActivateTouchInterface);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_OnRep_UniqueId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_OnRep_Score);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_OnRep_PlayerName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_OnRep_PlayerId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_OnRep_bIsInactive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_IsSpectator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_IsOnlyASpectator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_IsABot);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_GetScore);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_GetPlayerId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_GetPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_GetPingInMilliseconds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_GetPawn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(APlayerState_GetCompressedPing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ASceneCaptureCube_OnInterpToggle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ASkeletalMeshActor_OnRep_ReplicatedPhysAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ASkeletalMeshActor_OnRep_ReplicatedMesh);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ASkeletalMeshActor_OnRep_ReplicatedMaterial1);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ASkeletalMeshActor_OnRep_ReplicatedMaterial0);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ASkyLight_OnRep_bEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AStaticMeshActor_SetMobility);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AWorldDataLayers_OnDataLayerRuntimeStateChanged);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AWorldSettings_OnRep_WorldGravityZ);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AWorldSettings_OnRep_NaniteSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AWorldSettings_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AWorldSettings_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(AWorldSettings_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_ToggleActive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_SetTickGroup);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_SetTickableWhenPaused);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_SetIsReplicated);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_SetComponentTickIntervalAndCooldown);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_SetComponentTickInterval);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_SetComponentTickEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_SetAutoActivate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_SetActive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_RemoveTickPrerequisiteComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_RemoveTickPrerequisiteActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_ReceiveTick);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_ReceiveEndPlay);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_ReceiveBeginPlay);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_ReceiveAsyncPhysicsTick);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_OnRep_IsActive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_K2_DestroyComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_IsComponentTickEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_IsBeingDestroyed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_IsActive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_GetOwner);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_GetComponentTickInterval);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_Deactivate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_ComponentHasTag);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_AddTickPrerequisiteComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_AddTickPrerequisiteActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_Activate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UActorComponent_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimatedSparseVolumeTextureController_Update);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimatedSparseVolumeTextureController_Stop);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimatedSparseVolumeTextureController_Play);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimatedSparseVolumeTextureController_Pause);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimatedSparseVolumeTextureController_GetFrameByIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimatedSparseVolumeTextureController_GetFractionalFrameIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimatedSparseVolumeTextureController_GetDuration);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimatedSparseVolumeTextureController_GetCurrentFramesForInterpolation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimatedSparseVolumeTextureController_GetCurrentFrame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimationAsset_GetPlayLength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimationAsset_FindMetaDataByClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimationAsset_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimationAsset_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimationAsset_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_IsValidBoneTrackName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_IsValidBoneTrackIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_GetPlayLength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_GetNumBoneTracks);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_GetNumberOfTransformCurves);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_GetNumberOfKeys);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_GetNumberOfFrames);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_GetNumberOfFloatCurves);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_GetFrameRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_GetBoneTrackIndexByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimDataModel_GetAnimationSequence);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_WasAnimNotifyStateActiveInAnyState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_UnlinkAnimClassLayers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_TryGetPawnOwner);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_StopSlotAnimation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_SetUseMainInstanceMontageEvaluationData);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_SetRootMotionMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_SetReceiveNotifiesFromLinkedInstances);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_SetPropagateNotifiesToLinkedInstances);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_SetMorphTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_SavePoseSnapshot);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_ResetDynamics);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_RequestTransitionEvent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_RequestSlotGroupInertialization);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_RemovePoseSnapshot);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_PlaySlotAnimationAsDynamicMontage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_MontageSync_StopFollowing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_MontageSync_Follow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_StopGroupByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_Stop);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_SetPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_SetPlayRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_SetNextSection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_Resume);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_Play);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_Pause);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_JumpToSectionsEnd);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_JumpToSection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_IsPlaying);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_IsActive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_GetPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_GetPlayRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_GetIsStopped);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_GetEffectivePlayRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_GetCurrentSection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Montage_GetBlendTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_LinkAnimGraphByTag);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_LinkAnimClassLayers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_IsUsingMainInstanceMontageEvaluationData);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_IsSyncGroupBetweenMarkers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_IsSlotActive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_IsPlayingSlotAnimation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_IsAnyMontagePlaying);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_HasMarkerBeenHitThisFrame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetTimeToClosestMarker);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetReceiveNotifiesFromLinkedInstances);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetPropagateNotifiesToLinkedInstances);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetOwningComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetOwningActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetLinkedAnimLayerInstanceByGroupAndClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetLinkedAnimLayerInstanceByGroup);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetLinkedAnimLayerInstanceByClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetLinkedAnimGraphInstanceByTag);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetDeltaSeconds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetCurveValueWithDefault);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetCurveValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_GetCurrentActiveMontage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_DynamicMontage_IsPlayingFrom);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_ClearTransitionEvents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_ClearMorphTargets);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_ClearAllTransitionEvents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_CalculateDirection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_BlueprintUpdateAnimation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_BlueprintThreadSafeUpdateAnimation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_BlueprintPostEvaluateAnimation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_BlueprintLinkedAnimationLayersInitialized);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_BlueprintInitializeAnimation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_BlueprintBeginPlay);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Blueprint_GetSlotMontageLocalWeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimInstance_Blueprint_GetMainAnimInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimMontage_IsValidSectionName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimMontage_IsDynamicMontage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimMontage_GetSectionName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimMontage_GetSectionIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimMontage_GetNumSections);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimMontage_GetGroupName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimMontage_GetFirstAnimReference);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimMontage_GetDefaultBlendOutTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimMontage_GetDefaultBlendInTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimNotify_GetDefaultTriggerWeightThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimNotifyState_GetDefaultTriggerWeightThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimNotifyState_Trail_OverridePSTemplate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_StopAnim);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_SetReverse);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_SetPreviewCurveOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_SetPositionWithPreviousTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_SetPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_SetPlayRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_SetPlaying);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_SetMirrorDataTable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_SetLooping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_SetBlendSpacePosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_SetAnimationAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_PlayAnim);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_GetMirrorDataTable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_GetLength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAnimSingleNodeInstance_GetAnimationAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UArrowComponent_SetUseInEditorScaling);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UArrowComponent_SetTreatAsASprite);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UArrowComponent_SetScreenSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UArrowComponent_SetIsScreenSizeScaled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UArrowComponent_SetArrowSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UArrowComponent_SetArrowLength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UArrowComponent_SetArrowFColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UArrowComponent_SetArrowColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAsyncPhysicsInputComponent_ServerRPCBufferInput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAsyncPhysicsInputComponent_GetDataToWrite);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAsyncPhysicsInputComponent_GetDataToConsume);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetSunMultiplier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetStartDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetPrecomputeParams);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetFogMultiplier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetDistanceScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetDistanceOffset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetDensityOffset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetDensityMultiplier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetDefaultLightColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetDefaultBrightness);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_SetAltitudeScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_DisableSunDisk);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAtmosphericFogComponent_DisableGroundScattering);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_StopDelayed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_Stop);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetWaveParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetVolumeMultiplier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetUISound);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetSubmixSend);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetSourceBusSendPreEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetSourceBusSendPostEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetSound);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetPitchMultiplier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetPaused);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetOutputToBusOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetLowPassFilterFrequency);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetLowPassFilterEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetIntParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetFloatParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetBoolParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetAudioBusSendPreEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetAudioBusSendPostEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_Play);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_IsVirtualized);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_IsPlaying);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_HasCookedFFTData);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_HasCookedAmplitudeEnvelopeData);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_GetPlayState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_GetCookedEnvelopeData);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_FadeOut);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_FadeIn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_AdjustVolume);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetTriggerParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetStringParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_SetObjectParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAudioComponent_ResetParameters);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAvoidanceManager_RegisterMovementComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAvoidanceManager_GetObjectCount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAvoidanceManager_GetNewAvoidanceUID);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UAvoidanceManager_GetAvoidanceVelocityForComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBillboardComponent_SetUV);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBillboardComponent_SetSpriteAndUV);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBillboardComponent_SetSprite);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBillboardComponent_SetOpacityMaskRefVal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPathsLibrary_ShouldSaveToUserDir);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPathsLibrary_SetProjectFilePath);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPathsLibrary_IsSamePath);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPathsLibrary_IsRestrictedPath);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPathsLibrary_IsRelative);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPathsLibrary_IsProjectFilePathSet);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPathsLibrary_IsDrive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPathsLibrary_HasProjectPersistentDownloadDir);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPathsLibrary_FileExists);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPathsLibrary_DirectoryExists);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPlatformLibrary_SetAllowedDeviceOrientation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPlatformLibrary_ScheduleLocalNotificationBadgeFromNow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPlatformLibrary_GetDeviceOrientation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPlatformLibrary_GetAllowedDeviceOrientation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPlatformLibrary_ClearAllLocalNotifications);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPlatformLibrary_CancelLocalNotificationById);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBlueprintPlatformLibrary_CancelLocalNotification);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBoxComponent_SetBoxExtent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBoxComponent_GetUnscaledBoxExtent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UBoxComponent_GetScaledBoxExtent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetUseFieldOfViewForLOD);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetUseCameraHeightAsViewTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetUpdateOrthoPlanes);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetProjectionMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetPostProcessBlendWeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetOrthoWidth);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetOrthoNearClipPlane);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetOrthoFarClipPlane);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetFieldOfView);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetConstraintAspectRatio);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetAutoPlaneShift);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetAutoCalculateOrthoPlanes);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetAspectRatioAxisConstraint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraComponent_SetAspectRatio);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraModifier_IsPendingDisable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraModifier_IsDisabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraModifier_GetViewTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraModifier_EnableModifier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraModifier_DisableModifier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraModifier_BlueprintModifyCamera);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraShakeBase_SetRootShakePattern);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraShakeBase_GetRootShakePattern);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraShakeSourceComponent_StopAllCameraShakesOfType);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraShakeSourceComponent_StopAllCameraShakes);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraShakeSourceComponent_StartCameraShake);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraShakeSourceComponent_Start);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCameraShakeSourceComponent_GetAttenuationFactor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCancellableAsyncAction_IsActive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCancellableAsyncAction_Cancel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCanvas_K2_Project);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCanvasRenderTarget2D_UpdateResource);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCanvasRenderTarget2D_SetSampleCount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCanvasRenderTarget2D_ReceiveUpdate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCanvasRenderTarget2D_GetSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCanvasRenderTarget2D_GetSampleCount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCanvasRenderTarget2D_CreateCanvasRenderTarget2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_SetCapsuleSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_SetCapsuleRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_SetCapsuleHalfHeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetUnscaledCapsuleSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetUnscaledCapsuleRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetUnscaledCapsuleHalfHeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetShapeScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetScaledCapsuleSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetScaledCapsuleRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCapsuleComponent_GetScaledCapsuleHalfHeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_SetWalkableFloorZ);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_SetWalkableFloorAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_SetMovementMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_SetGravityDirection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_SetCrouchedHalfHeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_SetAvoidanceEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_K2_GetWalkableFloorZ);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_K2_GetWalkableFloorAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_IsWalking);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_HasCustomGravity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetValidPerchRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetPerchRadiusThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetMovementBase);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetMinAnalogSpeed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetMaxJumpHeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetMaxBrakingDeceleration);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetMaxAcceleration);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetLastUpdateVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetLastUpdateRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetLastUpdateRequestedVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetLastUpdateLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetImpartedMovementBaseVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetGravityDirection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetCurrentAcceleration);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetCrouchedHalfHeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetCharacterOwner);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_GetAnalogInputModifier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_DisableMovement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_ClearAccumulatedForces);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_CalcVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_AddImpulse);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCharacterMovementComponent_AddForce);
    }
}
#if PLATFORM_WINDOWS
#pragma warning(pop)
#else
#pragma GCC diagnostic pop
#endif
// ReSharper restore all

