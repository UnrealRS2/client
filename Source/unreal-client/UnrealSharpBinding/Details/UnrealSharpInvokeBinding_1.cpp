/*
    MIT License

    Copyright (c) 2024 UnrealSharp

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    Project URL: https://github.com/bodong1987/UnrealSharp
*/
// ReSharper disable CommentTypo
// ***********************************************************************
// Author           : bodong
// ***********************************************************************
// <copyright file="UnrealSharpInvokeBinding_1.cpp">
//     Copyright (c) 2024 UnrealSharp. 
// <summary>
// This code file is automatically generated by UnrealSharpTool. 
// Manually modifying this file will lose the modifications at the next generate time. 
// </summary>
// ***********************************************************************
// These codes are automatically generated by UnrealSharpTool in order to realize fast function calls from C# to C++.
// Please do not modify this file manually.

// ReSharper disable all
#include "CoreMinimal.h"
#include "Misc/UnrealInteropFunctions.h"
#include "Misc/CSharpStructures.h"
#include "Components/ChildActorComponent.h"
#include "Components/DecalComponent.h"
#include "Components/DirectionalLightComponent.h"
#include "Components/ExponentialHeightFogComponent.h"
#include "Components/ForceFeedbackComponent.h"
#include "Components/HeterogeneousVolumeComponent.h"
#include "Components/InstancedStaticMeshComponent.h"
#include "Components/InterpToMovementComponent.h"
#include "Curves/CurveBase.h"
#include "Curves/CurveFloat.h"
#include "Curves/CurveLinearColor.h"
#include "Curves/CurveLinearColorAtlas.h"
#include "Curves/CurveVector.h"
#include "Engine/GameInstance.h"
#include "Engine/GameViewportClient.h"
#include "GameFramework/CheatManager.h"
#include "GameFramework/GameUserSettings.h"
#include "GameFramework/InputDeviceLibrary.h"
#include "GameFramework/InputDeviceSubsystem.h"
#include "GameFramework/InputSettings.h"
#include "Kismet/DataTableFunctionLibrary.h"
#include "Kismet/GameplayStatics.h"
#include "Kismet/ImportanceSamplingLibrary.h"
#include "Kismet/KismetGuidLibrary.h"
#include "Kismet/KismetInputLibrary.h"
#include "Kismet/KismetInternationalizationLibrary.h"
#include "Kismet/KismetMaterialLibrary.h"
#include "Kismet/KismetMathLibrary.h"
#include "Kismet/KismetRenderingLibrary.h"
#include "Particles/ParticleSystemComponent.h"
#include "PhysicsEngine/ClusterUnionComponent.h"
#include "PhysicsEngine/ClusterUnionReplicatedProxyComponent.h"
#include "ProfilingDebugging/HealthSnapshot.h"
#include "WorldPartition/DataLayer/DataLayer.h"
#include "WorldPartition/DataLayer/DataLayerAsset.h"
#include "WorldPartition/DataLayer/DataLayerInstance.h"
#include "WorldPartition/DataLayer/DataLayerManager.h"
#include "WorldPartition/DataLayer/DataLayerSubsystem.h"

#if PLATFORM_WINDOWS
#pragma warning(push)
#pragma warning(disable:4996)
#else
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated"
#endif

namespace UnrealSharp::Bindings
{
    void UCheatManager_Walk(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->Walk();
    }

    void UCheatManager_ViewSelf(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->ViewSelf();
    }

    void UCheatManager_ViewPlayer(UCheatManager* __this, const char* S)
    {
        checkSlow(__this != nullptr);
        __this->ViewPlayer(US_STRING_TO_TCHAR(S));
    }

    void UCheatManager_ViewClass(UCheatManager* __this, TSubclassOf<AActor>& DesiredClass)
    {
        checkSlow(__this != nullptr);
        __this->ViewClass(DesiredClass);
    }

    void UCheatManager_ViewActor(UCheatManager* __this, FName& ActorName)
    {
        checkSlow(__this != nullptr);
        __this->ViewActor(ActorName);
    }

    void UCheatManager_UpdateSafeArea(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->UpdateSafeArea();
    }

    void UCheatManager_ToggleServerStatReplicatorUpdateStatNet(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->ToggleServerStatReplicatorUpdateStatNet();
    }

    void UCheatManager_ToggleServerStatReplicatorClientOverwrite(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->ToggleServerStatReplicatorClientOverwrite();
    }

    void UCheatManager_ToggleDebugCamera(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->ToggleDebugCamera();
    }

    void UCheatManager_ToggleAILogging(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->ToggleAILogging();
    }

    void UCheatManager_TestCollisionDistance(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->TestCollisionDistance();
    }

    void UCheatManager_Teleport(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->Teleport();
    }

    void UCheatManager_Summon(UCheatManager* __this, const char* ClassName)
    {
        checkSlow(__this != nullptr);
        __this->Summon(US_STRING_TO_TCHAR(ClassName));
    }

    void UCheatManager_StreamLevelOut(UCheatManager* __this, FName& PackageName)
    {
        checkSlow(__this != nullptr);
        __this->StreamLevelOut(PackageName);
    }

    void UCheatManager_StreamLevelIn(UCheatManager* __this, FName& PackageName)
    {
        checkSlow(__this != nullptr);
        __this->StreamLevelIn(PackageName);
    }

    void UCheatManager_SpawnServerStatReplicator(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->SpawnServerStatReplicator();
    }

    void UCheatManager_Slomo(UCheatManager* __this, float NewTimeDilation)
    {
        checkSlow(__this != nullptr);
        __this->Slomo(NewTimeDilation);
    }

    void UCheatManager_SetWorldOrigin(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->SetWorldOrigin();
    }

    void UCheatManager_SetMouseSensitivityToDefault(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->SetMouseSensitivityToDefault();
    }

    void UCheatManager_ServerToggleAILogging(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->ServerToggleAILogging();
    }

    void UCheatManager_ReceiveInitCheatManager(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveInitCheatManager();
    }

    void UCheatManager_ReceiveEndPlay(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveEndPlay();
    }

    void UCheatManager_PlayersOnly(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->PlayersOnly();
    }

    void UCheatManager_OnPlayerEndPlayed(UCheatManager* __this, AActor* Player, TEnumAsByte<EEndPlayReason::Type> EndPlayReason)
    {
        checkSlow(__this != nullptr);
        __this->OnPlayerEndPlayed(Player, EndPlayReason);
    }

    void UCheatManager_OnlyLoadLevel(UCheatManager* __this, FName& PackageName)
    {
        checkSlow(__this != nullptr);
        __this->OnlyLoadLevel(PackageName);
    }

    void UCheatManager_LogLoc(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->LogLoc();
    }

    void UCheatManager_InvertMouse(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->InvertMouse();
    }

    void UCheatManager_God(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->God();
    }

    void UCheatManager_Ghost(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->Ghost();
    }

    void UCheatManager_GetPlayerController(UCheatManager* __this, APlayerController*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayerController();
    }

    void UCheatManager_FreezeFrame(UCheatManager* __this, float Delay)
    {
        checkSlow(__this != nullptr);
        __this->FreezeFrame(Delay);
    }

    void UCheatManager_Fly(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->Fly();
    }

    void UCheatManager_FlushLog(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->FlushLog();
    }

    void UCheatManager_DumpVoiceMutingState(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DumpVoiceMutingState();
    }

    void UCheatManager_DumpPartyState(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DumpPartyState();
    }

    void UCheatManager_DumpOnlineSessionState(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DumpOnlineSessionState();
    }

    void UCheatManager_DumpChatState(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DumpChatState();
    }

    void UCheatManager_DestroyTarget(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DestroyTarget();
    }

    void UCheatManager_DestroyServerStatReplicator(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DestroyServerStatReplicator();
    }

    void UCheatManager_DestroyPawns(UCheatManager* __this, TSubclassOf<APawn>& aClass)
    {
        checkSlow(__this != nullptr);
        __this->DestroyPawns(aClass);
    }

    void UCheatManager_DestroyAllPawnsExceptTarget(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DestroyAllPawnsExceptTarget();
    }

    void UCheatManager_DestroyAll(UCheatManager* __this, TSubclassOf<AActor>& aClass)
    {
        checkSlow(__this != nullptr);
        __this->DestroyAll(aClass);
    }

    void UCheatManager_DebugCapsuleSweepSize(UCheatManager* __this, float HalfHeight, float Radius)
    {
        checkSlow(__this != nullptr);
        __this->DebugCapsuleSweepSize(HalfHeight, Radius);
    }

    void UCheatManager_DebugCapsuleSweepPawn(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DebugCapsuleSweepPawn();
    }

    void UCheatManager_DebugCapsuleSweepComplex(UCheatManager* __this, bool bTraceComplex)
    {
        checkSlow(__this != nullptr);
        __this->DebugCapsuleSweepComplex(bTraceComplex);
    }

    void UCheatManager_DebugCapsuleSweepClear(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DebugCapsuleSweepClear();
    }

    void UCheatManager_DebugCapsuleSweepChannel(UCheatManager* __this, TEnumAsByte<ECollisionChannel> Channel)
    {
        checkSlow(__this != nullptr);
        __this->DebugCapsuleSweepChannel(Channel);
    }

    void UCheatManager_DebugCapsuleSweepCapture(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DebugCapsuleSweepCapture();
    }

    void UCheatManager_DebugCapsuleSweep(UCheatManager* __this)
    {
        checkSlow(__this != nullptr);
        __this->DebugCapsuleSweep();
    }

    void UCheatManager_DamageTarget(UCheatManager* __this, float DamageAmount)
    {
        checkSlow(__this != nullptr);
        __this->DamageTarget(DamageAmount);
    }

    void UCheatManager_CheatScript(UCheatManager* __this, const char* ScriptName)
    {
        checkSlow(__this != nullptr);
        __this->CheatScript(US_STRING_TO_TCHAR(ScriptName));
    }

    void UCheatManager_ChangeSize(UCheatManager* __this, float F)
    {
        checkSlow(__this != nullptr);
        __this->ChangeSize(F);
    }

    void UCheatManager_BugItGo(UCheatManager* __this, float X, float Y, float Z, float Pitch, float Yaw, float Roll)
    {
        checkSlow(__this != nullptr);
        __this->BugItGo(X, Y, Z, Pitch, Yaw, Roll);
    }

    void UCheatManager_BugIt(UCheatManager* __this, const char* ScreenShotDescription)
    {
        checkSlow(__this != nullptr);
        __this->BugIt(US_STRING_TO_TCHAR(ScreenShotDescription));
    }

    void UCheatManagerExtension_RemovedFromCheatManager(UCheatManagerExtension* __this)
    {
        checkSlow(__this != nullptr);
        __this->RemovedFromCheatManager();
    }

    void UCheatManagerExtension_GetPlayerController(UCheatManagerExtension* __this, APlayerController*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayerController();
    }

    void UCheatManagerExtension_AddedToCheatManager(UCheatManagerExtension* __this)
    {
        checkSlow(__this != nullptr);
        __this->AddedToCheatManager();
    }

    void UChildActorComponent_SetChildActorClass(UChildActorComponent* __this, TSubclassOf<AActor>& InClass)
    {
        checkSlow(__this != nullptr);
        __this->SetChildActorClass(InClass);
    }

    void UClusterUnionComponent_SetIsAnchored(UClusterUnionComponent* __this, bool bIsAnchored)
    {
        checkSlow(__this != nullptr);
        __this->SetIsAnchored(bIsAnchored);
    }

    void UClusterUnionComponent_SetEnableDamageFromCollision(UClusterUnionComponent* __this, bool bValue)
    {
        checkSlow(__this != nullptr);
        __this->SetEnableDamageFromCollision(bValue);
    }

    void UClusterUnionComponent_RemoveComponentFromCluster(UClusterUnionComponent* __this, UPrimitiveComponent* InComponent)
    {
        checkSlow(__this != nullptr);
        __this->RemoveComponentFromCluster(InComponent);
    }

    void UClusterUnionComponent_IsComponentAdded(UClusterUnionComponent* __this, UPrimitiveComponent* Component, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsComponentAdded(Component);
    }

    void UClusterUnionReplicatedProxyComponent_SetParentClusterUnion(UClusterUnionReplicatedProxyComponent* __this, UClusterUnionComponent* InComponent)
    {
        checkSlow(__this != nullptr);
        __this->SetParentClusterUnion(InComponent);
    }

    void UClusterUnionReplicatedProxyComponent_SetChildClusteredComponent(UClusterUnionReplicatedProxyComponent* __this, UPrimitiveComponent* InComponent)
    {
        checkSlow(__this != nullptr);
        __this->SetChildClusteredComponent(InComponent);
    }

    void UClusterUnionReplicatedProxyComponent_MarkPendingDeletion(UClusterUnionReplicatedProxyComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->MarkPendingDeletion();
    }

    void UClusterUnionReplicatedProxyComponent_IsPendingDeletion(UClusterUnionReplicatedProxyComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPendingDeletion();
    }

    void UClusterUnionReplicatedProxyComponent_GetParentClusterUnionComponent(UClusterUnionReplicatedProxyComponent* __this, UClusterUnionComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetParentClusterUnionComponent();
    }

    void UClusterUnionReplicatedProxyComponent_GetChildClusteredComponent(UClusterUnionReplicatedProxyComponent* __this, UPrimitiveComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetChildClusteredComponent();
    }

    void UCurveBase_GetValueRange(UCurveBase* __this, float& MinValue, float& MaxValue)
    {
        checkSlow(__this != nullptr);
        __this->GetValueRange(MinValue, MaxValue);
    }

    void UCurveBase_GetTimeRange(UCurveBase* __this, float& MinTime, float& MaxTime)
    {
        checkSlow(__this != nullptr);
        __this->GetTimeRange(MinTime, MaxTime);
    }

    void UCurveFloat_GetFloatValue(UCurveFloat* __this, float InTime, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFloatValue(InTime);
    }

    void UCurveLinearColor_GetUnadjustedLinearColorValue(UCurveLinearColor* __this, float InTime, FLinearColor& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUnadjustedLinearColorValue(InTime);
    }

    void UCurveLinearColor_GetLinearColorValue(UCurveLinearColor* __this, float InTime, FLinearColor& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLinearColorValue(InTime);
    }

    void UCurveLinearColor_GetClampedLinearColorValue(UCurveLinearColor* __this, float InTime, FLinearColor& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetClampedLinearColorValue(InTime);
    }

    void UCurveLinearColorAtlas_GetCurvePosition(UCurveLinearColorAtlas* __this, UCurveLinearColor* InCurve, float& Position, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurvePosition(InCurve, Position);
    }

    void UCurveVector_GetVectorValue(UCurveVector* __this, float InTime, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetVectorValue(InTime);
    }

    void UDataLayerAsset_IsServerOnly(UDataLayerAsset* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsServerOnly();
    }

    void UDataLayerAsset_IsRuntime(UDataLayerAsset* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsRuntime();
    }

    void UDataLayerAsset_IsClientOnly(UDataLayerAsset* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsClientOnly();
    }

    void UDataLayerAsset_GetType(UDataLayerAsset* __this, EDataLayerType& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetType();
    }

    void UDataLayerAsset_GetDebugColor(UDataLayerAsset* __this, FColor& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDebugColor();
    }

    void UDataLayerInstance_IsVisible(UDataLayerInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsVisible();
    }

    void UDataLayerInstance_IsServerOnly(UDataLayerInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsServerOnly();
    }

    void UDataLayerInstance_IsRuntime(UDataLayerInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsRuntime();
    }

    void UDataLayerInstance_IsInitiallyVisible(UDataLayerInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsInitiallyVisible();
    }

    void UDataLayerInstance_IsEffectiveVisible(UDataLayerInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsEffectiveVisible();
    }

    void UDataLayerInstance_IsClientOnly(UDataLayerInstance* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsClientOnly();
    }

    void UDataLayerInstance_GetType(UDataLayerInstance* __this, EDataLayerType& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetType();
    }

    void UDataLayerInstance_GetInitialRuntimeState(UDataLayerInstance* __this, EDataLayerRuntimeState& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetInitialRuntimeState();
    }

    void UDataLayerInstance_GetDebugColor(UDataLayerInstance* __this, FColor& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDebugColor();
    }

    void UDataLayerInstance_GetAsset(UDataLayerInstance* __this, const UDataLayerAsset*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAsset();
    }

    void UDataLayerManager_SetDataLayerRuntimeState(UDataLayerManager* __this, const UDataLayerAsset* InDataLayerAsset, EDataLayerRuntimeState InState, bool bInIsRecursive, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->SetDataLayerRuntimeState(InDataLayerAsset, InState, bInIsRecursive);
    }

    void UDataLayerManager_SetDataLayerInstanceRuntimeState(UDataLayerManager* __this, const UDataLayerInstance* InDataLayerInstance, EDataLayerRuntimeState InState, bool bInIsRecursive, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->SetDataLayerInstanceRuntimeState(InDataLayerInstance, InState, bInIsRecursive);
    }

    void UDataLayerManager_GetDataLayerInstanceRuntimeState(UDataLayerManager* __this, const UDataLayerInstance* InDataLayerInstance, EDataLayerRuntimeState& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDataLayerInstanceRuntimeState(InDataLayerInstance);
    }

    void UDataLayerManager_GetDataLayerInstanceFromName(UDataLayerManager* __this, const FName& InDataLayerInstanceName, const UDataLayerInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDataLayerInstanceFromName(InDataLayerInstanceName);
    }

    void UDataLayerManager_GetDataLayerInstanceFromAsset(UDataLayerManager* __this, const UDataLayerAsset* InDataLayerAsset, const UDataLayerInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDataLayerInstanceFromAsset(InDataLayerAsset);
    }

    void UDataLayerManager_GetDataLayerInstanceEffectiveRuntimeState(UDataLayerManager* __this, const UDataLayerInstance* InDataLayerInstance, EDataLayerRuntimeState& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDataLayerInstanceEffectiveRuntimeState(InDataLayerInstance);
    }

    void UDataLayerSubsystem_SetDataLayerRuntimeStateByLabel(UDataLayerSubsystem* __this, const FName& InDataLayerLabel, EDataLayerRuntimeState InState, bool bInIsRecursive)
    {
        checkSlow(__this != nullptr);
        __this->SetDataLayerRuntimeStateByLabel(InDataLayerLabel, InState, bInIsRecursive);
    }

    void UDataTableFunctionLibrary_GetDataTableRowStruct(const UDataTable* Table, const UScriptStruct*& __result)
    {
        __result = UDataTableFunctionLibrary::GetDataTableRowStruct(Table);
    }

    void UDataTableFunctionLibrary_GetDataTableColumnNameFromExportName(const UDataTable* Table, const char* ColumnExportName, FName& OutColumnName, bool& __result)
    {
        __result = UDataTableFunctionLibrary::GetDataTableColumnNameFromExportName(Table, US_STRING_TO_TCHAR(ColumnExportName), OutColumnName);
    }

    void UDataTableFunctionLibrary_EvaluateCurveTableRow(UCurveTable* CurveTable, FName& RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult::Type>& OutResult, float& OutXY, const char* ContextString)
    {
        UDataTableFunctionLibrary::EvaluateCurveTableRow(CurveTable, RowName, InXY, OutResult, OutXY, US_STRING_TO_TCHAR(ContextString));
    }

    void UDataTableFunctionLibrary_DoesDataTableRowExist(const UDataTable* Table, FName& RowName, bool& __result)
    {
        __result = UDataTableFunctionLibrary::DoesDataTableRowExist(Table, RowName);
    }

    void UDecalComponent_SetSortOrder(UDecalComponent* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetSortOrder(Value);
    }

    void UDecalComponent_SetFadeScreenSize(UDecalComponent* __this, float NewFadeScreenSize)
    {
        checkSlow(__this != nullptr);
        __this->SetFadeScreenSize(NewFadeScreenSize);
    }

    void UDecalComponent_SetFadeOut(UDecalComponent* __this, float StartDelay, float Duration, bool DestroyOwnerAfterFade)
    {
        checkSlow(__this != nullptr);
        __this->SetFadeOut(StartDelay, Duration, DestroyOwnerAfterFade);
    }

    void UDecalComponent_SetFadeIn(UDecalComponent* __this, float StartDelay, float Duration)
    {
        checkSlow(__this != nullptr);
        __this->SetFadeIn(StartDelay, Duration);
    }

    void UDecalComponent_SetDecalMaterial(UDecalComponent* __this, UMaterialInterface* NewDecalMaterial)
    {
        checkSlow(__this != nullptr);
        __this->SetDecalMaterial(NewDecalMaterial);
    }

    void UDecalComponent_SetDecalColor(UDecalComponent* __this, const FLinearColor& Color)
    {
        checkSlow(__this != nullptr);
        __this->SetDecalColor(Color);
    }

    void UDecalComponent_GetFadeStartDelay(UDecalComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFadeStartDelay();
    }

    void UDecalComponent_GetFadeInStartDelay(UDecalComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFadeInStartDelay();
    }

    void UDecalComponent_GetFadeInDuration(UDecalComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFadeInDuration();
    }

    void UDecalComponent_GetFadeDuration(UDecalComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFadeDuration();
    }

    void UDecalComponent_GetDecalMaterial(UDecalComponent* __this, UMaterialInterface*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDecalMaterial();
    }

    void UDecalComponent_CreateDynamicMaterialInstance(UDecalComponent* __this, UMaterialInstanceDynamic*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CreateDynamicMaterialInstance();
    }

    void UDEPRECATED_DataLayer_IsVisible(UDEPRECATED_DataLayer* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsVisible();
    }

    void UDEPRECATED_DataLayer_IsRuntime(UDEPRECATED_DataLayer* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsRuntime();
    }

    void UDEPRECATED_DataLayer_IsInitiallyVisible(UDEPRECATED_DataLayer* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsInitiallyVisible();
    }

    void UDEPRECATED_DataLayer_IsEffectiveVisible(UDEPRECATED_DataLayer* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsEffectiveVisible();
    }

    void UDEPRECATED_DataLayer_GetInitialRuntimeState(UDEPRECATED_DataLayer* __this, EDataLayerRuntimeState& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetInitialRuntimeState();
    }

    void UDEPRECATED_DataLayer_GetDebugColor(UDEPRECATED_DataLayer* __this, FColor& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDebugColor();
    }

    void UDEPRECATED_DataLayer_GetDataLayerLabel(UDEPRECATED_DataLayer* __this, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDataLayerLabel();
    }

    void UDirectionalLightComponent_SetShadowSourceAngleFactor(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetShadowSourceAngleFactor(NewValue);
    }

    void UDirectionalLightComponent_SetShadowDistanceFadeoutFraction(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetShadowDistanceFadeoutFraction(NewValue);
    }

    void UDirectionalLightComponent_SetShadowCascadeBiasDistribution(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetShadowCascadeBiasDistribution(NewValue);
    }

    void UDirectionalLightComponent_SetShadowAmount(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetShadowAmount(NewValue);
    }

    void UDirectionalLightComponent_SetOcclusionMaskDarkness(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetOcclusionMaskDarkness(NewValue);
    }

    void UDirectionalLightComponent_SetOcclusionDepthRange(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetOcclusionDepthRange(NewValue);
    }

    void UDirectionalLightComponent_SetLightSourceSoftAngle(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetLightSourceSoftAngle(NewValue);
    }

    void UDirectionalLightComponent_SetLightSourceAngle(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetLightSourceAngle(NewValue);
    }

    void UDirectionalLightComponent_SetLightShaftOverrideDirection(UDirectionalLightComponent* __this, FVector& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetLightShaftOverrideDirection(NewValue);
    }

    void UDirectionalLightComponent_SetForwardShadingPriority(UDirectionalLightComponent* __this, int32 NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetForwardShadingPriority(NewValue);
    }

    void UDirectionalLightComponent_SetEnableLightShaftOcclusion(UDirectionalLightComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetEnableLightShaftOcclusion(bNewValue);
    }

    void UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetDynamicShadowDistanceStationaryLight(NewValue);
    }

    void UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetDynamicShadowDistanceMovableLight(NewValue);
    }

    void UDirectionalLightComponent_SetDynamicShadowCascades(UDirectionalLightComponent* __this, int32 NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetDynamicShadowCascades(NewValue);
    }

    void UDirectionalLightComponent_SetCascadeTransitionFraction(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetCascadeTransitionFraction(NewValue);
    }

    void UDirectionalLightComponent_SetCascadeDistributionExponent(UDirectionalLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetCascadeDistributionExponent(NewValue);
    }

    void UDirectionalLightComponent_SetAtmosphereSunLightIndex(UDirectionalLightComponent* __this, int32 NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetAtmosphereSunLightIndex(NewValue);
    }

    void UDirectionalLightComponent_SetAtmosphereSunLight(UDirectionalLightComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetAtmosphereSunLight(bNewValue);
    }

    void UExponentialHeightFogComponent_SetVolumetricFogScatteringDistribution(UExponentialHeightFogComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetVolumetricFogScatteringDistribution(NewValue);
    }

    void UExponentialHeightFogComponent_SetVolumetricFogExtinctionScale(UExponentialHeightFogComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetVolumetricFogExtinctionScale(NewValue);
    }

    void UExponentialHeightFogComponent_SetVolumetricFogEmissive(UExponentialHeightFogComponent* __this, FLinearColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetVolumetricFogEmissive(NewValue);
    }

    void UExponentialHeightFogComponent_SetVolumetricFogDistance(UExponentialHeightFogComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetVolumetricFogDistance(NewValue);
    }

    void UExponentialHeightFogComponent_SetVolumetricFogAlbedo(UExponentialHeightFogComponent* __this, FColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetVolumetricFogAlbedo(NewValue);
    }

    void UExponentialHeightFogComponent_SetVolumetricFog(UExponentialHeightFogComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetVolumetricFog(bNewValue);
    }

    void UExponentialHeightFogComponent_SetStartDistance(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetStartDistance(Value);
    }

    void UExponentialHeightFogComponent_SetSecondFogHeightOffset(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetSecondFogHeightOffset(Value);
    }

    void UExponentialHeightFogComponent_SetSecondFogHeightFalloff(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetSecondFogHeightFalloff(Value);
    }

    void UExponentialHeightFogComponent_SetSecondFogDensity(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetSecondFogDensity(Value);
    }

    void UExponentialHeightFogComponent_SetRenderInMainPass(UExponentialHeightFogComponent* __this, bool bValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRenderInMainPass(bValue);
    }

    void UExponentialHeightFogComponent_SetNonDirectionalInscatteringColorDistance(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetNonDirectionalInscatteringColorDistance(Value);
    }

    void UExponentialHeightFogComponent_SetInscatteringTextureTint(UExponentialHeightFogComponent* __this, FLinearColor& Value)
    {
        checkSlow(__this != nullptr);
        __this->SetInscatteringTextureTint(Value);
    }

    void UExponentialHeightFogComponent_SetInscatteringColorCubemapAngle(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetInscatteringColorCubemapAngle(Value);
    }

    void UExponentialHeightFogComponent_SetInscatteringColorCubemap(UExponentialHeightFogComponent* __this, UTextureCube* Value)
    {
        checkSlow(__this != nullptr);
        __this->SetInscatteringColorCubemap(Value);
    }

    void UExponentialHeightFogComponent_SetHoldout(UExponentialHeightFogComponent* __this, bool bNewHoldout)
    {
        checkSlow(__this != nullptr);
        __this->SetHoldout(bNewHoldout);
    }

    void UExponentialHeightFogComponent_SetFullyDirectionalInscatteringColorDistance(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetFullyDirectionalInscatteringColorDistance(Value);
    }

    void UExponentialHeightFogComponent_SetFogMaxOpacity(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetFogMaxOpacity(Value);
    }

    void UExponentialHeightFogComponent_SetFogInscatteringColor(UExponentialHeightFogComponent* __this, FLinearColor& Value)
    {
        checkSlow(__this != nullptr);
        __this->SetFogInscatteringColor(Value);
    }

    void UExponentialHeightFogComponent_SetFogHeightFalloff(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetFogHeightFalloff(Value);
    }

    void UExponentialHeightFogComponent_SetFogDensity(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetFogDensity(Value);
    }

    void UExponentialHeightFogComponent_SetFogCutoffDistance(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetFogCutoffDistance(Value);
    }

    void UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetDirectionalInscatteringStartDistance(Value);
    }

    void UExponentialHeightFogComponent_SetDirectionalInscatteringExponent(UExponentialHeightFogComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetDirectionalInscatteringExponent(Value);
    }

    void UExponentialHeightFogComponent_SetDirectionalInscatteringColor(UExponentialHeightFogComponent* __this, FLinearColor& Value)
    {
        checkSlow(__this != nullptr);
        __this->SetDirectionalInscatteringColor(Value);
    }

    void UForceFeedbackComponent_Stop(UForceFeedbackComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->Stop();
    }

    void UForceFeedbackComponent_SetIntensityMultiplier(UForceFeedbackComponent* __this, float NewIntensityMultiplier)
    {
        checkSlow(__this != nullptr);
        __this->SetIntensityMultiplier(NewIntensityMultiplier);
    }

    void UForceFeedbackComponent_SetForceFeedbackEffect(UForceFeedbackComponent* __this, UForceFeedbackEffect* NewForceFeedbackEffect)
    {
        checkSlow(__this != nullptr);
        __this->SetForceFeedbackEffect(NewForceFeedbackEffect);
    }

    void UForceFeedbackComponent_Play(UForceFeedbackComponent* __this, float StartTime)
    {
        checkSlow(__this != nullptr);
        __this->Play(StartTime);
    }

    void UFXSystemComponent_SetVectorParameter(UFXSystemComponent* __this, FName& ParameterName, FVector& Param)
    {
        checkSlow(__this != nullptr);
        __this->SetVectorParameter(ParameterName, Param);
    }

    void UFXSystemComponent_SetUseAutoManageAttachment(UFXSystemComponent* __this, bool bAutoManage)
    {
        checkSlow(__this != nullptr);
        __this->SetUseAutoManageAttachment(bAutoManage);
    }

    void UFXSystemComponent_SetIntParameter(UFXSystemComponent* __this, FName& ParameterName, int32 Param)
    {
        checkSlow(__this != nullptr);
        __this->SetIntParameter(ParameterName, Param);
    }

    void UFXSystemComponent_SetFloatParameter(UFXSystemComponent* __this, FName& ParameterName, float Param)
    {
        checkSlow(__this != nullptr);
        __this->SetFloatParameter(ParameterName, Param);
    }

    void UFXSystemComponent_SetEmitterEnable(UFXSystemComponent* __this, FName& EmitterName, bool bNewEnableState)
    {
        checkSlow(__this != nullptr);
        __this->SetEmitterEnable(EmitterName, bNewEnableState);
    }

    void UFXSystemComponent_SetColorParameter(UFXSystemComponent* __this, FName& ParameterName, FLinearColor& Param)
    {
        checkSlow(__this != nullptr);
        __this->SetColorParameter(ParameterName, Param);
    }

    void UFXSystemComponent_SetBoolParameter(UFXSystemComponent* __this, FName& ParameterName, bool Param)
    {
        checkSlow(__this != nullptr);
        __this->SetBoolParameter(ParameterName, Param);
    }

    void UFXSystemComponent_SetAutoAttachmentParameters(UFXSystemComponent* __this, USceneComponent* Parent, FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule)
    {
        checkSlow(__this != nullptr);
        __this->SetAutoAttachmentParameters(Parent, SocketName, LocationRule, RotationRule, ScaleRule);
    }

    void UFXSystemComponent_SetActorParameter(UFXSystemComponent* __this, FName& ParameterName, AActor* Param)
    {
        checkSlow(__this != nullptr);
        __this->SetActorParameter(ParameterName, Param);
    }

    void UFXSystemComponent_ReleaseToPool(UFXSystemComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReleaseToPool();
    }

    void UFXSystemComponent_GetFXSystemAsset(UFXSystemComponent* __this, UFXSystemAsset*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFXSystemAsset();
    }

    void UGameInstance_ReceiveShutdown(UGameInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveShutdown();
    }

    void UGameInstance_ReceiveInit(UGameInstance* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReceiveInit();
    }

    void UGameInstance_HandleTravelError(UGameInstance* __this, TEnumAsByte<ETravelFailure::Type> FailureType)
    {
        checkSlow(__this != nullptr);
        __this->HandleTravelError(FailureType);
    }

    void UGameInstance_HandleNetworkError(UGameInstance* __this, TEnumAsByte<ENetworkFailure::Type> FailureType, bool bIsServer)
    {
        checkSlow(__this != nullptr);
        __this->HandleNetworkError(FailureType, bIsServer);
    }

    void UGameInstance_DebugRemovePlayer(UGameInstance* __this, int32 ControllerId)
    {
        checkSlow(__this != nullptr);
        __this->DebugRemovePlayer(ControllerId);
    }

    void UGameInstance_DebugCreatePlayer(UGameInstance* __this, int32 ControllerId)
    {
        checkSlow(__this != nullptr);
        __this->DebugCreatePlayer(ControllerId);
    }

    void UGameplayStatics_UnRetainAllSoundsInSoundClass(USoundClass* InSoundClass)
    {
        UGameplayStatics::UnRetainAllSoundsInSoundClass(InSoundClass);
    }

    void UGameplayStatics_SuggestProjectileVelocity_MovingTarget(const UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector& ProjectileStartLocation, AActor* TargetActor, FVector& TargetLocationOffset, double GravityZOverride, double TimeToTarget, TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType, float DrawDebugTime, FLinearColor& DrawDebugColor, bool& __result)
    {
        __result = UGameplayStatics::SuggestProjectileVelocity_MovingTarget(WorldContextObject, OutLaunchVelocity, ProjectileStartLocation, TargetActor, TargetLocationOffset, GravityZOverride, TimeToTarget, DrawDebugType, DrawDebugTime, DrawDebugColor);
    }

    void UGameplayStatics_SuggestProjectileVelocity_CustomArc(const UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector& StartPos, FVector& EndPos, float OverrideGravityZ, float ArcParam, bool& __result)
    {
        __result = UGameplayStatics::SuggestProjectileVelocity_CustomArc(WorldContextObject, OutLaunchVelocity, StartPos, EndPos, OverrideGravityZ, ArcParam);
    }

    void UGameplayStatics_SpawnSoundAttached(USoundBase* Sound, USceneComponent* AttachToComponent, FName& AttachPointName, FVector& Location, FRotator& Rotation, TEnumAsByte<EAttachLocation::Type> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, UAudioComponent*& __result)
    {
        __result = UGameplayStatics::SpawnSoundAttached(Sound, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy);
    }

    void UGameplayStatics_SpawnSoundAtLocation(const UObject* WorldContextObject, USoundBase* Sound, FVector& Location, FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, UAudioComponent*& __result)
    {
        __result = UGameplayStatics::SpawnSoundAtLocation(WorldContextObject, Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy);
    }

    void UGameplayStatics_SpawnSound2D(const UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, UAudioComponent*& __result)
    {
        __result = UGameplayStatics::SpawnSound2D(WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy);
    }

    void UGameplayStatics_SpawnForceFeedbackAttached(UForceFeedbackEffect* ForceFeedbackEffect, USceneComponent* AttachToComponent, FName& AttachPointName, FVector& Location, FRotator& Rotation, TEnumAsByte<EAttachLocation::Type> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy, UForceFeedbackComponent*& __result)
    {
        __result = UGameplayStatics::SpawnForceFeedbackAttached(ForceFeedbackEffect, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, bLooping, IntensityMultiplier, StartTime, AttenuationSettings, bAutoDestroy);
    }

    void UGameplayStatics_SpawnForceFeedbackAtLocation(const UObject* WorldContextObject, UForceFeedbackEffect* ForceFeedbackEffect, FVector& Location, FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy, UForceFeedbackComponent*& __result)
    {
        __result = UGameplayStatics::SpawnForceFeedbackAtLocation(WorldContextObject, ForceFeedbackEffect, Location, Rotation, bLooping, IntensityMultiplier, StartTime, AttenuationSettings, bAutoDestroy);
    }

    void UGameplayStatics_SpawnEmitterAttached(UParticleSystem* EmitterTemplate, USceneComponent* AttachToComponent, FName& AttachPointName, FVector& Location, FRotator& Rotation, FVector& Scale, TEnumAsByte<EAttachLocation::Type> LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate, UParticleSystemComponent*& __result)
    {
        __result = UGameplayStatics::SpawnEmitterAttached(EmitterTemplate, AttachToComponent, AttachPointName, Location, Rotation, Scale, LocationType, bAutoDestroy, PoolingMethod, bAutoActivate);
    }

    void UGameplayStatics_SpawnEmitterAtLocation(const UObject* WorldContextObject, UParticleSystem* EmitterTemplate, FVector& Location, FRotator& Rotation, FVector& Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem, UParticleSystemComponent*& __result)
    {
        __result = UGameplayStatics::SpawnEmitterAtLocation(WorldContextObject, EmitterTemplate, Location, Rotation, Scale, bAutoDestroy, PoolingMethod, bAutoActivateSystem);
    }

    void UGameplayStatics_SpawnDecalAttached(UMaterialInterface* DecalMaterial, FVector& DecalSize, USceneComponent* AttachToComponent, FName& AttachPointName, FVector& Location, FRotator& Rotation, TEnumAsByte<EAttachLocation::Type> LocationType, float LifeSpan, UDecalComponent*& __result)
    {
        __result = UGameplayStatics::SpawnDecalAttached(DecalMaterial, DecalSize, AttachToComponent, AttachPointName, Location, Rotation, LocationType, LifeSpan);
    }

    void UGameplayStatics_SpawnDecalAtLocation(const UObject* WorldContextObject, UMaterialInterface* DecalMaterial, FVector& DecalSize, FVector& Location, FRotator& Rotation, float LifeSpan, UDecalComponent*& __result)
    {
        __result = UGameplayStatics::SpawnDecalAtLocation(WorldContextObject, DecalMaterial, DecalSize, Location, Rotation, LifeSpan);
    }

    void UGameplayStatics_SetViewportMouseCaptureMode(const UObject* WorldContextObject, const EMouseCaptureMode MouseCaptureMode)
    {
        UGameplayStatics::SetViewportMouseCaptureMode(WorldContextObject, MouseCaptureMode);
    }

    void UGameplayStatics_SetSubtitlesEnabled(bool bEnabled)
    {
        UGameplayStatics::SetSubtitlesEnabled(bEnabled);
    }

    void UGameplayStatics_SetSoundMixClassOverride(const UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren)
    {
        UGameplayStatics::SetSoundMixClassOverride(WorldContextObject, InSoundMixModifier, InSoundClass, Volume, Pitch, FadeInTime, bApplyToChildren);
    }

    void UGameplayStatics_SetSoundClassDistanceScale(const UObject* WorldContextObject, USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec)
    {
        UGameplayStatics::SetSoundClassDistanceScale(WorldContextObject, SoundClass, DistanceAttenuationScale, TimeSec);
    }

    void UGameplayStatics_SetPlayerPlatformUserId(APlayerController* PlayerController, FPlatformUserId& UserId)
    {
        UGameplayStatics::SetPlayerPlatformUserId(PlayerController, UserId);
    }

    void UGameplayStatics_SetPlayerControllerID(APlayerController* Player, int32 ControllerId)
    {
        UGameplayStatics::SetPlayerControllerID(Player, ControllerId);
    }

    void UGameplayStatics_SetMaxAudioChannelsScaled(const UObject* WorldContextObject, float MaxChannelCountScale)
    {
        UGameplayStatics::SetMaxAudioChannelsScaled(WorldContextObject, MaxChannelCountScale);
    }

    void UGameplayStatics_SetGlobalTimeDilation(const UObject* WorldContextObject, float TimeDilation)
    {
        UGameplayStatics::SetGlobalTimeDilation(WorldContextObject, TimeDilation);
    }

    void UGameplayStatics_SetGlobalPitchModulation(const UObject* WorldContextObject, float PitchModulation, float TimeSec)
    {
        UGameplayStatics::SetGlobalPitchModulation(WorldContextObject, PitchModulation, TimeSec);
    }

    void UGameplayStatics_SetGlobalListenerFocusParameters(const UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale)
    {
        UGameplayStatics::SetGlobalListenerFocusParameters(WorldContextObject, FocusAzimuthScale, NonFocusAzimuthScale, FocusDistanceScale, NonFocusDistanceScale, FocusVolumeScale, NonFocusVolumeScale, FocusPriorityScale, NonFocusPriorityScale);
    }

    void UGameplayStatics_SetGamePaused(const UObject* WorldContextObject, bool bPaused, bool& __result)
    {
        __result = UGameplayStatics::SetGamePaused(WorldContextObject, bPaused);
    }

    void UGameplayStatics_SetForceDisableSplitscreen(const UObject* WorldContextObject, bool bDisable)
    {
        UGameplayStatics::SetForceDisableSplitscreen(WorldContextObject, bDisable);
    }

    void UGameplayStatics_SetEnableWorldRendering(const UObject* WorldContextObject, bool bEnable)
    {
        UGameplayStatics::SetEnableWorldRendering(WorldContextObject, bEnable);
    }

    void UGameplayStatics_SetBaseSoundMix(const UObject* WorldContextObject, USoundMix* InSoundMix)
    {
        UGameplayStatics::SetBaseSoundMix(WorldContextObject, InSoundMix);
    }

    void UGameplayStatics_SetActiveSpatialPluginByName(const UObject* WorldContextObject, FName& InPluginName, bool& __result)
    {
        __result = UGameplayStatics::SetActiveSpatialPluginByName(WorldContextObject, InPluginName);
    }

    void UGameplayStatics_SaveGameToSlot(USaveGame* SaveGameObject, const char* SlotName, const int32 UserIndex, bool& __result)
    {
        __result = UGameplayStatics::SaveGameToSlot(SaveGameObject, US_STRING_TO_TCHAR(SlotName), UserIndex);
    }

    void UGameplayStatics_RemovePlayer(APlayerController* Player, bool bDestroyPawn)
    {
        UGameplayStatics::RemovePlayer(Player, bDestroyPawn);
    }

    void UGameplayStatics_RebaseZeroOriginOntoLocal(UObject* WorldContextObject, FVector& WorldLocation, FVector& __result)
    {
        __result = UGameplayStatics::RebaseZeroOriginOntoLocal(WorldContextObject, WorldLocation);
    }

    void UGameplayStatics_RebaseLocalOriginOntoZero(UObject* WorldContextObject, FVector& WorldLocation, FVector& __result)
    {
        __result = UGameplayStatics::RebaseLocalOriginOntoZero(WorldContextObject, WorldLocation);
    }

    void UGameplayStatics_PushSoundMixModifier(const UObject* WorldContextObject, USoundMix* InSoundMixModifier)
    {
        UGameplayStatics::PushSoundMixModifier(WorldContextObject, InSoundMixModifier);
    }

    void UGameplayStatics_PrimeSound(USoundBase* InSound)
    {
        UGameplayStatics::PrimeSound(InSound);
    }

    void UGameplayStatics_PrimeAllSoundsInSoundClass(USoundClass* InSoundClass)
    {
        UGameplayStatics::PrimeAllSoundsInSoundClass(InSoundClass);
    }

    void UGameplayStatics_PopSoundMixModifier(const UObject* WorldContextObject, USoundMix* InSoundMixModifier)
    {
        UGameplayStatics::PopSoundMixModifier(WorldContextObject, InSoundMixModifier);
    }

    void UGameplayStatics_PlayWorldCameraShake(const UObject* WorldContextObject, TSubclassOf<UCameraShakeBase>& Shake, FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter)
    {
        UGameplayStatics::PlayWorldCameraShake(WorldContextObject, Shake, Epicenter, InnerRadius, OuterRadius, Falloff, bOrientShakeTowardsEpicenter);
    }

    void UGameplayStatics_PlaySoundAtLocation(const UObject* WorldContextObject, USoundBase* Sound, FVector& Location, FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, const AActor* OwningActor, const UInitialActiveSoundParams* InitialParams)
    {
        UGameplayStatics::PlaySoundAtLocation(WorldContextObject, Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, OwningActor, InitialParams);
    }

    void UGameplayStatics_PlaySound2D(const UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, const AActor* OwningActor, bool bIsUISound)
    {
        UGameplayStatics::PlaySound2D(WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, OwningActor, bIsUISound);
    }

    void UGameplayStatics_OpenLevel(const UObject* WorldContextObject, FName& LevelName, bool bAbsolute, const char* Options)
    {
        UGameplayStatics::OpenLevel(WorldContextObject, LevelName, bAbsolute, US_STRING_TO_TCHAR(Options));
    }

    void UGameplayStatics_ObjectIsA(const UObject* Object, TSubclassOf<UObject>& ObjectClass, bool& __result)
    {
        __result = UGameplayStatics::ObjectIsA(Object, ObjectClass);
    }

    void UGameplayStatics_LoadGameFromSlot(const char* SlotName, const int32 UserIndex, USaveGame*& __result)
    {
        __result = UGameplayStatics::LoadGameFromSlot(US_STRING_TO_TCHAR(SlotName), UserIndex);
    }

    void UGameplayStatics_IsSplitscreenForceDisabled(const UObject* WorldContextObject, bool& __result)
    {
        __result = UGameplayStatics::IsSplitscreenForceDisabled(WorldContextObject);
    }

    void UGameplayStatics_IsGamePaused(const UObject* WorldContextObject, bool& __result)
    {
        __result = UGameplayStatics::IsGamePaused(WorldContextObject);
    }

    void UGameplayStatics_IsAnyLocalPlayerCameraWithinRange(const UObject* WorldContextObject, const FVector& Location, float MaximumRange, bool& __result)
    {
        __result = UGameplayStatics::IsAnyLocalPlayerCameraWithinRange(WorldContextObject, Location, MaximumRange);
    }

    void UGameplayStatics_HasOption(const char* Options, const char* InKey, bool& __result)
    {
        __result = UGameplayStatics::HasOption(US_STRING_TO_TCHAR(Options), US_STRING_TO_TCHAR(InKey));
    }

    void UGameplayStatics_HasLaunchOption(const char* OptionToCheck, bool& __result)
    {
        __result = UGameplayStatics::HasLaunchOption(US_STRING_TO_TCHAR(OptionToCheck));
    }

    void UGameplayStatics_GrassOverlappingSphereCount(const UObject* WorldContextObject, const UStaticMesh* StaticMesh, FVector& CenterPosition, float Radius, int32& __result)
    {
        __result = UGameplayStatics::GrassOverlappingSphereCount(WorldContextObject, StaticMesh, CenterPosition, Radius);
    }

    void UGameplayStatics_GetWorldDeltaSeconds(const UObject* WorldContextObject, double& __result)
    {
        __result = UGameplayStatics::GetWorldDeltaSeconds(WorldContextObject);
    }

    void UGameplayStatics_GetViewportMouseCaptureMode(const UObject* WorldContextObject, EMouseCaptureMode& __result)
    {
        __result = UGameplayStatics::GetViewportMouseCaptureMode(WorldContextObject);
    }

    void UGameplayStatics_GetUnpausedTimeSeconds(const UObject* WorldContextObject, double& __result)
    {
        __result = UGameplayStatics::GetUnpausedTimeSeconds(WorldContextObject);
    }

    void UGameplayStatics_GetTimeSeconds(const UObject* WorldContextObject, double& __result)
    {
        __result = UGameplayStatics::GetTimeSeconds(WorldContextObject);
    }

    void UGameplayStatics_GetStreamingLevel(const UObject* WorldContextObject, FName& PackageName, ULevelStreaming*& __result)
    {
        __result = UGameplayStatics::GetStreamingLevel(WorldContextObject, PackageName);
    }

    void UGameplayStatics_GetRealTimeSeconds(const UObject* WorldContextObject, double& __result)
    {
        __result = UGameplayStatics::GetRealTimeSeconds(WorldContextObject);
    }

    void UGameplayStatics_GetPlayerState(const UObject* WorldContextObject, int32 PlayerStateIndex, APlayerState*& __result)
    {
        __result = UGameplayStatics::GetPlayerState(WorldContextObject, PlayerStateIndex);
    }

    void UGameplayStatics_GetPlayerPawn(const UObject* WorldContextObject, int32 PlayerIndex, APawn*& __result)
    {
        __result = UGameplayStatics::GetPlayerPawn(WorldContextObject, PlayerIndex);
    }

    void UGameplayStatics_GetPlayerControllerID(APlayerController* Player, int32& __result)
    {
        __result = UGameplayStatics::GetPlayerControllerID(Player);
    }

    void UGameplayStatics_GetPlayerControllerFromPlatformUser(const UObject* WorldContextObject, FPlatformUserId& UserId, APlayerController*& __result)
    {
        __result = UGameplayStatics::GetPlayerControllerFromPlatformUser(WorldContextObject, UserId);
    }

    void UGameplayStatics_GetPlayerControllerFromID(const UObject* WorldContextObject, int32 ControllerID, APlayerController*& __result)
    {
        __result = UGameplayStatics::GetPlayerControllerFromID(WorldContextObject, ControllerID);
    }

    void UGameplayStatics_GetPlayerController(const UObject* WorldContextObject, int32 PlayerIndex, APlayerController*& __result)
    {
        __result = UGameplayStatics::GetPlayerController(WorldContextObject, PlayerIndex);
    }

    void UGameplayStatics_GetPlayerCharacter(const UObject* WorldContextObject, int32 PlayerIndex, ACharacter*& __result)
    {
        __result = UGameplayStatics::GetPlayerCharacter(WorldContextObject, PlayerIndex);
    }

    void UGameplayStatics_GetPlayerCameraManager(const UObject* WorldContextObject, int32 PlayerIndex, APlayerCameraManager*& __result)
    {
        __result = UGameplayStatics::GetPlayerCameraManager(WorldContextObject, PlayerIndex);
    }

    void UGameplayStatics_GetObjectClass(const UObject* Object, UClass*& __result)
    {
        __result = UGameplayStatics::GetObjectClass(Object);
    }

    void UGameplayStatics_GetNumPlayerStates(const UObject* WorldContextObject, int32& __result)
    {
        __result = UGameplayStatics::GetNumPlayerStates(WorldContextObject);
    }

    void UGameplayStatics_GetNumPlayerControllers(const UObject* WorldContextObject, int32& __result)
    {
        __result = UGameplayStatics::GetNumPlayerControllers(WorldContextObject);
    }

    void UGameplayStatics_GetNumLocalPlayerControllers(const UObject* WorldContextObject, int32& __result)
    {
        __result = UGameplayStatics::GetNumLocalPlayerControllers(WorldContextObject);
    }

    void UGameplayStatics_GetMaxAudioChannelCount(const UObject* WorldContextObject, int32& __result)
    {
        __result = UGameplayStatics::GetMaxAudioChannelCount(WorldContextObject);
    }

    void UGameplayStatics_GetIntOption(const char* Options, const char* Key, int32 DefaultValue, int32& __result)
    {
        __result = UGameplayStatics::GetIntOption(US_STRING_TO_TCHAR(Options), US_STRING_TO_TCHAR(Key), DefaultValue);
    }

    void UGameplayStatics_GetGlobalTimeDilation(const UObject* WorldContextObject, float& __result)
    {
        __result = UGameplayStatics::GetGlobalTimeDilation(WorldContextObject);
    }

    void UGameplayStatics_GetGameState(const UObject* WorldContextObject, AGameStateBase*& __result)
    {
        __result = UGameplayStatics::GetGameState(WorldContextObject);
    }

    void UGameplayStatics_GetGameMode(const UObject* WorldContextObject, AGameModeBase*& __result)
    {
        __result = UGameplayStatics::GetGameMode(WorldContextObject);
    }

    void UGameplayStatics_GetGameInstance(const UObject* WorldContextObject, UGameInstance*& __result)
    {
        __result = UGameplayStatics::GetGameInstance(WorldContextObject);
    }

    void UGameplayStatics_GetEnableWorldRendering(const UObject* WorldContextObject, bool& __result)
    {
        __result = UGameplayStatics::GetEnableWorldRendering(WorldContextObject);
    }

    void UGameplayStatics_GetCurrentReverbEffect(const UObject* WorldContextObject, UReverbEffect*& __result)
    {
        __result = UGameplayStatics::GetCurrentReverbEffect(WorldContextObject);
    }

    void UGameplayStatics_GetClosestListenerLocation(const UObject* WorldContextObject, const FVector& Location, float MaximumRange, const bool bAllowAttenuationOverride, FVector& ListenerPosition, bool& __result)
    {
        __result = UGameplayStatics::GetClosestListenerLocation(WorldContextObject, Location, MaximumRange, bAllowAttenuationOverride, ListenerPosition);
    }

    void UGameplayStatics_GetAudioTimeSeconds(const UObject* WorldContextObject, double& __result)
    {
        __result = UGameplayStatics::GetAudioTimeSeconds(WorldContextObject);
    }

    void UGameplayStatics_GetActorOfClass(const UObject* WorldContextObject, TSubclassOf<AActor>& ActorClass, AActor*& __result)
    {
        __result = UGameplayStatics::GetActorOfClass(WorldContextObject, ActorClass);
    }

    void UGameplayStatics_GetActiveSpatialPluginName(const UObject* WorldContextObject, FName& __result)
    {
        __result = UGameplayStatics::GetActiveSpatialPluginName(WorldContextObject);
    }

    void UGameplayStatics_GetAccurateRealTime(int32& Seconds, double& PartialSeconds)
    {
        UGameplayStatics::GetAccurateRealTime(Seconds, PartialSeconds);
    }

    void UGameplayStatics_FlushLevelStreaming(const UObject* WorldContextObject)
    {
        UGameplayStatics::FlushLevelStreaming(WorldContextObject);
    }

    void UGameplayStatics_EnableLiveStreaming(bool Enable)
    {
        UGameplayStatics::EnableLiveStreaming(Enable);
    }

    void UGameplayStatics_DoesSaveGameExist(const char* SlotName, const int32 UserIndex, bool& __result)
    {
        __result = UGameplayStatics::DoesSaveGameExist(US_STRING_TO_TCHAR(SlotName), UserIndex);
    }

    void UGameplayStatics_DeleteGameInSlot(const char* SlotName, const int32 UserIndex, bool& __result)
    {
        __result = UGameplayStatics::DeleteGameInSlot(US_STRING_TO_TCHAR(SlotName), UserIndex);
    }

    void UGameplayStatics_DeactivateReverbEffect(const UObject* WorldContextObject, FName& TagName)
    {
        UGameplayStatics::DeactivateReverbEffect(WorldContextObject, TagName);
    }

    void UGameplayStatics_CreateSound2D(const UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, UAudioComponent*& __result)
    {
        __result = UGameplayStatics::CreateSound2D(WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy);
    }

    void UGameplayStatics_CreateSaveGameObject(TSubclassOf<USaveGame>& SaveGameClass, USaveGame*& __result)
    {
        __result = UGameplayStatics::CreateSaveGameObject(SaveGameClass);
    }

    void UGameplayStatics_CreatePlayerFromPlatformUser(const UObject* WorldContextObject, FPlatformUserId& UserId, bool bSpawnPlayerController, APlayerController*& __result)
    {
        __result = UGameplayStatics::CreatePlayerFromPlatformUser(WorldContextObject, UserId, bSpawnPlayerController);
    }

    void UGameplayStatics_CreatePlayer(const UObject* WorldContextObject, int32 ControllerId, bool bSpawnPlayerController, APlayerController*& __result)
    {
        __result = UGameplayStatics::CreatePlayer(WorldContextObject, ControllerId, bSpawnPlayerController);
    }

    void UGameplayStatics_ClearSoundMixModifiers(const UObject* WorldContextObject)
    {
        UGameplayStatics::ClearSoundMixModifiers(WorldContextObject);
    }

    void UGameplayStatics_ClearSoundMixClassOverride(const UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float FadeOutTime)
    {
        UGameplayStatics::ClearSoundMixClassOverride(WorldContextObject, InSoundMixModifier, InSoundClass, FadeOutTime);
    }

    void UGameplayStatics_CancelAsyncLoading()
    {
        UGameplayStatics::CancelAsyncLoading();
    }

    void UGameplayStatics_AreSubtitlesEnabled(bool& __result)
    {
        __result = UGameplayStatics::AreSubtitlesEnabled();
    }

    void UGameplayStatics_AreAnyListenersWithinRange(const UObject* WorldContextObject, const FVector& Location, float MaximumRange, bool& __result)
    {
        __result = UGameplayStatics::AreAnyListenersWithinRange(WorldContextObject, Location, MaximumRange);
    }

    void UGameplayStatics_ApplyDamage(AActor* DamagedActor, float BaseDamage, AController* EventInstigator, AActor* DamageCauser, TSubclassOf<UDamageType>& DamageTypeClass, float& __result)
    {
        __result = UGameplayStatics::ApplyDamage(DamagedActor, BaseDamage, EventInstigator, DamageCauser, DamageTypeClass);
    }

    void UGameplayStatics_AnnounceAccessibleString(const char* AnnouncementString)
    {
        UGameplayStatics::AnnounceAccessibleString(US_STRING_TO_TCHAR(AnnouncementString));
    }

    void UGameplayStatics_ActivateReverbEffect(const UObject* WorldContextObject, UReverbEffect* ReverbEffect, FName& TagName, float Priority, float Volume, float FadeTime)
    {
        UGameplayStatics::ActivateReverbEffect(WorldContextObject, ReverbEffect, TagName, Priority, Volume, FadeTime);
    }

    void UGameUserSettings_ValidateSettings(UGameUserSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->ValidateSettings();
    }

    void UGameUserSettings_SupportsHDRDisplayOutput(UGameUserSettings* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->SupportsHDRDisplayOutput();
    }

    void UGameUserSettings_SetVSyncEnabled(UGameUserSettings* __this, bool bEnable)
    {
        checkSlow(__this != nullptr);
        __this->SetVSyncEnabled(bEnable);
    }

    void UGameUserSettings_SetVisualEffectQuality(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetVisualEffectQuality(Value);
    }

    void UGameUserSettings_SetViewDistanceQuality(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetViewDistanceQuality(Value);
    }

    void UGameUserSettings_SetToDefaults(UGameUserSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->SetToDefaults();
    }

    void UGameUserSettings_SetTextureQuality(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetTextureQuality(Value);
    }

    void UGameUserSettings_SetShadowQuality(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetShadowQuality(Value);
    }

    void UGameUserSettings_SetShadingQuality(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetShadingQuality(Value);
    }

    void UGameUserSettings_SetResolutionScaleValueEx(UGameUserSettings* __this, float NewScaleValue)
    {
        checkSlow(__this != nullptr);
        __this->SetResolutionScaleValueEx(NewScaleValue);
    }

    void UGameUserSettings_SetResolutionScaleNormalized(UGameUserSettings* __this, float NewScaleNormalized)
    {
        checkSlow(__this != nullptr);
        __this->SetResolutionScaleNormalized(NewScaleNormalized);
    }

    void UGameUserSettings_SetReflectionQuality(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetReflectionQuality(Value);
    }

    void UGameUserSettings_SetPostProcessingQuality(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetPostProcessingQuality(Value);
    }

    void UGameUserSettings_SetOverallScalabilityLevel(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetOverallScalabilityLevel(Value);
    }

    void UGameUserSettings_SetGlobalIlluminationQuality(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetGlobalIlluminationQuality(Value);
    }

    void UGameUserSettings_SetFullscreenMode(UGameUserSettings* __this, TEnumAsByte<EWindowMode::Type> InFullscreenMode)
    {
        checkSlow(__this != nullptr);
        __this->SetFullscreenMode(InFullscreenMode);
    }

    void UGameUserSettings_SetFrameRateLimit(UGameUserSettings* __this, float NewLimit)
    {
        checkSlow(__this != nullptr);
        __this->SetFrameRateLimit(NewLimit);
    }

    void UGameUserSettings_SetFoliageQuality(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetFoliageQuality(Value);
    }

    void UGameUserSettings_SetDynamicResolutionEnabled(UGameUserSettings* __this, bool bEnable)
    {
        checkSlow(__this != nullptr);
        __this->SetDynamicResolutionEnabled(bEnable);
    }

    void UGameUserSettings_SetBenchmarkFallbackValues(UGameUserSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->SetBenchmarkFallbackValues();
    }

    void UGameUserSettings_SetAudioQualityLevel(UGameUserSettings* __this, int32 QualityLevel)
    {
        checkSlow(__this != nullptr);
        __this->SetAudioQualityLevel(QualityLevel);
    }

    void UGameUserSettings_SetAntiAliasingQuality(UGameUserSettings* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetAntiAliasingQuality(Value);
    }

    void UGameUserSettings_SaveSettings(UGameUserSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->SaveSettings();
    }

    void UGameUserSettings_RunHardwareBenchmark(UGameUserSettings* __this, int32 WorkScale, float CPUMultiplier, float GPUMultiplier)
    {
        checkSlow(__this != nullptr);
        __this->RunHardwareBenchmark(WorkScale, CPUMultiplier, GPUMultiplier);
    }

    void UGameUserSettings_RevertVideoMode(UGameUserSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->RevertVideoMode();
    }

    void UGameUserSettings_ResetToCurrentSettings(UGameUserSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetToCurrentSettings();
    }

    void UGameUserSettings_LoadSettings(UGameUserSettings* __this, bool bForceReload)
    {
        checkSlow(__this != nullptr);
        __this->LoadSettings(bForceReload);
    }

    void UGameUserSettings_IsVSyncEnabled(UGameUserSettings* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsVSyncEnabled();
    }

    void UGameUserSettings_IsVSyncDirty(UGameUserSettings* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsVSyncDirty();
    }

    void UGameUserSettings_IsScreenResolutionDirty(UGameUserSettings* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsScreenResolutionDirty();
    }

    void UGameUserSettings_IsHDREnabled(UGameUserSettings* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsHDREnabled();
    }

    void UGameUserSettings_IsFullscreenModeDirty(UGameUserSettings* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsFullscreenModeDirty();
    }

    void UGameUserSettings_IsDynamicResolutionEnabled(UGameUserSettings* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsDynamicResolutionEnabled();
    }

    void UGameUserSettings_IsDynamicResolutionDirty(UGameUserSettings* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsDynamicResolutionDirty();
    }

    void UGameUserSettings_IsDirty(UGameUserSettings* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsDirty();
    }

    void UGameUserSettings_GetVisualEffectQuality(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetVisualEffectQuality();
    }

    void UGameUserSettings_GetViewDistanceQuality(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetViewDistanceQuality();
    }

    void UGameUserSettings_GetTextureQuality(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTextureQuality();
    }

    void UGameUserSettings_GetSyncInterval(int32& __result)
    {
        __result = UGameUserSettings::GetSyncInterval();
    }

    void UGameUserSettings_GetShadowQuality(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetShadowQuality();
    }

    void UGameUserSettings_GetShadingQuality(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetShadingQuality();
    }

    void UGameUserSettings_GetResolutionScaleNormalized(UGameUserSettings* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetResolutionScaleNormalized();
    }

    void UGameUserSettings_GetResolutionScaleInformationEx(UGameUserSettings* __this, float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue)
    {
        checkSlow(__this != nullptr);
        __this->GetResolutionScaleInformationEx(CurrentScaleNormalized, CurrentScaleValue, MinScaleValue, MaxScaleValue);
    }

    void UGameUserSettings_GetReflectionQuality(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetReflectionQuality();
    }

    void UGameUserSettings_GetRecommendedResolutionScale(UGameUserSettings* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRecommendedResolutionScale();
    }

    void UGameUserSettings_GetPreferredFullscreenMode(UGameUserSettings* __this, TEnumAsByte<EWindowMode::Type>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPreferredFullscreenMode();
    }

    void UGameUserSettings_GetPostProcessingQuality(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPostProcessingQuality();
    }

    void UGameUserSettings_GetOverallScalabilityLevel(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOverallScalabilityLevel();
    }

    void UGameUserSettings_GetLastConfirmedFullscreenMode(UGameUserSettings* __this, TEnumAsByte<EWindowMode::Type>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLastConfirmedFullscreenMode();
    }

    void UGameUserSettings_GetGlobalIlluminationQuality(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetGlobalIlluminationQuality();
    }

    void UGameUserSettings_GetGameUserSettings(UGameUserSettings*& __result)
    {
        __result = UGameUserSettings::GetGameUserSettings();
    }

    void UGameUserSettings_GetFullscreenMode(UGameUserSettings* __this, TEnumAsByte<EWindowMode::Type>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFullscreenMode();
    }

    void UGameUserSettings_GetFrameRateLimit(UGameUserSettings* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFrameRateLimit();
    }

    void UGameUserSettings_GetFramePace(int32& __result)
    {
        __result = UGameUserSettings::GetFramePace();
    }

    void UGameUserSettings_GetFoliageQuality(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFoliageQuality();
    }

    void UGameUserSettings_GetDefaultWindowMode(TEnumAsByte<EWindowMode::Type>& __result)
    {
        __result = UGameUserSettings::GetDefaultWindowMode();
    }

    void UGameUserSettings_GetDefaultResolutionScale(UGameUserSettings* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDefaultResolutionScale();
    }

    void UGameUserSettings_GetCurrentHDRDisplayNits(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurrentHDRDisplayNits();
    }

    void UGameUserSettings_GetAudioQualityLevel(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAudioQualityLevel();
    }

    void UGameUserSettings_GetAntiAliasingQuality(UGameUserSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAntiAliasingQuality();
    }

    void UGameUserSettings_EnableHDRDisplayOutput(UGameUserSettings* __this, bool bEnable, int32 DisplayNits)
    {
        checkSlow(__this != nullptr);
        __this->EnableHDRDisplayOutput(bEnable, DisplayNits);
    }

    void UGameUserSettings_ConfirmVideoMode(UGameUserSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->ConfirmVideoMode();
    }

    void UGameUserSettings_ApplySettings(UGameUserSettings* __this, bool bCheckForCommandLineOverrides)
    {
        checkSlow(__this != nullptr);
        __this->ApplySettings(bCheckForCommandLineOverrides);
    }

    void UGameUserSettings_ApplyResolutionSettings(UGameUserSettings* __this, bool bCheckForCommandLineOverrides)
    {
        checkSlow(__this != nullptr);
        __this->ApplyResolutionSettings(bCheckForCommandLineOverrides);
    }

    void UGameUserSettings_ApplyNonResolutionSettings(UGameUserSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->ApplyNonResolutionSettings();
    }

    void UGameUserSettings_ApplyHardwareBenchmarkResults(UGameUserSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->ApplyHardwareBenchmarkResults();
    }

    void UGameViewportClient_SSSwapControllers(UGameViewportClient* __this)
    {
        checkSlow(__this != nullptr);
        __this->SSSwapControllers();
    }

    void UGameViewportClient_SetConsoleTarget(UGameViewportClient* __this, int32 PlayerIndex)
    {
        checkSlow(__this != nullptr);
        __this->SetConsoleTarget(PlayerIndex);
    }

    void UHealthSnapshotBlueprintLibrary_StopPerformanceSnapshots()
    {
        UHealthSnapshotBlueprintLibrary::StopPerformanceSnapshots();
    }

    void UHealthSnapshotBlueprintLibrary_StartPerformanceSnapshots()
    {
        UHealthSnapshotBlueprintLibrary::StartPerformanceSnapshots();
    }

    void UHealthSnapshotBlueprintLibrary_LogPerformanceSnapshot(const char* SnapshotTitle, bool bResetStats)
    {
        UHealthSnapshotBlueprintLibrary::LogPerformanceSnapshot(US_STRING_TO_TCHAR(SnapshotTitle), bResetStats);
    }

    void UHeterogeneousVolumeComponent_SetStreamingMipBias(UHeterogeneousVolumeComponent* __this, int32 NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetStreamingMipBias(NewValue);
    }

    void UHeterogeneousVolumeComponent_SetStartFrame(UHeterogeneousVolumeComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetStartFrame(NewValue);
    }

    void UHeterogeneousVolumeComponent_SetPlaying(UHeterogeneousVolumeComponent* __this, bool NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetPlaying(NewValue);
    }

    void UHeterogeneousVolumeComponent_SetLooping(UHeterogeneousVolumeComponent* __this, bool NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetLooping(NewValue);
    }

    void UHeterogeneousVolumeComponent_SetFrameRate(UHeterogeneousVolumeComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetFrameRate(NewValue);
    }

    void UHeterogeneousVolumeComponent_SetFrame(UHeterogeneousVolumeComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetFrame(NewValue);
    }

    void UHeterogeneousVolumeComponent_SetEndFrame(UHeterogeneousVolumeComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetEndFrame(NewValue);
    }

    void UHeterogeneousVolumeComponent_Play(UHeterogeneousVolumeComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->Play();
    }

    void UImportanceSamplingLibrary_RandomSobolFloat(int32 Index, int32 Dimension, float Seed, float& __result)
    {
        __result = UImportanceSamplingLibrary::RandomSobolFloat(Index, Dimension, Seed);
    }

    void UImportanceSamplingLibrary_RandomSobolCell3D(int32 Index, int32 NumCells, FVector& Cell, FVector& Seed, FVector& __result)
    {
        __result = UImportanceSamplingLibrary::RandomSobolCell3D(Index, NumCells, Cell, Seed);
    }

    void UImportanceSamplingLibrary_NextSobolFloat(int32 Index, int32 Dimension, float PreviousValue, float& __result)
    {
        __result = UImportanceSamplingLibrary::NextSobolFloat(Index, Dimension, PreviousValue);
    }

    void UImportanceSamplingLibrary_NextSobolCell3D(int32 Index, int32 NumCells, FVector& PreviousValue, FVector& __result)
    {
        __result = UImportanceSamplingLibrary::NextSobolCell3D(Index, NumCells, PreviousValue);
    }

    void UInputDeviceLibrary_PlatformUserId_None(FPlatformUserId& __result)
    {
        __result = UInputDeviceLibrary::PlatformUserId_None();
    }

    void UInputDeviceLibrary_NotEqual_PlatformUserId(FPlatformUserId& A, FPlatformUserId& B, bool& __result)
    {
        __result = UInputDeviceLibrary::NotEqual_PlatformUserId(A, B);
    }

    void UInputDeviceLibrary_IsValidPlatformId(FPlatformUserId& UserId, bool& __result)
    {
        __result = UInputDeviceLibrary::IsValidPlatformId(UserId);
    }

    void UInputDeviceLibrary_IsUnpairedUserId(const FPlatformUserId& PlatformId, bool& __result)
    {
        __result = UInputDeviceLibrary::IsUnpairedUserId(PlatformId);
    }

    void UInputDeviceLibrary_GetUserForUnpairedInputDevices(FPlatformUserId& __result)
    {
        __result = UInputDeviceLibrary::GetUserForUnpairedInputDevices();
    }

    void UInputDeviceLibrary_GetPrimaryPlatformUser(FPlatformUserId& __result)
    {
        __result = UInputDeviceLibrary::GetPrimaryPlatformUser();
    }

    void UInputDeviceLibrary_GetPlayerControllerFromPlatformUser(const FPlatformUserId& UserId, APlayerController*& __result)
    {
        __result = UInputDeviceLibrary::GetPlayerControllerFromPlatformUser(UserId);
    }

    void UInputDeviceLibrary_EqualEqual_PlatformUserId(FPlatformUserId& A, FPlatformUserId& B, bool& __result)
    {
        __result = UInputDeviceLibrary::EqualEqual_PlatformUserId(A, B);
    }

    void UInputDeviceSubsystem_RemoveAllDeviceProperties(UInputDeviceSubsystem* __this)
    {
        checkSlow(__this != nullptr);
        __this->RemoveAllDeviceProperties();
    }

    void UInputSettings_SaveKeyMappings(UInputSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->SaveKeyMappings();
    }

    void UInputSettings_GetInputSettings(UInputSettings*& __result)
    {
        __result = UInputSettings::GetInputSettings();
    }

    void UInputSettings_ForceRebuildKeymaps(UInputSettings* __this)
    {
        checkSlow(__this != nullptr);
        __this->ForceRebuildKeymaps();
    }

    void UInstancedStaticMeshComponent_SetNumCustomDataFloats(UInstancedStaticMeshComponent* __this, int32 InNumCustomDataFloats)
    {
        checkSlow(__this != nullptr);
        __this->SetNumCustomDataFloats(InNumCustomDataFloats);
    }

    void UInstancedStaticMeshComponent_SetLODDistanceScale(UInstancedStaticMeshComponent* __this, float InLODDistanceScale)
    {
        checkSlow(__this != nullptr);
        __this->SetLODDistanceScale(InLODDistanceScale);
    }

    void UInstancedStaticMeshComponent_SetCustomDataValue(UInstancedStaticMeshComponent* __this, int32 InstanceIndex, int32 CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->SetCustomDataValue(InstanceIndex, CustomDataIndex, CustomDataValue, bMarkRenderStateDirty);
    }

    void UInstancedStaticMeshComponent_SetCullDistances(UInstancedStaticMeshComponent* __this, int32 StartCullDistance, int32 EndCullDistance)
    {
        checkSlow(__this != nullptr);
        __this->SetCullDistances(StartCullDistance, EndCullDistance);
    }

    void UInstancedStaticMeshComponent_RemoveInstance(UInstancedStaticMeshComponent* __this, int32 InstanceIndex, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->RemoveInstance(InstanceIndex);
    }

    void UInstancedStaticMeshComponent_IsValidInstance(UInstancedStaticMeshComponent* __this, int32 InstanceIndex, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsValidInstance(InstanceIndex);
    }

    void UInstancedStaticMeshComponent_GetLODDistanceScale(UInstancedStaticMeshComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLODDistanceScale();
    }

    void UInstancedStaticMeshComponent_GetInstanceCount(UInstancedStaticMeshComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetInstanceCount();
    }

    void UInstancedStaticMeshComponent_GetCullDistances(UInstancedStaticMeshComponent* __this, int32& OutStartCullDistance, int32& OutEndCullDistance)
    {
        checkSlow(__this != nullptr);
        __this->GetCullDistances(OutStartCullDistance, OutEndCullDistance);
    }

    void UInstancedStaticMeshComponent_ClearInstances(UInstancedStaticMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearInstances();
    }

    void UInterpToMovementComponent_RestartMovement(UInterpToMovementComponent* __this, float InitialDirection)
    {
        checkSlow(__this != nullptr);
        __this->RestartMovement(InitialDirection);
    }

    void UInterpToMovementComponent_ResetControlPoints(UInterpToMovementComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetControlPoints();
    }

    void UInterpToMovementComponent_FinaliseControlPoints(UInterpToMovementComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->FinaliseControlPoints();
    }

    void UInterpToMovementComponent_AddControlPointPosition(UInterpToMovementComponent* __this, FVector& Pos, bool bPositionIsRelative)
    {
        checkSlow(__this != nullptr);
        __this->AddControlPointPosition(Pos, bPositionIsRelative);
    }

    void UKismetGuidLibrary_Parse_StringToGuid(const char* GuidString, FGuid& OutGuid, bool& Success)
    {
        UKismetGuidLibrary::Parse_StringToGuid(US_STRING_TO_TCHAR(GuidString), OutGuid, Success);
    }

    void UKismetGuidLibrary_NotEqual_GuidGuid(const FGuid& A, const FGuid& B, bool& __result)
    {
        __result = UKismetGuidLibrary::NotEqual_GuidGuid(A, B);
    }

    void UKismetGuidLibrary_NewGuid(FGuid& __result)
    {
        __result = UKismetGuidLibrary::NewGuid();
    }

    void UKismetGuidLibrary_IsValid_Guid(const FGuid& InGuid, bool& __result)
    {
        __result = UKismetGuidLibrary::IsValid_Guid(InGuid);
    }

    void UKismetGuidLibrary_Invalidate_Guid(FGuid& InGuid)
    {
        UKismetGuidLibrary::Invalidate_Guid(InGuid);
    }

    void UKismetGuidLibrary_EqualEqual_GuidGuid(const FGuid& A, const FGuid& B, bool& __result)
    {
        __result = UKismetGuidLibrary::EqualEqual_GuidGuid(A, B);
    }

    void UKismetInputLibrary_CalibrateTilt()
    {
        UKismetInputLibrary::CalibrateTilt();
    }

    void UKismetInternationalizationLibrary_SetCurrentLocale(const char* Culture, const bool SaveToConfig, bool& __result)
    {
        __result = UKismetInternationalizationLibrary::SetCurrentLocale(US_STRING_TO_TCHAR(Culture), SaveToConfig);
    }

    void UKismetInternationalizationLibrary_SetCurrentLanguageAndLocale(const char* Culture, const bool SaveToConfig, bool& __result)
    {
        __result = UKismetInternationalizationLibrary::SetCurrentLanguageAndLocale(US_STRING_TO_TCHAR(Culture), SaveToConfig);
    }

    void UKismetInternationalizationLibrary_SetCurrentLanguage(const char* Culture, const bool SaveToConfig, bool& __result)
    {
        __result = UKismetInternationalizationLibrary::SetCurrentLanguage(US_STRING_TO_TCHAR(Culture), SaveToConfig);
    }

    void UKismetInternationalizationLibrary_SetCurrentCulture(const char* Culture, const bool SaveToConfig, bool& __result)
    {
        __result = UKismetInternationalizationLibrary::SetCurrentCulture(US_STRING_TO_TCHAR(Culture), SaveToConfig);
    }

    void UKismetInternationalizationLibrary_SetCurrentAssetGroupCulture(const FName& AssetGroup, const char* Culture, const bool SaveToConfig, bool& __result)
    {
        __result = UKismetInternationalizationLibrary::SetCurrentAssetGroupCulture(AssetGroup, US_STRING_TO_TCHAR(Culture), SaveToConfig);
    }

    void UKismetInternationalizationLibrary_ClearCurrentAssetGroupCulture(const FName& AssetGroup, const bool SaveToConfig)
    {
        UKismetInternationalizationLibrary::ClearCurrentAssetGroupCulture(AssetGroup, SaveToConfig);
    }

    void UKismetMaterialLibrary_SetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName& ParameterName, const FLinearColor& ParameterValue)
    {
        UKismetMaterialLibrary::SetVectorParameterValue(WorldContextObject, Collection, ParameterName, ParameterValue);
    }

    void UKismetMaterialLibrary_SetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName& ParameterName, float ParameterValue)
    {
        UKismetMaterialLibrary::SetScalarParameterValue(WorldContextObject, Collection, ParameterName, ParameterValue);
    }

    void UKismetMaterialLibrary_GetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName& ParameterName, FLinearColor& __result)
    {
        __result = UKismetMaterialLibrary::GetVectorParameterValue(WorldContextObject, Collection, ParameterName);
    }

    void UKismetMaterialLibrary_GetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName& ParameterName, float& __result)
    {
        __result = UKismetMaterialLibrary::GetScalarParameterValue(WorldContextObject, Collection, ParameterName);
    }

    void UKismetMaterialLibrary_CreateDynamicMaterialInstance(UObject* WorldContextObject, UMaterialInterface* Parent, FName& OptionalName, EMIDCreationFlags CreationFlags, UMaterialInstanceDynamic*& __result)
    {
        __result = UKismetMaterialLibrary::CreateDynamicMaterialInstance(WorldContextObject, Parent, OptionalName, CreationFlags);
    }

    void UKismetMathLibrary_Xor_IntInt(int32 A, int32 B, int32& __result)
    {
        __result = UKismetMathLibrary::Xor_IntInt(A, B);
    }

    void UKismetMathLibrary_Xor_Int64Int64(int64 A, int64 B, int64& __result)
    {
        __result = UKismetMathLibrary::Xor_Int64Int64(A, B);
    }

    void UKismetMathLibrary_Wrap(int32 Value, int32 Min, int32 Max, int32& __result)
    {
        __result = UKismetMathLibrary::Wrap(Value, Min, Max);
    }

    void UKismetMathLibrary_WeightedMovingAverage_FVector(FVector& CurrentSample, FVector& PreviousSample, float Weight, FVector& __result)
    {
        __result = UKismetMathLibrary::WeightedMovingAverage_FVector(CurrentSample, PreviousSample, Weight);
    }

    void UKismetMathLibrary_WeightedMovingAverage_FRotator(FRotator& CurrentSample, FRotator& PreviousSample, float Weight, FRotator& __result)
    {
        __result = UKismetMathLibrary::WeightedMovingAverage_FRotator(CurrentSample, PreviousSample, Weight);
    }

    void UKismetMathLibrary_WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight, float& __result)
    {
        __result = UKismetMathLibrary::WeightedMovingAverage_Float(CurrentSample, PreviousSample, Weight);
    }

    void UKismetMathLibrary_VSizeXYSquared(FVector& A, double& __result)
    {
        __result = UKismetMathLibrary::VSizeXYSquared(A);
    }

    void UKismetMathLibrary_VSizeXY(FVector& A, double& __result)
    {
        __result = UKismetMathLibrary::VSizeXY(A);
    }

    void UKismetMathLibrary_VSizeSquared(FVector& A, double& __result)
    {
        __result = UKismetMathLibrary::VSizeSquared(A);
    }

    void UKismetMathLibrary_VSize(FVector& A, double& __result)
    {
        __result = UKismetMathLibrary::VSize(A);
    }

    void UKismetMathLibrary_VLerp(FVector& A, FVector& B, float Alpha, FVector& __result)
    {
        __result = UKismetMathLibrary::VLerp(A, B, Alpha);
    }

    void UKismetMathLibrary_VInterpTo_Constant(FVector& Current, FVector& Target, float DeltaTime, float InterpSpeed, FVector& __result)
    {
        __result = UKismetMathLibrary::VInterpTo_Constant(Current, Target, DeltaTime, InterpSpeed);
    }

    void UKismetMathLibrary_VInterpTo(FVector& Current, FVector& Target, float DeltaTime, float InterpSpeed, FVector& __result)
    {
        __result = UKismetMathLibrary::VInterpTo(Current, Target, DeltaTime, InterpSpeed);
    }

    void UKismetMathLibrary_Vector_Zero(FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_Zero();
    }

    void UKismetMathLibrary_Vector_Up(FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_Up();
    }

    void UKismetMathLibrary_Vector_UnwindEuler(FVector& A)
    {
        UKismetMathLibrary::Vector_UnwindEuler(A);
    }

    void UKismetMathLibrary_Vector_ToRadians(FVector& A, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_ToRadians(A);
    }

    void UKismetMathLibrary_Vector_ToDegrees(FVector& A, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_ToDegrees(A);
    }

    void UKismetMathLibrary_Vector_SnappedToGrid(FVector& InVect, float InGridSize, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_SnappedToGrid(InVect, InGridSize);
    }

    void UKismetMathLibrary_Vector_SlerpVectorToDirection(FVector& Vector, FVector& Direction, double Alpha, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_SlerpVectorToDirection(Vector, Direction, Alpha);
    }

    void UKismetMathLibrary_Vector_SlerpNormals(FVector& NormalA, FVector& NormalB, double Alpha, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_SlerpNormals(NormalA, NormalB, Alpha);
    }

    void UKismetMathLibrary_Vector_Set(FVector& A, double X, double Y, double Z)
    {
        UKismetMathLibrary::Vector_Set(A, X, Y, Z);
    }

    void UKismetMathLibrary_Vector_Right(FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_Right();
    }

    void UKismetMathLibrary_Vector_Reciprocal(const FVector& A, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_Reciprocal(A);
    }

    void UKismetMathLibrary_Vector_ProjectOnToNormal(FVector& V, FVector& InNormal, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_ProjectOnToNormal(V, InNormal);
    }

    void UKismetMathLibrary_Vector_One(FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_One();
    }

    void UKismetMathLibrary_Vector_NormalUnsafe(const FVector& A, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_NormalUnsafe(A);
    }

    void UKismetMathLibrary_Vector_Normalize(FVector& A, float Tolerance)
    {
        UKismetMathLibrary::Vector_Normalize(A, Tolerance);
    }

    void UKismetMathLibrary_Vector_Normal2D(FVector& A, float Tolerance, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_Normal2D(A, Tolerance);
    }

    void UKismetMathLibrary_Vector_Left(FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_Left();
    }

    void UKismetMathLibrary_Vector_IsZero(const FVector& A, bool& __result)
    {
        __result = UKismetMathLibrary::Vector_IsZero(A);
    }

    void UKismetMathLibrary_Vector_IsUnit(const FVector& A, float SquaredLenthTolerance, bool& __result)
    {
        __result = UKismetMathLibrary::Vector_IsUnit(A, SquaredLenthTolerance);
    }

    void UKismetMathLibrary_Vector_IsUniform(const FVector& A, float Tolerance, bool& __result)
    {
        __result = UKismetMathLibrary::Vector_IsUniform(A, Tolerance);
    }

    void UKismetMathLibrary_Vector_IsNormal(const FVector& A, bool& __result)
    {
        __result = UKismetMathLibrary::Vector_IsNormal(A);
    }

    void UKismetMathLibrary_Vector_IsNearlyZero(const FVector& A, float Tolerance, bool& __result)
    {
        __result = UKismetMathLibrary::Vector_IsNearlyZero(A, Tolerance);
    }

    void UKismetMathLibrary_Vector_IsNAN(const FVector& A, bool& __result)
    {
        __result = UKismetMathLibrary::Vector_IsNAN(A);
    }

    void UKismetMathLibrary_Vector_HeadingAngle(FVector& A, double& __result)
    {
        __result = UKismetMathLibrary::Vector_HeadingAngle(A);
    }

    void UKismetMathLibrary_Vector_GetSignVector(FVector& A, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_GetSignVector(A);
    }

    void UKismetMathLibrary_Vector_GetProjection(FVector& A, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_GetProjection(A);
    }

    void UKismetMathLibrary_Vector_GetAbsMin(FVector& A, double& __result)
    {
        __result = UKismetMathLibrary::Vector_GetAbsMin(A);
    }

    void UKismetMathLibrary_Vector_GetAbsMax(FVector& A, double& __result)
    {
        __result = UKismetMathLibrary::Vector_GetAbsMax(A);
    }

    void UKismetMathLibrary_Vector_GetAbs(FVector& A, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_GetAbs(A);
    }

    void UKismetMathLibrary_Vector_Forward(FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_Forward();
    }

    void UKismetMathLibrary_Vector_Down(FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_Down();
    }

    void UKismetMathLibrary_Vector_DistanceSquared(FVector& V1, FVector& V2, double& __result)
    {
        __result = UKismetMathLibrary::Vector_DistanceSquared(V1, V2);
    }

    void UKismetMathLibrary_Vector_Distance2DSquared(FVector& V1, FVector& V2, double& __result)
    {
        __result = UKismetMathLibrary::Vector_Distance2DSquared(V1, V2);
    }

    void UKismetMathLibrary_Vector_Distance2D(FVector& V1, FVector& V2, double& __result)
    {
        __result = UKismetMathLibrary::Vector_Distance2D(V1, V2);
    }

    void UKismetMathLibrary_Vector_Distance(FVector& V1, FVector& V2, double& __result)
    {
        __result = UKismetMathLibrary::Vector_Distance(V1, V2);
    }

    void UKismetMathLibrary_Vector_CosineAngle2D(FVector& A, FVector& B, double& __result)
    {
        __result = UKismetMathLibrary::Vector_CosineAngle2D(A, B);
    }

    void UKismetMathLibrary_Vector_ComponentMin(FVector& A, FVector& B, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_ComponentMin(A, B);
    }

    void UKismetMathLibrary_Vector_ComponentMax(FVector& A, FVector& B, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_ComponentMax(A, B);
    }

    void UKismetMathLibrary_Vector_ClampSizeMax2D(FVector& A, double Max, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_ClampSizeMax2D(A, Max);
    }

    void UKismetMathLibrary_Vector_ClampSizeMax(FVector& A, double Max, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_ClampSizeMax(A, Max);
    }

    void UKismetMathLibrary_Vector_ClampSize2D(FVector& A, double Min, double Max, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_ClampSize2D(A, Min, Max);
    }

    void UKismetMathLibrary_Vector_BoundedToCube(FVector& InVect, float InRadius, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_BoundedToCube(InVect, InRadius);
    }

    void UKismetMathLibrary_Vector_BoundedToBox(FVector& InVect, FVector& InBoxMin, FVector& InBoxMax, FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_BoundedToBox(InVect, InBoxMin, InBoxMax);
    }

    void UKismetMathLibrary_Vector_Backward(FVector& __result)
    {
        __result = UKismetMathLibrary::Vector_Backward();
    }

    void UKismetMathLibrary_Vector_Assign(FVector& A, const FVector& InVector)
    {
        UKismetMathLibrary::Vector_Assign(A, InVector);
    }

    void UKismetMathLibrary_Vector_AddBounded(FVector& A, FVector& InAddVect, float InRadius)
    {
        UKismetMathLibrary::Vector_AddBounded(A, InAddVect, InRadius);
    }

    void UKismetMathLibrary_Tan(double A, double& __result)
    {
        __result = UKismetMathLibrary::Tan(A);
    }

    void UKismetMathLibrary_Subtract_VectorVector(FVector& A, FVector& B, FVector& __result)
    {
        __result = UKismetMathLibrary::Subtract_VectorVector(A, B);
    }

    void UKismetMathLibrary_Subtract_VectorInt(FVector& A, int32 B, FVector& __result)
    {
        __result = UKismetMathLibrary::Subtract_VectorInt(A, B);
    }

    void UKismetMathLibrary_Subtract_VectorFloat(FVector& A, double B, FVector& __result)
    {
        __result = UKismetMathLibrary::Subtract_VectorFloat(A, B);
    }

    void UKismetMathLibrary_Subtract_LinearColorLinearColor(FLinearColor& A, FLinearColor& B, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::Subtract_LinearColorLinearColor(A, B);
    }

    void UKismetMathLibrary_Subtract_IntInt(int32 A, int32 B, int32& __result)
    {
        __result = UKismetMathLibrary::Subtract_IntInt(A, B);
    }

    void UKismetMathLibrary_Subtract_Int64Int64(int64 A, int64 B, int64& __result)
    {
        __result = UKismetMathLibrary::Subtract_Int64Int64(A, B);
    }

    void UKismetMathLibrary_Subtract_DoubleDouble(double A, double B, double& __result)
    {
        __result = UKismetMathLibrary::Subtract_DoubleDouble(A, B);
    }

    void UKismetMathLibrary_Subtract_ByteByte(uint8 A, uint8 B, uint8& __result)
    {
        __result = UKismetMathLibrary::Subtract_ByteByte(A, B);
    }

    void UKismetMathLibrary_Square(double A, double& __result)
    {
        __result = UKismetMathLibrary::Square(A);
    }

    void UKismetMathLibrary_Sqrt(double A, double& __result)
    {
        __result = UKismetMathLibrary::Sqrt(A);
    }

    void UKismetMathLibrary_Sin(double A, double& __result)
    {
        __result = UKismetMathLibrary::Sin(A);
    }

    void UKismetMathLibrary_SignOfInteger64(int64 A, int64& __result)
    {
        __result = UKismetMathLibrary::SignOfInteger64(A);
    }

    void UKismetMathLibrary_SignOfInteger(int32 A, int32& __result)
    {
        __result = UKismetMathLibrary::SignOfInteger(A);
    }

    void UKismetMathLibrary_SignOfFloat(double A, double& __result)
    {
        __result = UKismetMathLibrary::SignOfFloat(A);
    }

    void UKismetMathLibrary_SelectVector(FVector& A, FVector& B, bool bPickA, FVector& __result)
    {
        __result = UKismetMathLibrary::SelectVector(A, B, bPickA);
    }

    void UKismetMathLibrary_SelectRotator(FRotator& A, FRotator& B, bool bPickA, FRotator& __result)
    {
        __result = UKismetMathLibrary::SelectRotator(A, B, bPickA);
    }

    void UKismetMathLibrary_SelectObject(UObject* A, UObject* B, bool bSelectA, UObject*& __result)
    {
        __result = UKismetMathLibrary::SelectObject(A, B, bSelectA);
    }

    void UKismetMathLibrary_SelectName(const FName& A, const FName& B, bool bPickA, FName& __result)
    {
        __result = UKismetMathLibrary::SelectName(A, B, bPickA);
    }

    void UKismetMathLibrary_SelectInt(int32 A, int32 B, bool bPickA, int32& __result)
    {
        __result = UKismetMathLibrary::SelectInt(A, B, bPickA);
    }

    void UKismetMathLibrary_SelectFloat(double A, double B, bool bPickA, double& __result)
    {
        __result = UKismetMathLibrary::SelectFloat(A, B, bPickA);
    }

    void UKismetMathLibrary_SelectColor(FLinearColor& A, FLinearColor& B, bool bPickA, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::SelectColor(A, B, bPickA);
    }

    void UKismetMathLibrary_SelectClass(UClass*& A, UClass*& B, bool bSelectA, UClass*& __result)
    {
        __result = UKismetMathLibrary::SelectClass(A, B, bSelectA);
    }

    void UKismetMathLibrary_SafeDivide(double A, double B, double& __result)
    {
        __result = UKismetMathLibrary::SafeDivide(A, B);
    }

    void UKismetMathLibrary_Round64(double A, int64& __result)
    {
        __result = UKismetMathLibrary::Round64(A);
    }

    void UKismetMathLibrary_Round(double A, int32& __result)
    {
        __result = UKismetMathLibrary::Round(A);
    }

    void UKismetMathLibrary_RotatorFromAxisAndAngle(FVector& Axis, float Angle, FRotator& __result)
    {
        __result = UKismetMathLibrary::RotatorFromAxisAndAngle(Axis, Angle);
    }

    void UKismetMathLibrary_RotateAngleAxis(FVector& InVect, float AngleDeg, FVector& Axis, FVector& __result)
    {
        __result = UKismetMathLibrary::RotateAngleAxis(InVect, AngleDeg, Axis);
    }

    void UKismetMathLibrary_RLerp(FRotator& A, FRotator& B, float Alpha, bool bShortestPath, FRotator& __result)
    {
        __result = UKismetMathLibrary::RLerp(A, B, Alpha, bShortestPath);
    }

    void UKismetMathLibrary_RInterpTo_Constant(FRotator& Current, FRotator& Target, float DeltaTime, float InterpSpeed, FRotator& __result)
    {
        __result = UKismetMathLibrary::RInterpTo_Constant(Current, Target, DeltaTime, InterpSpeed);
    }

    void UKismetMathLibrary_RInterpTo(FRotator& Current, FRotator& Target, float DeltaTime, float InterpSpeed, FRotator& __result)
    {
        __result = UKismetMathLibrary::RInterpTo(Current, Target, DeltaTime, InterpSpeed);
    }

    void UKismetMathLibrary_RGBToHSV_Vector(FLinearColor& RGB, FLinearColor& HSV)
    {
        UKismetMathLibrary::RGBToHSV_Vector(RGB, HSV);
    }

    void UKismetMathLibrary_RGBToHSV(FLinearColor& InColor, float& H, float& S, float& V, float& A)
    {
        UKismetMathLibrary::RGBToHSV(InColor, H, S, V, A);
    }

    void UKismetMathLibrary_RGBLinearToHSV(FLinearColor& RGB, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::RGBLinearToHSV(RGB);
    }

    void UKismetMathLibrary_RandomUnitVectorInEllipticalConeInRadians(FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, FVector& __result)
    {
        __result = UKismetMathLibrary::RandomUnitVectorInEllipticalConeInRadians(ConeDir, MaxYawInRadians, MaxPitchInRadians);
    }

    void UKismetMathLibrary_RandomUnitVectorInEllipticalConeInDegrees(FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, FVector& __result)
    {
        __result = UKismetMathLibrary::RandomUnitVectorInEllipticalConeInDegrees(ConeDir, MaxYawInDegrees, MaxPitchInDegrees);
    }

    void UKismetMathLibrary_RandomUnitVectorInConeInRadians(FVector& ConeDir, float ConeHalfAngleInRadians, FVector& __result)
    {
        __result = UKismetMathLibrary::RandomUnitVectorInConeInRadians(ConeDir, ConeHalfAngleInRadians);
    }

    void UKismetMathLibrary_RandomUnitVectorInConeInDegrees(FVector& ConeDir, float ConeHalfAngleInDegrees, FVector& __result)
    {
        __result = UKismetMathLibrary::RandomUnitVectorInConeInDegrees(ConeDir, ConeHalfAngleInDegrees);
    }

    void UKismetMathLibrary_RandomUnitVector(FVector& __result)
    {
        __result = UKismetMathLibrary::RandomUnitVector();
    }

    void UKismetMathLibrary_RandomRotator(bool bRoll, FRotator& __result)
    {
        __result = UKismetMathLibrary::RandomRotator(bRoll);
    }

    void UKismetMathLibrary_RandomPointInBoundingBox(const FVector& Center, const FVector& HalfSize, FVector& __result)
    {
        __result = UKismetMathLibrary::RandomPointInBoundingBox(Center, HalfSize);
    }

    void UKismetMathLibrary_RandomIntegerInRange(int32 Min, int32 Max, int32& __result)
    {
        __result = UKismetMathLibrary::RandomIntegerInRange(Min, Max);
    }

    void UKismetMathLibrary_RandomInteger64InRange(int64 Min, int64 Max, int64& __result)
    {
        __result = UKismetMathLibrary::RandomInteger64InRange(Min, Max);
    }

    void UKismetMathLibrary_RandomInteger64(int64 Max, int64& __result)
    {
        __result = UKismetMathLibrary::RandomInteger64(Max);
    }

    void UKismetMathLibrary_RandomInteger(int32 Max, int32& __result)
    {
        __result = UKismetMathLibrary::RandomInteger(Max);
    }

    void UKismetMathLibrary_RandomFloatInRange(double Min, double Max, double& __result)
    {
        __result = UKismetMathLibrary::RandomFloatInRange(Min, Max);
    }

    void UKismetMathLibrary_RandomFloat(double& __result)
    {
        __result = UKismetMathLibrary::RandomFloat();
    }

    void UKismetMathLibrary_RandomBoolWithWeight(float Weight, bool& __result)
    {
        __result = UKismetMathLibrary::RandomBoolWithWeight(Weight);
    }

    void UKismetMathLibrary_RandomBool(bool& __result)
    {
        __result = UKismetMathLibrary::RandomBool();
    }

    void UKismetMathLibrary_RadiansToDegrees(double A, double& __result)
    {
        __result = UKismetMathLibrary::RadiansToDegrees(A);
    }

    void UKismetMathLibrary_ProjectVectorOnToVector(FVector& V, FVector& Target, FVector& __result)
    {
        __result = UKismetMathLibrary::ProjectVectorOnToVector(V, Target);
    }

    void UKismetMathLibrary_ProjectVectorOnToPlane(FVector& V, FVector& PlaneNormal, FVector& __result)
    {
        __result = UKismetMathLibrary::ProjectVectorOnToPlane(V, PlaneNormal);
    }

    void UKismetMathLibrary_ProjectPointOnToPlane(FVector& Point, FVector& PlaneBase, FVector& PlaneNormal, FVector& __result)
    {
        __result = UKismetMathLibrary::ProjectPointOnToPlane(Point, PlaneBase, PlaneNormal);
    }

    void UKismetMathLibrary_PerlinNoise1D(const float Value, float& __result)
    {
        __result = UKismetMathLibrary::PerlinNoise1D(Value);
    }

    void UKismetMathLibrary_Percent_IntInt(int32 A, int32 B, int32& __result)
    {
        __result = UKismetMathLibrary::Percent_IntInt(A, B);
    }

    void UKismetMathLibrary_Percent_Int64Int64(int64 A, int64 B, int64& __result)
    {
        __result = UKismetMathLibrary::Percent_Int64Int64(A, B);
    }

    void UKismetMathLibrary_Percent_FloatFloat(double A, double B, double& __result)
    {
        __result = UKismetMathLibrary::Percent_FloatFloat(A, B);
    }

    void UKismetMathLibrary_Percent_ByteByte(uint8 A, uint8 B, uint8& __result)
    {
        __result = UKismetMathLibrary::Percent_ByteByte(A, B);
    }

    void UKismetMathLibrary_Or_IntInt(int32 A, int32 B, int32& __result)
    {
        __result = UKismetMathLibrary::Or_IntInt(A, B);
    }

    void UKismetMathLibrary_Or_Int64Int64(int64 A, int64 B, int64& __result)
    {
        __result = UKismetMathLibrary::Or_Int64Int64(A, B);
    }

    void UKismetMathLibrary_NotEqualExactly_VectorVector(FVector& A, FVector& B, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqualExactly_VectorVector(A, B);
    }

    void UKismetMathLibrary_NotEqual_VectorVector(FVector& A, FVector& B, float ErrorTolerance, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_VectorVector(A, B, ErrorTolerance);
    }

    void UKismetMathLibrary_NotEqual_RotatorRotator(FRotator& A, FRotator& B, float ErrorTolerance, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_RotatorRotator(A, B, ErrorTolerance);
    }

    void UKismetMathLibrary_NotEqual_ObjectObject(UObject* A, UObject* B, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_ObjectObject(A, B);
    }

    void UKismetMathLibrary_NotEqual_NameName(FName& A, FName& B, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_NameName(A, B);
    }

    void UKismetMathLibrary_NotEqual_LinearColorLinearColor(FLinearColor& A, FLinearColor& B, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_LinearColorLinearColor(A, B);
    }

    void UKismetMathLibrary_NotEqual_IntInt(int32 A, int32 B, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_IntInt(A, B);
    }

    void UKismetMathLibrary_NotEqual_Int64Int64(int64 A, int64 B, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_Int64Int64(A, B);
    }

    void UKismetMathLibrary_NotEqual_DoubleDouble(double A, double B, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_DoubleDouble(A, B);
    }

    void UKismetMathLibrary_NotEqual_ClassClass(UClass*& A, UClass*& B, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_ClassClass(A, B);
    }

    void UKismetMathLibrary_NotEqual_ByteByte(uint8 A, uint8 B, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_ByteByte(A, B);
    }

    void UKismetMathLibrary_NotEqual_BoolBool(bool A, bool B, bool& __result)
    {
        __result = UKismetMathLibrary::NotEqual_BoolBool(A, B);
    }

    void UKismetMathLibrary_Not_PreBool(bool A, bool& __result)
    {
        __result = UKismetMathLibrary::Not_PreBool(A);
    }

    void UKismetMathLibrary_Not_Int64(int64 A, int64& __result)
    {
        __result = UKismetMathLibrary::Not_Int64(A);
    }

    void UKismetMathLibrary_Not_Int(int32 A, int32& __result)
    {
        __result = UKismetMathLibrary::Not_Int(A);
    }

    void UKismetMathLibrary_NormalizeToRange(double Value, double RangeMin, double RangeMax, double& __result)
    {
        __result = UKismetMathLibrary::NormalizeToRange(Value, RangeMin, RangeMax);
    }

    void UKismetMathLibrary_NormalizedDeltaRotator(FRotator& A, FRotator& B, FRotator& __result)
    {
        __result = UKismetMathLibrary::NormalizedDeltaRotator(A, B);
    }

    void UKismetMathLibrary_NormalizeAxis(float Angle, float& __result)
    {
        __result = UKismetMathLibrary::NormalizeAxis(Angle);
    }

    void UKismetMathLibrary_Normal(FVector& A, float Tolerance, FVector& __result)
    {
        __result = UKismetMathLibrary::Normal(A, Tolerance);
    }

    void UKismetMathLibrary_NegateVector(FVector& A, FVector& __result)
    {
        __result = UKismetMathLibrary::NegateVector(A);
    }

    void UKismetMathLibrary_NegateRotator(FRotator& A, FRotator& __result)
    {
        __result = UKismetMathLibrary::NegateRotator(A);
    }

    void UKismetMathLibrary_NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance, bool& __result)
    {
        __result = UKismetMathLibrary::NearlyEqual_FloatFloat(A, B, ErrorTolerance);
    }

    void UKismetMathLibrary_MultiplyMultiply_FloatFloat(double Base, double Exp, double& __result)
    {
        __result = UKismetMathLibrary::MultiplyMultiply_FloatFloat(Base, Exp);
    }

    void UKismetMathLibrary_MultiplyByPi(double Value, double& __result)
    {
        __result = UKismetMathLibrary::MultiplyByPi(Value);
    }

    void UKismetMathLibrary_Multiply_VectorVector(FVector& A, FVector& B, FVector& __result)
    {
        __result = UKismetMathLibrary::Multiply_VectorVector(A, B);
    }

    void UKismetMathLibrary_Multiply_VectorInt(FVector& A, int32 B, FVector& __result)
    {
        __result = UKismetMathLibrary::Multiply_VectorInt(A, B);
    }

    void UKismetMathLibrary_Multiply_VectorFloat(FVector& A, double B, FVector& __result)
    {
        __result = UKismetMathLibrary::Multiply_VectorFloat(A, B);
    }

    void UKismetMathLibrary_Multiply_RotatorInt(FRotator& A, int32 B, FRotator& __result)
    {
        __result = UKismetMathLibrary::Multiply_RotatorInt(A, B);
    }

    void UKismetMathLibrary_Multiply_RotatorFloat(FRotator& A, float B, FRotator& __result)
    {
        __result = UKismetMathLibrary::Multiply_RotatorFloat(A, B);
    }

    void UKismetMathLibrary_Multiply_LinearColorLinearColor(FLinearColor& A, FLinearColor& B, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::Multiply_LinearColorLinearColor(A, B);
    }

    void UKismetMathLibrary_Multiply_LinearColorFloat(FLinearColor& A, float B, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::Multiply_LinearColorFloat(A, B);
    }

    void UKismetMathLibrary_Multiply_IntInt(int32 A, int32 B, int32& __result)
    {
        __result = UKismetMathLibrary::Multiply_IntInt(A, B);
    }

    void UKismetMathLibrary_Multiply_IntFloat(int32 A, double B, double& __result)
    {
        __result = UKismetMathLibrary::Multiply_IntFloat(A, B);
    }

    void UKismetMathLibrary_Multiply_Int64Int64(int64 A, int64 B, int64& __result)
    {
        __result = UKismetMathLibrary::Multiply_Int64Int64(A, B);
    }

    void UKismetMathLibrary_Multiply_DoubleDouble(double A, double B, double& __result)
    {
        __result = UKismetMathLibrary::Multiply_DoubleDouble(A, B);
    }

    void UKismetMathLibrary_Multiply_ByteByte(uint8 A, uint8 B, uint8& __result)
    {
        __result = UKismetMathLibrary::Multiply_ByteByte(A, B);
    }

    void UKismetMathLibrary_MirrorVectorByNormal(FVector& InVect, FVector& InNormal, FVector& __result)
    {
        __result = UKismetMathLibrary::MirrorVectorByNormal(InVect, InNormal);
    }

    void UKismetMathLibrary_MinInt64(int64 A, int64 B, int64& __result)
    {
        __result = UKismetMathLibrary::MinInt64(A, B);
    }

    void UKismetMathLibrary_Min(int32 A, int32 B, int32& __result)
    {
        __result = UKismetMathLibrary::Min(A, B);
    }

    void UKismetMathLibrary_MaxInt64(int64 A, int64 B, int64& __result)
    {
        __result = UKismetMathLibrary::MaxInt64(A, B);
    }

    void UKismetMathLibrary_Max(int32 A, int32 B, int32& __result)
    {
        __result = UKismetMathLibrary::Max(A, B);
    }

    void UKismetMathLibrary_MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB, double& __result)
    {
        __result = UKismetMathLibrary::MapRangeUnclamped(Value, InRangeA, InRangeB, OutRangeA, OutRangeB);
    }

    void UKismetMathLibrary_MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB, double& __result)
    {
        __result = UKismetMathLibrary::MapRangeClamped(Value, InRangeA, InRangeB, OutRangeA, OutRangeB);
    }

    void UKismetMathLibrary_MakeVector(double X, double Y, double Z, FVector& __result)
    {
        __result = UKismetMathLibrary::MakeVector(X, Y, Z);
    }

    void UKismetMathLibrary_MakeRotFromZY(const FVector& Z, const FVector& Y, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotFromZY(Z, Y);
    }

    void UKismetMathLibrary_MakeRotFromZX(const FVector& Z, const FVector& X, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotFromZX(Z, X);
    }

    void UKismetMathLibrary_MakeRotFromZ(const FVector& Z, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotFromZ(Z);
    }

    void UKismetMathLibrary_MakeRotFromYZ(const FVector& Y, const FVector& Z, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotFromYZ(Y, Z);
    }

    void UKismetMathLibrary_MakeRotFromYX(const FVector& Y, const FVector& X, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotFromYX(Y, X);
    }

    void UKismetMathLibrary_MakeRotFromY(const FVector& Y, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotFromY(Y);
    }

    void UKismetMathLibrary_MakeRotFromXZ(const FVector& X, const FVector& Z, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotFromXZ(X, Z);
    }

    void UKismetMathLibrary_MakeRotFromXY(const FVector& X, const FVector& Y, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotFromXY(X, Y);
    }

    void UKismetMathLibrary_MakeRotFromX(const FVector& X, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotFromX(X);
    }

    void UKismetMathLibrary_MakeRotator(float Roll, float Pitch, float Yaw, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotator(Roll, Pitch, Yaw);
    }

    void UKismetMathLibrary_MakeRotationFromAxes(FVector& Forward, FVector& Right, FVector& Up, FRotator& __result)
    {
        __result = UKismetMathLibrary::MakeRotationFromAxes(Forward, Right, Up);
    }

    void UKismetMathLibrary_MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase, float& __result)
    {
        __result = UKismetMathLibrary::MakePulsatingValue(InCurrentTime, InPulsesPerSecond, InPhase);
    }

    void UKismetMathLibrary_MakeFrameRate(int32 Numerator, int32 Denominator, FFrameRate& __result)
    {
        __result = UKismetMathLibrary::MakeFrameRate(Numerator, Denominator);
    }

    void UKismetMathLibrary_MakeColor(float R, float G, float B, float A, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::MakeColor(R, G, B, A);
    }

    void UKismetMathLibrary_Loge(double A, double& __result)
    {
        __result = UKismetMathLibrary::Loge(A);
    }

    void UKismetMathLibrary_Log(double A, double Base, double& __result)
    {
        __result = UKismetMathLibrary::Log(A, Base);
    }

    void UKismetMathLibrary_LinePlaneIntersection_OriginNormal(const FVector& LineStart, const FVector& LineEnd, FVector& PlaneOrigin, FVector& PlaneNormal, float& T, FVector& Intersection, bool& __result)
    {
        __result = UKismetMathLibrary::LinePlaneIntersection_OriginNormal(LineStart, LineEnd, PlaneOrigin, PlaneNormal, T, Intersection);
    }

    void UKismetMathLibrary_LinearColorLerpUsingHSV(FLinearColor& A, FLinearColor& B, float Alpha, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColorLerpUsingHSV(A, B, Alpha);
    }

    void UKismetMathLibrary_LinearColorLerp(FLinearColor& A, FLinearColor& B, float Alpha, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColorLerp(A, B, Alpha);
    }

    void UKismetMathLibrary_LinearColor_Yellow(FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_Yellow();
    }

    void UKismetMathLibrary_LinearColor_White(FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_White();
    }

    void UKismetMathLibrary_LinearColor_Transparent(FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_Transparent();
    }

    void UKismetMathLibrary_LinearColor_ToRGBE(FLinearColor& InLinearColor, FColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_ToRGBE(InLinearColor);
    }

    void UKismetMathLibrary_LinearColor_ToNewOpacity(FLinearColor& InColor, float InOpacity, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_ToNewOpacity(InColor, InOpacity);
    }

    void UKismetMathLibrary_LinearColor_SetTemperature(FLinearColor& InOutColor, float InTemperature)
    {
        UKismetMathLibrary::LinearColor_SetTemperature(InOutColor, InTemperature);
    }

    void UKismetMathLibrary_LinearColor_SetRGBA(FLinearColor& InOutColor, float R, float G, float B, float A)
    {
        UKismetMathLibrary::LinearColor_SetRGBA(InOutColor, R, G, B, A);
    }

    void UKismetMathLibrary_LinearColor_SetRandomHue(FLinearColor& InOutColor)
    {
        UKismetMathLibrary::LinearColor_SetRandomHue(InOutColor);
    }

    void UKismetMathLibrary_LinearColor_SetFromSRGB(FLinearColor& InOutColor, const FColor& InSRGB)
    {
        UKismetMathLibrary::LinearColor_SetFromSRGB(InOutColor, InSRGB);
    }

    void UKismetMathLibrary_LinearColor_SetFromPow22(FLinearColor& InOutColor, const FColor& InColor)
    {
        UKismetMathLibrary::LinearColor_SetFromPow22(InOutColor, InColor);
    }

    void UKismetMathLibrary_LinearColor_SetFromHSV(FLinearColor& InOutColor, float H, float S, float V, float A)
    {
        UKismetMathLibrary::LinearColor_SetFromHSV(InOutColor, H, S, V, A);
    }

    void UKismetMathLibrary_LinearColor_Set(FLinearColor& InOutColor, FLinearColor& InColor)
    {
        UKismetMathLibrary::LinearColor_Set(InOutColor, InColor);
    }

    void UKismetMathLibrary_LinearColor_Red(FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_Red();
    }

    void UKismetMathLibrary_LinearColor_QuantizeRound(FLinearColor& InColor, FColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_QuantizeRound(InColor);
    }

    void UKismetMathLibrary_LinearColor_IsNearEqual(FLinearColor& A, FLinearColor& B, float Tolerance, bool& __result)
    {
        __result = UKismetMathLibrary::LinearColor_IsNearEqual(A, B, Tolerance);
    }

    void UKismetMathLibrary_LinearColor_Green(FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_Green();
    }

    void UKismetMathLibrary_LinearColor_Gray(FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_Gray();
    }

    void UKismetMathLibrary_LinearColor_GetMin(FLinearColor& InColor, float& __result)
    {
        __result = UKismetMathLibrary::LinearColor_GetMin(InColor);
    }

    void UKismetMathLibrary_LinearColor_GetMax(FLinearColor& InColor, float& __result)
    {
        __result = UKismetMathLibrary::LinearColor_GetMax(InColor);
    }

    void UKismetMathLibrary_LinearColor_GetLuminance(FLinearColor& InColor, float& __result)
    {
        __result = UKismetMathLibrary::LinearColor_GetLuminance(InColor);
    }

    void UKismetMathLibrary_LinearColor_Distance(FLinearColor& C1, FLinearColor& C2, float& __result)
    {
        __result = UKismetMathLibrary::LinearColor_Distance(C1, C2);
    }

    void UKismetMathLibrary_LinearColor_Desaturated(FLinearColor& InColor, float InDesaturation, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_Desaturated(InColor, InDesaturation);
    }

    void UKismetMathLibrary_LinearColor_Blue(FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_Blue();
    }

    void UKismetMathLibrary_LinearColor_Black(FLinearColor& __result)
    {
        __result = UKismetMathLibrary::LinearColor_Black();
    }

    void UKismetMathLibrary_LessLess_VectorRotator(FVector& A, FRotator& B, FVector& __result)
    {
        __result = UKismetMathLibrary::LessLess_VectorRotator(A, B);
    }

    void UKismetMathLibrary_LessEqual_IntInt(int32 A, int32 B, bool& __result)
    {
        __result = UKismetMathLibrary::LessEqual_IntInt(A, B);
    }

    void UKismetMathLibrary_LessEqual_Int64Int64(int64 A, int64 B, bool& __result)
    {
        __result = UKismetMathLibrary::LessEqual_Int64Int64(A, B);
    }

    void UKismetMathLibrary_LessEqual_DoubleDouble(double A, double B, bool& __result)
    {
        __result = UKismetMathLibrary::LessEqual_DoubleDouble(A, B);
    }

    void UKismetMathLibrary_LessEqual_ByteByte(uint8 A, uint8 B, bool& __result)
    {
        __result = UKismetMathLibrary::LessEqual_ByteByte(A, B);
    }

    void UKismetMathLibrary_Less_IntInt(int32 A, int32 B, bool& __result)
    {
        __result = UKismetMathLibrary::Less_IntInt(A, B);
    }

    void UKismetMathLibrary_Less_Int64Int64(int64 A, int64 B, bool& __result)
    {
        __result = UKismetMathLibrary::Less_Int64Int64(A, B);
    }

    void UKismetMathLibrary_Less_DoubleDouble(double A, double B, bool& __result)
    {
        __result = UKismetMathLibrary::Less_DoubleDouble(A, B);
    }

    void UKismetMathLibrary_Less_ByteByte(uint8 A, uint8 B, bool& __result)
    {
        __result = UKismetMathLibrary::Less_ByteByte(A, B);
    }

    void UKismetMathLibrary_Lerp(double A, double B, double Alpha, double& __result)
    {
        __result = UKismetMathLibrary::Lerp(A, B, Alpha);
    }

    void UKismetMathLibrary_IsPointInBox(FVector& Point, FVector& BoxOrigin, FVector& BoxExtent, bool& __result)
    {
        __result = UKismetMathLibrary::IsPointInBox(Point, BoxOrigin, BoxExtent);
    }

    void UKismetMathLibrary_IsLeapYear(int32 Year, bool& __result)
    {
        __result = UKismetMathLibrary::IsLeapYear(Year);
    }

    void UKismetMathLibrary_InRange_IntInt(int32 Value, int32 Min, int32 Max, bool InclusiveMin, bool InclusiveMax, bool& __result)
    {
        __result = UKismetMathLibrary::InRange_IntInt(Value, Min, Max, InclusiveMin, InclusiveMax);
    }

    void UKismetMathLibrary_InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax, bool& __result)
    {
        __result = UKismetMathLibrary::InRange_Int64Int64(Value, Min, Max, InclusiveMin, InclusiveMax);
    }

    void UKismetMathLibrary_InRange_FloatFloat(double Value, double Min, double Max, bool InclusiveMin, bool InclusiveMax, bool& __result)
    {
        __result = UKismetMathLibrary::InRange_FloatFloat(Value, Min, Max, InclusiveMin, InclusiveMax);
    }

    void UKismetMathLibrary_Hypotenuse(double Width, double Height, double& __result)
    {
        __result = UKismetMathLibrary::Hypotenuse(Width, Height);
    }

    void UKismetMathLibrary_HSVToRGBLinear(FLinearColor& HSV, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::HSVToRGBLinear(HSV);
    }

    void UKismetMathLibrary_HSVToRGB_Vector(FLinearColor& HSV, FLinearColor& RGB)
    {
        UKismetMathLibrary::HSVToRGB_Vector(HSV, RGB);
    }

    void UKismetMathLibrary_HSVToRGB(float H, float S, float V, float A, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::HSVToRGB(H, S, V, A);
    }

    void UKismetMathLibrary_GridSnap_Float(double Location, double GridSize, double& __result)
    {
        __result = UKismetMathLibrary::GridSnap_Float(Location, GridSize);
    }

    void UKismetMathLibrary_GreaterGreater_VectorRotator(FVector& A, FRotator& B, FVector& __result)
    {
        __result = UKismetMathLibrary::GreaterGreater_VectorRotator(A, B);
    }

    void UKismetMathLibrary_GreaterEqual_IntInt(int32 A, int32 B, bool& __result)
    {
        __result = UKismetMathLibrary::GreaterEqual_IntInt(A, B);
    }

    void UKismetMathLibrary_GreaterEqual_Int64Int64(int64 A, int64 B, bool& __result)
    {
        __result = UKismetMathLibrary::GreaterEqual_Int64Int64(A, B);
    }

    void UKismetMathLibrary_GreaterEqual_DoubleDouble(double A, double B, bool& __result)
    {
        __result = UKismetMathLibrary::GreaterEqual_DoubleDouble(A, B);
    }

    void UKismetMathLibrary_GreaterEqual_ByteByte(uint8 A, uint8 B, bool& __result)
    {
        __result = UKismetMathLibrary::GreaterEqual_ByteByte(A, B);
    }

    void UKismetMathLibrary_Greater_IntInt(int32 A, int32 B, bool& __result)
    {
        __result = UKismetMathLibrary::Greater_IntInt(A, B);
    }

    void UKismetMathLibrary_Greater_Int64Int64(int64 A, int64 B, bool& __result)
    {
        __result = UKismetMathLibrary::Greater_Int64Int64(A, B);
    }

    void UKismetMathLibrary_Greater_DoubleDouble(double A, double B, bool& __result)
    {
        __result = UKismetMathLibrary::Greater_DoubleDouble(A, B);
    }

    void UKismetMathLibrary_Greater_ByteByte(uint8 A, uint8 B, bool& __result)
    {
        __result = UKismetMathLibrary::Greater_ByteByte(A, B);
    }

    void UKismetMathLibrary_GetYawPitchFromVector(FVector& InVec, float& Yaw, float& Pitch)
    {
        UKismetMathLibrary::GetYawPitchFromVector(InVec, Yaw, Pitch);
    }

    void UKismetMathLibrary_GetUpVector(FRotator& InRot, FVector& __result)
    {
        __result = UKismetMathLibrary::GetUpVector(InRot);
    }

    void UKismetMathLibrary_GetTAU(double& __result)
    {
        __result = UKismetMathLibrary::GetTAU();
    }

    void UKismetMathLibrary_GetSlopeDegreeAngles(const FVector& MyRightYAxis, const FVector& FloorNormal, const FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle)
    {
        UKismetMathLibrary::GetSlopeDegreeAngles(MyRightYAxis, FloorNormal, UpVector, OutSlopePitchDegreeAngle, OutSlopeRollDegreeAngle);
    }

    void UKismetMathLibrary_GetRightVector(FRotator& InRot, FVector& __result)
    {
        __result = UKismetMathLibrary::GetRightVector(InRot);
    }

    void UKismetMathLibrary_GetReflectionVector(FVector& Direction, FVector& SurfaceNormal, FVector& __result)
    {
        __result = UKismetMathLibrary::GetReflectionVector(Direction, SurfaceNormal);
    }

    void UKismetMathLibrary_GetPointDistanceToSegment(FVector& Point, FVector& SegmentStart, FVector& SegmentEnd, float& __result)
    {
        __result = UKismetMathLibrary::GetPointDistanceToSegment(Point, SegmentStart, SegmentEnd);
    }

    void UKismetMathLibrary_GetPointDistanceToLine(FVector& Point, FVector& LineOrigin, FVector& LineDirection, float& __result)
    {
        __result = UKismetMathLibrary::GetPointDistanceToLine(Point, LineOrigin, LineDirection);
    }

    void UKismetMathLibrary_GetPI(double& __result)
    {
        __result = UKismetMathLibrary::GetPI();
    }

    void UKismetMathLibrary_GetMinElement(FVector& A, double& __result)
    {
        __result = UKismetMathLibrary::GetMinElement(A);
    }

    void UKismetMathLibrary_GetMaxElement(FVector& A, double& __result)
    {
        __result = UKismetMathLibrary::GetMaxElement(A);
    }

    void UKismetMathLibrary_GetForwardVector(FRotator& InRot, FVector& __result)
    {
        __result = UKismetMathLibrary::GetForwardVector(InRot);
    }

    void UKismetMathLibrary_GetDirectionUnitVector(FVector& From, FVector& To, FVector& __result)
    {
        __result = UKismetMathLibrary::GetDirectionUnitVector(From, To);
    }

    void UKismetMathLibrary_GetAxes(FRotator& A, FVector& X, FVector& Y, FVector& Z)
    {
        UKismetMathLibrary::GetAxes(A, X, Y, Z);
    }

    void UKismetMathLibrary_FWrap(double Value, double Min, double Max, double& __result)
    {
        __result = UKismetMathLibrary::FWrap(Value, Min, Max);
    }

    void UKismetMathLibrary_FTrunc64(double A, int64& __result)
    {
        __result = UKismetMathLibrary::FTrunc64(A);
    }

    void UKismetMathLibrary_FTrunc(double A, int32& __result)
    {
        __result = UKismetMathLibrary::FTrunc(A);
    }

    void UKismetMathLibrary_Fraction(double A, double& __result)
    {
        __result = UKismetMathLibrary::Fraction(A);
    }

    void UKismetMathLibrary_FMod64(double Dividend, double Divisor, double& Remainder, int64& __result)
    {
        __result = UKismetMathLibrary::FMod64(Dividend, Divisor, Remainder);
    }

    void UKismetMathLibrary_FMod(double Dividend, double Divisor, double& Remainder, int32& __result)
    {
        __result = UKismetMathLibrary::FMod(Dividend, Divisor, Remainder);
    }

    void UKismetMathLibrary_FMin(double A, double B, double& __result)
    {
        __result = UKismetMathLibrary::FMin(A, B);
    }

    void UKismetMathLibrary_FMax(double A, double B, double& __result)
    {
        __result = UKismetMathLibrary::FMax(A, B);
    }

    void UKismetMathLibrary_FixedTurn(float InCurrent, float InDesired, float InDeltaRate, float& __result)
    {
        __result = UKismetMathLibrary::FixedTurn(InCurrent, InDesired, InDeltaRate);
    }

    void UKismetMathLibrary_FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed, double& __result)
    {
        __result = UKismetMathLibrary::FInterpTo_Constant(Current, Target, DeltaTime, InterpSpeed);
    }

    void UKismetMathLibrary_FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed, double& __result)
    {
        __result = UKismetMathLibrary::FInterpTo(Current, Target, DeltaTime, InterpSpeed);
    }

    void UKismetMathLibrary_FInterpEaseInOut(double A, double B, double Alpha, double Exponent, double& __result)
    {
        __result = UKismetMathLibrary::FInterpEaseInOut(A, B, Alpha, Exponent);
    }

    void UKismetMathLibrary_FindNearestPointsOnLineSegments(FVector& Segment1Start, FVector& Segment1End, FVector& Segment2Start, FVector& Segment2End, FVector& Segment1Point, FVector& Segment2Point)
    {
        UKismetMathLibrary::FindNearestPointsOnLineSegments(Segment1Start, Segment1End, Segment2Start, Segment2End, Segment1Point, Segment2Point);
    }

    void UKismetMathLibrary_FindLookAtRotation(const FVector& Start, const FVector& Target, FRotator& __result)
    {
        __result = UKismetMathLibrary::FindLookAtRotation(Start, Target);
    }

    void UKismetMathLibrary_FindClosestPointOnSegment(FVector& Point, FVector& SegmentStart, FVector& SegmentEnd, FVector& __result)
    {
        __result = UKismetMathLibrary::FindClosestPointOnSegment(Point, SegmentStart, SegmentEnd);
    }

    void UKismetMathLibrary_FindClosestPointOnLine(FVector& Point, FVector& LineOrigin, FVector& LineDirection, FVector& __result)
    {
        __result = UKismetMathLibrary::FindClosestPointOnLine(Point, LineOrigin, LineDirection);
    }

    void UKismetMathLibrary_FFloor64(double A, int64& __result)
    {
        __result = UKismetMathLibrary::FFloor64(A);
    }

    void UKismetMathLibrary_FFloor(double A, int32& __result)
    {
        __result = UKismetMathLibrary::FFloor(A);
    }

    void UKismetMathLibrary_FClamp(double Value, double Min, double Max, double& __result)
    {
        __result = UKismetMathLibrary::FClamp(Value, Min, Max);
    }

    void UKismetMathLibrary_FCeil64(double A, int64& __result)
    {
        __result = UKismetMathLibrary::FCeil64(A);
    }

    void UKismetMathLibrary_FCeil(double A, int32& __result)
    {
        __result = UKismetMathLibrary::FCeil(A);
    }

    void UKismetMathLibrary_Exp(double A, double& __result)
    {
        __result = UKismetMathLibrary::Exp(A);
    }

    void UKismetMathLibrary_EqualExactly_VectorVector(FVector& A, FVector& B, bool& __result)
    {
        __result = UKismetMathLibrary::EqualExactly_VectorVector(A, B);
    }

    void UKismetMathLibrary_EqualEqual_VectorVector(FVector& A, FVector& B, float ErrorTolerance, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_VectorVector(A, B, ErrorTolerance);
    }

    void UKismetMathLibrary_EqualEqual_RotatorRotator(FRotator& A, FRotator& B, float ErrorTolerance, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_RotatorRotator(A, B, ErrorTolerance);
    }

    void UKismetMathLibrary_EqualEqual_ObjectObject(UObject* A, UObject* B, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_ObjectObject(A, B);
    }

    void UKismetMathLibrary_EqualEqual_NameName(FName& A, FName& B, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_NameName(A, B);
    }

    void UKismetMathLibrary_EqualEqual_LinearColorLinearColor(FLinearColor& A, FLinearColor& B, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_LinearColorLinearColor(A, B);
    }

    void UKismetMathLibrary_EqualEqual_IntInt(int32 A, int32 B, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_IntInt(A, B);
    }

    void UKismetMathLibrary_EqualEqual_Int64Int64(int64 A, int64 B, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_Int64Int64(A, B);
    }

    void UKismetMathLibrary_EqualEqual_DoubleDouble(double A, double B, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_DoubleDouble(A, B);
    }

    void UKismetMathLibrary_EqualEqual_ClassClass(UClass*& A, UClass*& B, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_ClassClass(A, B);
    }

    void UKismetMathLibrary_EqualEqual_ByteByte(uint8 A, uint8 B, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_ByteByte(A, B);
    }

    void UKismetMathLibrary_EqualEqual_BoolBool(bool A, bool B, bool& __result)
    {
        __result = UKismetMathLibrary::EqualEqual_BoolBool(A, B);
    }

    void UKismetMathLibrary_DynamicWeightedMovingAverage_FVector(FVector& CurrentSample, FVector& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight, FVector& __result)
    {
        __result = UKismetMathLibrary::DynamicWeightedMovingAverage_FVector(CurrentSample, PreviousSample, MaxDistance, MinWeight, MaxWeight);
    }

    void UKismetMathLibrary_DynamicWeightedMovingAverage_FRotator(FRotator& CurrentSample, FRotator& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight, FRotator& __result)
    {
        __result = UKismetMathLibrary::DynamicWeightedMovingAverage_FRotator(CurrentSample, PreviousSample, MaxDistance, MinWeight, MaxWeight);
    }

    void UKismetMathLibrary_DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight, float& __result)
    {
        __result = UKismetMathLibrary::DynamicWeightedMovingAverage_Float(CurrentSample, PreviousSample, MaxDistance, MinWeight, MaxWeight);
    }

    void UKismetMathLibrary_Dot_VectorVector(FVector& A, FVector& B, double& __result)
    {
        __result = UKismetMathLibrary::Dot_VectorVector(A, B);
    }

    void UKismetMathLibrary_Divide_VectorVector(FVector& A, FVector& B, FVector& __result)
    {
        __result = UKismetMathLibrary::Divide_VectorVector(A, B);
    }

    void UKismetMathLibrary_Divide_VectorInt(FVector& A, int32 B, FVector& __result)
    {
        __result = UKismetMathLibrary::Divide_VectorInt(A, B);
    }

    void UKismetMathLibrary_Divide_VectorFloat(FVector& A, double B, FVector& __result)
    {
        __result = UKismetMathLibrary::Divide_VectorFloat(A, B);
    }

    void UKismetMathLibrary_Divide_LinearColorLinearColor(FLinearColor& A, FLinearColor& B, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::Divide_LinearColorLinearColor(A, B);
    }

    void UKismetMathLibrary_Divide_IntInt(int32 A, int32 B, int32& __result)
    {
        __result = UKismetMathLibrary::Divide_IntInt(A, B);
    }

    void UKismetMathLibrary_Divide_Int64Int64(int64 A, int64 B, int64& __result)
    {
        __result = UKismetMathLibrary::Divide_Int64Int64(A, B);
    }

    void UKismetMathLibrary_Divide_DoubleDouble(double A, double B, double& __result)
    {
        __result = UKismetMathLibrary::Divide_DoubleDouble(A, B);
    }

    void UKismetMathLibrary_Divide_ByteByte(uint8 A, uint8 B, uint8& __result)
    {
        __result = UKismetMathLibrary::Divide_ByteByte(A, B);
    }

    void UKismetMathLibrary_DegTan(double A, double& __result)
    {
        __result = UKismetMathLibrary::DegTan(A);
    }

    void UKismetMathLibrary_DegSin(double A, double& __result)
    {
        __result = UKismetMathLibrary::DegSin(A);
    }

    void UKismetMathLibrary_DegreesToRadians(double A, double& __result)
    {
        __result = UKismetMathLibrary::DegreesToRadians(A);
    }

    void UKismetMathLibrary_DegCos(double A, double& __result)
    {
        __result = UKismetMathLibrary::DegCos(A);
    }

    void UKismetMathLibrary_DegAtan2(double Y, double X, double& __result)
    {
        __result = UKismetMathLibrary::DegAtan2(Y, X);
    }

    void UKismetMathLibrary_DegAtan(double A, double& __result)
    {
        __result = UKismetMathLibrary::DegAtan(A);
    }

    void UKismetMathLibrary_DegAsin(double A, double& __result)
    {
        __result = UKismetMathLibrary::DegAsin(A);
    }

    void UKismetMathLibrary_DegAcos(double A, double& __result)
    {
        __result = UKismetMathLibrary::DegAcos(A);
    }

    void UKismetMathLibrary_DaysInYear(int32 Year, int32& __result)
    {
        __result = UKismetMathLibrary::DaysInYear(Year);
    }

    void UKismetMathLibrary_DaysInMonth(int32 Year, int32 Month, int32& __result)
    {
        __result = UKismetMathLibrary::DaysInMonth(Year, Month);
    }

    void UKismetMathLibrary_Cross_VectorVector(FVector& A, FVector& B, FVector& __result)
    {
        __result = UKismetMathLibrary::Cross_VectorVector(A, B);
    }

    void UKismetMathLibrary_CreateVectorFromYawPitch(float Yaw, float Pitch, float Length, FVector& __result)
    {
        __result = UKismetMathLibrary::CreateVectorFromYawPitch(Yaw, Pitch, Length);
    }

    void UKismetMathLibrary_Cos(double A, double& __result)
    {
        __result = UKismetMathLibrary::Cos(A);
    }

    void UKismetMathLibrary_Conv_VectorToRotator(FVector& InVec, FRotator& __result)
    {
        __result = UKismetMathLibrary::Conv_VectorToRotator(InVec);
    }

    void UKismetMathLibrary_Conv_VectorToLinearColor(FVector& InVec, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::Conv_VectorToLinearColor(InVec);
    }

    void UKismetMathLibrary_Conv_RotatorToVector(FRotator& InRot, FVector& __result)
    {
        __result = UKismetMathLibrary::Conv_RotatorToVector(InRot);
    }

    void UKismetMathLibrary_Conv_LinearColorToVector(FLinearColor& InLinearColor, FVector& __result)
    {
        __result = UKismetMathLibrary::Conv_LinearColorToVector(InLinearColor);
    }

    void UKismetMathLibrary_Conv_LinearColorToColor(FLinearColor& InLinearColor, bool InUseSRGB, FColor& __result)
    {
        __result = UKismetMathLibrary::Conv_LinearColorToColor(InLinearColor, InUseSRGB);
    }

    void UKismetMathLibrary_Conv_IntToVector(int32 InInt, FVector& __result)
    {
        __result = UKismetMathLibrary::Conv_IntToVector(InInt);
    }

    void UKismetMathLibrary_Conv_IntToInt64(int32 InInt, int64& __result)
    {
        __result = UKismetMathLibrary::Conv_IntToInt64(InInt);
    }

    void UKismetMathLibrary_Conv_IntToDouble(int32 InInt, double& __result)
    {
        __result = UKismetMathLibrary::Conv_IntToDouble(InInt);
    }

    void UKismetMathLibrary_Conv_IntToByte(int32 InInt, uint8& __result)
    {
        __result = UKismetMathLibrary::Conv_IntToByte(InInt);
    }

    void UKismetMathLibrary_Conv_IntToBool(int32 InInt, bool& __result)
    {
        __result = UKismetMathLibrary::Conv_IntToBool(InInt);
    }

    void UKismetMathLibrary_Conv_Int64ToInt(int64 InInt, int32& __result)
    {
        __result = UKismetMathLibrary::Conv_Int64ToInt(InInt);
    }

    void UKismetMathLibrary_Conv_Int64ToDouble(int64 InInt, double& __result)
    {
        __result = UKismetMathLibrary::Conv_Int64ToDouble(InInt);
    }

    void UKismetMathLibrary_Conv_Int64ToByte(int64 InInt, uint8& __result)
    {
        __result = UKismetMathLibrary::Conv_Int64ToByte(InInt);
    }

    void UKismetMathLibrary_Conv_DoubleToVector(double InDouble, FVector& __result)
    {
        __result = UKismetMathLibrary::Conv_DoubleToVector(InDouble);
    }

    void UKismetMathLibrary_Conv_DoubleToLinearColor(double InDouble, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::Conv_DoubleToLinearColor(InDouble);
    }

    void UKismetMathLibrary_Conv_DoubleToInt64(double InDouble, int64& __result)
    {
        __result = UKismetMathLibrary::Conv_DoubleToInt64(InDouble);
    }

    void UKismetMathLibrary_Conv_ColorToLinearColor(FColor& InColor, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::Conv_ColorToLinearColor(InColor);
    }

    void UKismetMathLibrary_Conv_ByteToInt64(uint8 InByte, int64& __result)
    {
        __result = UKismetMathLibrary::Conv_ByteToInt64(InByte);
    }

    void UKismetMathLibrary_Conv_ByteToInt(uint8 InByte, int32& __result)
    {
        __result = UKismetMathLibrary::Conv_ByteToInt(InByte);
    }

    void UKismetMathLibrary_Conv_ByteToDouble(uint8 InByte, double& __result)
    {
        __result = UKismetMathLibrary::Conv_ByteToDouble(InByte);
    }

    void UKismetMathLibrary_Conv_BoolToInt(bool InBool, int32& __result)
    {
        __result = UKismetMathLibrary::Conv_BoolToInt(InBool);
    }

    void UKismetMathLibrary_Conv_BoolToDouble(bool InBool, double& __result)
    {
        __result = UKismetMathLibrary::Conv_BoolToDouble(InBool);
    }

    void UKismetMathLibrary_Conv_BoolToByte(bool InBool, uint8& __result)
    {
        __result = UKismetMathLibrary::Conv_BoolToByte(InBool);
    }

    void UKismetMathLibrary_ComposeRotators(FRotator& A, FRotator& B, FRotator& __result)
    {
        __result = UKismetMathLibrary::ComposeRotators(A, B);
    }

    void UKismetMathLibrary_ClassIsChildOf(TSubclassOf<UObject>& TestClass, TSubclassOf<UObject>& ParentClass, bool& __result)
    {
        __result = UKismetMathLibrary::ClassIsChildOf(TestClass, ParentClass);
    }

    void UKismetMathLibrary_ClampVectorSize(FVector& A, double Min, double Max, FVector& __result)
    {
        __result = UKismetMathLibrary::ClampVectorSize(A, Min, Max);
    }

    void UKismetMathLibrary_ClampInt64(int64 Value, int64 Min, int64 Max, int64& __result)
    {
        __result = UKismetMathLibrary::ClampInt64(Value, Min, Max);
    }

    void UKismetMathLibrary_ClampAxis(float Angle, float& __result)
    {
        __result = UKismetMathLibrary::ClampAxis(Angle);
    }

    void UKismetMathLibrary_ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees, double& __result)
    {
        __result = UKismetMathLibrary::ClampAngle(AngleDegrees, MinAngleDegrees, MaxAngleDegrees);
    }

    void UKismetMathLibrary_Clamp(int32 Value, int32 Min, int32 Max, int32& __result)
    {
        __result = UKismetMathLibrary::Clamp(Value, Min, Max);
    }

    void UKismetMathLibrary_CInterpTo(FLinearColor& Current, FLinearColor& Target, float DeltaTime, float InterpSpeed, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::CInterpTo(Current, Target, DeltaTime, InterpSpeed);
    }

    void UKismetMathLibrary_BreakVector(FVector& InVec, double& X, double& Y, double& Z)
    {
        UKismetMathLibrary::BreakVector(InVec, X, Y, Z);
    }

    void UKismetMathLibrary_BreakRotIntoAxes(const FRotator& InRot, FVector& X, FVector& Y, FVector& Z)
    {
        UKismetMathLibrary::BreakRotIntoAxes(InRot, X, Y, Z);
    }

    void UKismetMathLibrary_BreakRotator(FRotator& InRot, float& Roll, float& Pitch, float& Yaw)
    {
        UKismetMathLibrary::BreakRotator(InRot, Roll, Pitch, Yaw);
    }

    void UKismetMathLibrary_BreakFrameRate(const FFrameRate& InFrameRate, int32& Numerator, int32& Denominator)
    {
        UKismetMathLibrary::BreakFrameRate(InFrameRate, Numerator, Denominator);
    }

    void UKismetMathLibrary_BreakColor(FLinearColor& InColor, float& R, float& G, float& B, float& A)
    {
        UKismetMathLibrary::BreakColor(InColor, R, G, B, A);
    }

    void UKismetMathLibrary_BooleanXOR(bool A, bool B, bool& __result)
    {
        __result = UKismetMathLibrary::BooleanXOR(A, B);
    }

    void UKismetMathLibrary_BooleanOR(bool A, bool B, bool& __result)
    {
        __result = UKismetMathLibrary::BooleanOR(A, B);
    }

    void UKismetMathLibrary_BooleanNOR(bool A, bool B, bool& __result)
    {
        __result = UKismetMathLibrary::BooleanNOR(A, B);
    }

    void UKismetMathLibrary_BooleanNAND(bool A, bool B, bool& __result)
    {
        __result = UKismetMathLibrary::BooleanNAND(A, B);
    }

    void UKismetMathLibrary_BooleanAND(bool A, bool B, bool& __result)
    {
        __result = UKismetMathLibrary::BooleanAND(A, B);
    }

    void UKismetMathLibrary_BMin(uint8 A, uint8 B, uint8& __result)
    {
        __result = UKismetMathLibrary::BMin(A, B);
    }

    void UKismetMathLibrary_BMax(uint8 A, uint8 B, uint8& __result)
    {
        __result = UKismetMathLibrary::BMax(A, B);
    }

    void UKismetMathLibrary_Atan2(double Y, double X, double& __result)
    {
        __result = UKismetMathLibrary::Atan2(Y, X);
    }

    void UKismetMathLibrary_Atan(double A, double& __result)
    {
        __result = UKismetMathLibrary::Atan(A);
    }

    void UKismetMathLibrary_Asin(double A, double& __result)
    {
        __result = UKismetMathLibrary::Asin(A);
    }

    void UKismetMathLibrary_And_IntInt(int32 A, int32 B, int32& __result)
    {
        __result = UKismetMathLibrary::And_IntInt(A, B);
    }

    void UKismetMathLibrary_And_Int64Int64(int64 A, int64 B, int64& __result)
    {
        __result = UKismetMathLibrary::And_Int64Int64(A, B);
    }

    void UKismetMathLibrary_Add_VectorVector(FVector& A, FVector& B, FVector& __result)
    {
        __result = UKismetMathLibrary::Add_VectorVector(A, B);
    }

    void UKismetMathLibrary_Add_VectorInt(FVector& A, int32 B, FVector& __result)
    {
        __result = UKismetMathLibrary::Add_VectorInt(A, B);
    }

    void UKismetMathLibrary_Add_VectorFloat(FVector& A, double B, FVector& __result)
    {
        __result = UKismetMathLibrary::Add_VectorFloat(A, B);
    }

    void UKismetMathLibrary_Add_LinearColorLinearColor(FLinearColor& A, FLinearColor& B, FLinearColor& __result)
    {
        __result = UKismetMathLibrary::Add_LinearColorLinearColor(A, B);
    }

    void UKismetMathLibrary_Add_IntInt(int32 A, int32 B, int32& __result)
    {
        __result = UKismetMathLibrary::Add_IntInt(A, B);
    }

    void UKismetMathLibrary_Add_Int64Int64(int64 A, int64 B, int64& __result)
    {
        __result = UKismetMathLibrary::Add_Int64Int64(A, B);
    }

    void UKismetMathLibrary_Add_DoubleDouble(double A, double B, double& __result)
    {
        __result = UKismetMathLibrary::Add_DoubleDouble(A, B);
    }

    void UKismetMathLibrary_Add_ByteByte(uint8 A, uint8 B, uint8& __result)
    {
        __result = UKismetMathLibrary::Add_ByteByte(A, B);
    }

    void UKismetMathLibrary_Acos(double A, double& __result)
    {
        __result = UKismetMathLibrary::Acos(A);
    }

    void UKismetMathLibrary_Abs_Int64(int64 A, int64& __result)
    {
        __result = UKismetMathLibrary::Abs_Int64(A);
    }

    void UKismetMathLibrary_Abs_Int(int32 A, int32& __result)
    {
        __result = UKismetMathLibrary::Abs_Int(A);
    }

    void UKismetMathLibrary_Abs(double A, double& __result)
    {
        __result = UKismetMathLibrary::Abs(A);
    }

    void UKismetRenderingLibrary_SetCastInsetShadowForAllAttachments(UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup)
    {
        UKismetRenderingLibrary::SetCastInsetShadowForAllAttachments(PrimitiveComponent, bCastInsetShadow, bLightAttachmentsAsGroup);
    }

    void UKismetRenderingLibrary_ResizeRenderTarget2D(UTextureRenderTarget2D* TextureRenderTarget, int32 Width, int32 Height)
    {
        UKismetRenderingLibrary::ResizeRenderTarget2D(TextureRenderTarget, Width, Height);
    }

    void UKismetRenderingLibrary_RenderTargetCreateStaticVolumeTextureEditorOnly(UTextureRenderTargetVolume* RenderTarget, const char* Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings, UVolumeTexture*& __result)
    {
        __result = UKismetRenderingLibrary::RenderTargetCreateStaticVolumeTextureEditorOnly(RenderTarget, US_STRING_TO_TCHAR(Name), CompressionSettings, MipSettings);
    }

    void UKismetRenderingLibrary_RenderTargetCreateStaticTextureCubeEditorOnly(UTextureRenderTargetCube* RenderTarget, const char* Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings, UTextureCube*& __result)
    {
        __result = UKismetRenderingLibrary::RenderTargetCreateStaticTextureCubeEditorOnly(RenderTarget, US_STRING_TO_TCHAR(Name), CompressionSettings, MipSettings);
    }

    void UKismetRenderingLibrary_RenderTargetCreateStaticTexture2DEditorOnly(UTextureRenderTarget2D* RenderTarget, const char* Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings, UTexture2D*& __result)
    {
        __result = UKismetRenderingLibrary::RenderTargetCreateStaticTexture2DEditorOnly(RenderTarget, US_STRING_TO_TCHAR(Name), CompressionSettings, MipSettings);
    }

    void UKismetRenderingLibrary_RenderTargetCreateStaticTexture2DArrayEditorOnly(UTextureRenderTarget2DArray* RenderTarget, const char* Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings, UTexture2DArray*& __result)
    {
        __result = UKismetRenderingLibrary::RenderTargetCreateStaticTexture2DArrayEditorOnly(RenderTarget, US_STRING_TO_TCHAR(Name), CompressionSettings, MipSettings);
    }

    void UKismetRenderingLibrary_ReleaseRenderTarget2D(UTextureRenderTarget2D* TextureRenderTarget)
    {
        UKismetRenderingLibrary::ReleaseRenderTarget2D(TextureRenderTarget);
    }

    void UKismetRenderingLibrary_RefreshPathTracingOutput()
    {
        UKismetRenderingLibrary::RefreshPathTracingOutput();
    }

    void UKismetRenderingLibrary_ReadRenderTargetUV(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, float U, float V, FColor& __result)
    {
        __result = UKismetRenderingLibrary::ReadRenderTargetUV(WorldContextObject, TextureRenderTarget, U, V);
    }

    void UKismetRenderingLibrary_ReadRenderTargetRawUV(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize, FLinearColor& __result)
    {
        __result = UKismetRenderingLibrary::ReadRenderTargetRawUV(WorldContextObject, TextureRenderTarget, U, V, bNormalize);
    }

    void UKismetRenderingLibrary_ReadRenderTargetRawPixel(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, int32 X, int32 Y, bool bNormalize, FLinearColor& __result)
    {
        __result = UKismetRenderingLibrary::ReadRenderTargetRawPixel(WorldContextObject, TextureRenderTarget, X, Y, bNormalize);
    }

    void UKismetRenderingLibrary_ReadRenderTargetPixel(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, int32 X, int32 Y, FColor& __result)
    {
        __result = UKismetRenderingLibrary::ReadRenderTargetPixel(WorldContextObject, TextureRenderTarget, X, Y);
    }

    void UKismetRenderingLibrary_ImportFileAsTexture2D(UObject* WorldContextObject, const char* Filename, UTexture2D*& __result)
    {
        __result = UKismetRenderingLibrary::ImportFileAsTexture2D(WorldContextObject, US_STRING_TO_TCHAR(Filename));
    }

    void UKismetRenderingLibrary_ExportTexture2D(UObject* WorldContextObject, UTexture2D* Texture, const char* FilePath, const char* FileName)
    {
        UKismetRenderingLibrary::ExportTexture2D(WorldContextObject, Texture, US_STRING_TO_TCHAR(FilePath), US_STRING_TO_TCHAR(FileName));
    }

    void UKismetRenderingLibrary_ExportRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, const char* FilePath, const char* FileName)
    {
        UKismetRenderingLibrary::ExportRenderTarget(WorldContextObject, TextureRenderTarget, US_STRING_TO_TCHAR(FilePath), US_STRING_TO_TCHAR(FileName));
    }

    void UKismetRenderingLibrary_EnablePathTracing(bool bEnablePathTracer)
    {
        UKismetRenderingLibrary::EnablePathTracing(bEnablePathTracer);
    }

    void UKismetRenderingLibrary_DrawMaterialToRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, UMaterialInterface* Material)
    {
        UKismetRenderingLibrary::DrawMaterialToRenderTarget(WorldContextObject, TextureRenderTarget, Material);
    }

    void UKismetRenderingLibrary_CreateRenderTargetVolume(UObject* WorldContextObject, int32 Width, int32 Height, int32 Depth, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs, UTextureRenderTargetVolume*& __result)
    {
        __result = UKismetRenderingLibrary::CreateRenderTargetVolume(WorldContextObject, Width, Height, Depth, Format, ClearColor, bAutoGenerateMipMaps, bSupportUAVs);
    }

    void UKismetRenderingLibrary_CreateRenderTarget2DArray(UObject* WorldContextObject, int32 Width, int32 Height, int32 Slices, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs, UTextureRenderTarget2DArray*& __result)
    {
        __result = UKismetRenderingLibrary::CreateRenderTarget2DArray(WorldContextObject, Width, Height, Slices, Format, ClearColor, bAutoGenerateMipMaps, bSupportUAVs);
    }

    void UKismetRenderingLibrary_CreateRenderTarget2D(UObject* WorldContextObject, int32 Width, int32 Height, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor& ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs, UTextureRenderTarget2D*& __result)
    {
        __result = UKismetRenderingLibrary::CreateRenderTarget2D(WorldContextObject, Width, Height, Format, ClearColor, bAutoGenerateMipMaps, bSupportUAVs);
    }

    void UKismetRenderingLibrary_ConvertRenderTargetToTextureVolumeEditorOnly(UObject* WorldContextObject, UTextureRenderTargetVolume* RenderTarget, UVolumeTexture* Texture)
    {
        UKismetRenderingLibrary::ConvertRenderTargetToTextureVolumeEditorOnly(WorldContextObject, RenderTarget, Texture);
    }

    void UKismetRenderingLibrary_ConvertRenderTargetToTextureCubeEditorOnly(UObject* WorldContextObject, UTextureRenderTargetCube* RenderTarget, UTextureCube* Texture)
    {
        UKismetRenderingLibrary::ConvertRenderTargetToTextureCubeEditorOnly(WorldContextObject, RenderTarget, Texture);
    }

    void UKismetRenderingLibrary_ConvertRenderTargetToTexture2DEditorOnly(UObject* WorldContextObject, UTextureRenderTarget2D* RenderTarget, UTexture2D* Texture)
    {
        UKismetRenderingLibrary::ConvertRenderTargetToTexture2DEditorOnly(WorldContextObject, RenderTarget, Texture);
    }

    void UKismetRenderingLibrary_ConvertRenderTargetToTexture2DArrayEditorOnly(UObject* WorldContextObject, UTextureRenderTarget2DArray* RenderTarget, UTexture2DArray* Texture)
    {
        UKismetRenderingLibrary::ConvertRenderTargetToTexture2DArrayEditorOnly(WorldContextObject, RenderTarget, Texture);
    }

    void UKismetRenderingLibrary_ClearRenderTarget2D(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, FLinearColor& ClearColor)
    {
        UKismetRenderingLibrary::ClearRenderTarget2D(WorldContextObject, TextureRenderTarget, ClearColor);
    }


    // Export register function
    void RegisterFastInvokeApis_1(FUnrealInteropFunctions* InInteropFunctions)
    {
        check(InInteropFunctions);

        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_Walk);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ViewSelf);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ViewPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ViewClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ViewActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_UpdateSafeArea);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ToggleServerStatReplicatorUpdateStatNet);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ToggleServerStatReplicatorClientOverwrite);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ToggleDebugCamera);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ToggleAILogging);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_TestCollisionDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_Teleport);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_Summon);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_StreamLevelOut);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_StreamLevelIn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_SpawnServerStatReplicator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_Slomo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_SetWorldOrigin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_SetMouseSensitivityToDefault);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ServerToggleAILogging);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ReceiveInitCheatManager);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ReceiveEndPlay);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_PlayersOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_OnPlayerEndPlayed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_OnlyLoadLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_LogLoc);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_InvertMouse);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_God);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_Ghost);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_GetPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_FreezeFrame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_Fly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_FlushLog);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DumpVoiceMutingState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DumpPartyState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DumpOnlineSessionState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DumpChatState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DestroyTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DestroyServerStatReplicator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DestroyPawns);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DestroyAllPawnsExceptTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DestroyAll);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DebugCapsuleSweepSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DebugCapsuleSweepPawn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DebugCapsuleSweepComplex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DebugCapsuleSweepClear);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DebugCapsuleSweepChannel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DebugCapsuleSweepCapture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DebugCapsuleSweep);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_DamageTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_CheatScript);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_ChangeSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_BugItGo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManager_BugIt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManagerExtension_RemovedFromCheatManager);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManagerExtension_GetPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCheatManagerExtension_AddedToCheatManager);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UChildActorComponent_SetChildActorClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UClusterUnionComponent_SetIsAnchored);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UClusterUnionComponent_SetEnableDamageFromCollision);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UClusterUnionComponent_RemoveComponentFromCluster);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UClusterUnionComponent_IsComponentAdded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UClusterUnionReplicatedProxyComponent_SetParentClusterUnion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UClusterUnionReplicatedProxyComponent_SetChildClusteredComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UClusterUnionReplicatedProxyComponent_MarkPendingDeletion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UClusterUnionReplicatedProxyComponent_IsPendingDeletion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UClusterUnionReplicatedProxyComponent_GetParentClusterUnionComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UClusterUnionReplicatedProxyComponent_GetChildClusteredComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCurveBase_GetValueRange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCurveBase_GetTimeRange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCurveFloat_GetFloatValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCurveLinearColor_GetUnadjustedLinearColorValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCurveLinearColor_GetLinearColorValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCurveLinearColor_GetClampedLinearColorValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCurveLinearColorAtlas_GetCurvePosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UCurveVector_GetVectorValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerAsset_IsServerOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerAsset_IsRuntime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerAsset_IsClientOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerAsset_GetType);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerAsset_GetDebugColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerInstance_IsVisible);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerInstance_IsServerOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerInstance_IsRuntime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerInstance_IsInitiallyVisible);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerInstance_IsEffectiveVisible);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerInstance_IsClientOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerInstance_GetType);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerInstance_GetInitialRuntimeState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerInstance_GetDebugColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerInstance_GetAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerManager_SetDataLayerRuntimeState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerManager_SetDataLayerInstanceRuntimeState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerManager_GetDataLayerInstanceRuntimeState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerManager_GetDataLayerInstanceFromName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerManager_GetDataLayerInstanceFromAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerManager_GetDataLayerInstanceEffectiveRuntimeState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataLayerSubsystem_SetDataLayerRuntimeStateByLabel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataTableFunctionLibrary_GetDataTableRowStruct);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataTableFunctionLibrary_GetDataTableColumnNameFromExportName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataTableFunctionLibrary_EvaluateCurveTableRow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDataTableFunctionLibrary_DoesDataTableRowExist);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_SetSortOrder);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_SetFadeScreenSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_SetFadeOut);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_SetFadeIn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_SetDecalMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_SetDecalColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_GetFadeStartDelay);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_GetFadeInStartDelay);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_GetFadeInDuration);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_GetFadeDuration);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_GetDecalMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDecalComponent_CreateDynamicMaterialInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDEPRECATED_DataLayer_IsVisible);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDEPRECATED_DataLayer_IsRuntime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDEPRECATED_DataLayer_IsInitiallyVisible);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDEPRECATED_DataLayer_IsEffectiveVisible);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDEPRECATED_DataLayer_GetInitialRuntimeState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDEPRECATED_DataLayer_GetDebugColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDEPRECATED_DataLayer_GetDataLayerLabel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetShadowSourceAngleFactor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetShadowDistanceFadeoutFraction);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetShadowCascadeBiasDistribution);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetShadowAmount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetOcclusionMaskDarkness);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetOcclusionDepthRange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetLightSourceSoftAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetLightSourceAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetLightShaftOverrideDirection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetForwardShadingPriority);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetEnableLightShaftOcclusion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetDynamicShadowCascades);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetCascadeTransitionFraction);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetCascadeDistributionExponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetAtmosphereSunLightIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UDirectionalLightComponent_SetAtmosphereSunLight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetVolumetricFogScatteringDistribution);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetVolumetricFogExtinctionScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetVolumetricFogEmissive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetVolumetricFogDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetVolumetricFogAlbedo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetVolumetricFog);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetStartDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetSecondFogHeightOffset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetSecondFogHeightFalloff);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetSecondFogDensity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetRenderInMainPass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetNonDirectionalInscatteringColorDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetInscatteringTextureTint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetInscatteringColorCubemapAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetInscatteringColorCubemap);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetHoldout);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetFullyDirectionalInscatteringColorDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetFogMaxOpacity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetFogInscatteringColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetFogHeightFalloff);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetFogDensity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetFogCutoffDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetDirectionalInscatteringExponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UExponentialHeightFogComponent_SetDirectionalInscatteringColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UForceFeedbackComponent_Stop);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UForceFeedbackComponent_SetIntensityMultiplier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UForceFeedbackComponent_SetForceFeedbackEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UForceFeedbackComponent_Play);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_SetVectorParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_SetUseAutoManageAttachment);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_SetIntParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_SetFloatParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_SetEmitterEnable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_SetColorParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_SetBoolParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_SetAutoAttachmentParameters);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_SetActorParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_ReleaseToPool);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UFXSystemComponent_GetFXSystemAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameInstance_ReceiveShutdown);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameInstance_ReceiveInit);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameInstance_HandleTravelError);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameInstance_HandleNetworkError);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameInstance_DebugRemovePlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameInstance_DebugCreatePlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_UnRetainAllSoundsInSoundClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SuggestProjectileVelocity_MovingTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SuggestProjectileVelocity_CustomArc);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SpawnSoundAttached);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SpawnSoundAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SpawnSound2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SpawnForceFeedbackAttached);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SpawnForceFeedbackAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SpawnEmitterAttached);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SpawnEmitterAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SpawnDecalAttached);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SpawnDecalAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetViewportMouseCaptureMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetSubtitlesEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetSoundMixClassOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetSoundClassDistanceScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetPlayerPlatformUserId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetPlayerControllerID);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetMaxAudioChannelsScaled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetGlobalTimeDilation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetGlobalPitchModulation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetGlobalListenerFocusParameters);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetGamePaused);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetForceDisableSplitscreen);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetEnableWorldRendering);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetBaseSoundMix);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SetActiveSpatialPluginByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_SaveGameToSlot);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_RemovePlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_RebaseZeroOriginOntoLocal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_RebaseLocalOriginOntoZero);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_PushSoundMixModifier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_PrimeSound);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_PrimeAllSoundsInSoundClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_PopSoundMixModifier);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_PlayWorldCameraShake);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_PlaySoundAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_PlaySound2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_OpenLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_ObjectIsA);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_LoadGameFromSlot);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_IsSplitscreenForceDisabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_IsGamePaused);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_IsAnyLocalPlayerCameraWithinRange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_HasOption);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_HasLaunchOption);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GrassOverlappingSphereCount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetWorldDeltaSeconds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetViewportMouseCaptureMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetUnpausedTimeSeconds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetTimeSeconds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetStreamingLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetRealTimeSeconds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetPlayerState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetPlayerPawn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetPlayerControllerID);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetPlayerControllerFromPlatformUser);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetPlayerControllerFromID);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetPlayerCharacter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetPlayerCameraManager);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetObjectClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetNumPlayerStates);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetNumPlayerControllers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetNumLocalPlayerControllers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetMaxAudioChannelCount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetIntOption);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetGlobalTimeDilation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetGameState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetGameMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetGameInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetEnableWorldRendering);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetCurrentReverbEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetClosestListenerLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetAudioTimeSeconds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetActorOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetActiveSpatialPluginName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_GetAccurateRealTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_FlushLevelStreaming);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_EnableLiveStreaming);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_DoesSaveGameExist);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_DeleteGameInSlot);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_DeactivateReverbEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_CreateSound2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_CreateSaveGameObject);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_CreatePlayerFromPlatformUser);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_CreatePlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_ClearSoundMixModifiers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_ClearSoundMixClassOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_CancelAsyncLoading);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_AreSubtitlesEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_AreAnyListenersWithinRange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_ApplyDamage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_AnnounceAccessibleString);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameplayStatics_ActivateReverbEffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_ValidateSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SupportsHDRDisplayOutput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetVSyncEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetVisualEffectQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetViewDistanceQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetToDefaults);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetTextureQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetShadowQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetShadingQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetResolutionScaleValueEx);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetResolutionScaleNormalized);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetReflectionQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetPostProcessingQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetOverallScalabilityLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetGlobalIlluminationQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetFullscreenMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetFrameRateLimit);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetFoliageQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetDynamicResolutionEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetBenchmarkFallbackValues);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetAudioQualityLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SetAntiAliasingQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_SaveSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_RunHardwareBenchmark);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_RevertVideoMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_ResetToCurrentSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_LoadSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_IsVSyncEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_IsVSyncDirty);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_IsScreenResolutionDirty);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_IsHDREnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_IsFullscreenModeDirty);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_IsDynamicResolutionEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_IsDynamicResolutionDirty);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_IsDirty);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetVisualEffectQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetViewDistanceQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetTextureQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetSyncInterval);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetShadowQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetShadingQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetResolutionScaleNormalized);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetResolutionScaleInformationEx);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetReflectionQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetRecommendedResolutionScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetPreferredFullscreenMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetPostProcessingQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetOverallScalabilityLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetLastConfirmedFullscreenMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetGlobalIlluminationQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetGameUserSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetFullscreenMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetFrameRateLimit);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetFramePace);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetFoliageQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetDefaultWindowMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetDefaultResolutionScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetCurrentHDRDisplayNits);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetAudioQualityLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_GetAntiAliasingQuality);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_EnableHDRDisplayOutput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_ConfirmVideoMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_ApplySettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_ApplyResolutionSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_ApplyNonResolutionSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameUserSettings_ApplyHardwareBenchmarkResults);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameViewportClient_SSSwapControllers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UGameViewportClient_SetConsoleTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHealthSnapshotBlueprintLibrary_StopPerformanceSnapshots);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHealthSnapshotBlueprintLibrary_StartPerformanceSnapshots);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHealthSnapshotBlueprintLibrary_LogPerformanceSnapshot);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHeterogeneousVolumeComponent_SetStreamingMipBias);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHeterogeneousVolumeComponent_SetStartFrame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHeterogeneousVolumeComponent_SetPlaying);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHeterogeneousVolumeComponent_SetLooping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHeterogeneousVolumeComponent_SetFrameRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHeterogeneousVolumeComponent_SetFrame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHeterogeneousVolumeComponent_SetEndFrame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UHeterogeneousVolumeComponent_Play);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UImportanceSamplingLibrary_RandomSobolFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UImportanceSamplingLibrary_RandomSobolCell3D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UImportanceSamplingLibrary_NextSobolFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UImportanceSamplingLibrary_NextSobolCell3D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputDeviceLibrary_PlatformUserId_None);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputDeviceLibrary_NotEqual_PlatformUserId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputDeviceLibrary_IsValidPlatformId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputDeviceLibrary_IsUnpairedUserId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputDeviceLibrary_GetUserForUnpairedInputDevices);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputDeviceLibrary_GetPrimaryPlatformUser);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputDeviceLibrary_GetPlayerControllerFromPlatformUser);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputDeviceLibrary_EqualEqual_PlatformUserId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputDeviceSubsystem_RemoveAllDeviceProperties);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputSettings_SaveKeyMappings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputSettings_GetInputSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInputSettings_ForceRebuildKeymaps);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInstancedStaticMeshComponent_SetNumCustomDataFloats);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInstancedStaticMeshComponent_SetLODDistanceScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInstancedStaticMeshComponent_SetCustomDataValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInstancedStaticMeshComponent_SetCullDistances);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInstancedStaticMeshComponent_RemoveInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInstancedStaticMeshComponent_IsValidInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInstancedStaticMeshComponent_GetLODDistanceScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInstancedStaticMeshComponent_GetInstanceCount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInstancedStaticMeshComponent_GetCullDistances);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInstancedStaticMeshComponent_ClearInstances);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInterpToMovementComponent_RestartMovement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInterpToMovementComponent_ResetControlPoints);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInterpToMovementComponent_FinaliseControlPoints);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UInterpToMovementComponent_AddControlPointPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetGuidLibrary_Parse_StringToGuid);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetGuidLibrary_NotEqual_GuidGuid);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetGuidLibrary_NewGuid);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetGuidLibrary_IsValid_Guid);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetGuidLibrary_Invalidate_Guid);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetGuidLibrary_EqualEqual_GuidGuid);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetInputLibrary_CalibrateTilt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetInternationalizationLibrary_SetCurrentLocale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetInternationalizationLibrary_SetCurrentLanguageAndLocale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetInternationalizationLibrary_SetCurrentLanguage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetInternationalizationLibrary_SetCurrentCulture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetInternationalizationLibrary_SetCurrentAssetGroupCulture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetInternationalizationLibrary_ClearCurrentAssetGroupCulture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMaterialLibrary_SetVectorParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMaterialLibrary_SetScalarParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMaterialLibrary_GetVectorParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMaterialLibrary_GetScalarParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMaterialLibrary_CreateDynamicMaterialInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Xor_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Xor_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Wrap);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_WeightedMovingAverage_FVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_WeightedMovingAverage_FRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_WeightedMovingAverage_Float);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_VSizeXYSquared);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_VSizeXY);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_VSizeSquared);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_VSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_VLerp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_VInterpTo_Constant);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_VInterpTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Zero);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Up);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_UnwindEuler);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_ToRadians);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_ToDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_SnappedToGrid);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_SlerpVectorToDirection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_SlerpNormals);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Set);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Right);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Reciprocal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_ProjectOnToNormal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_One);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_NormalUnsafe);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Normalize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Normal2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Left);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_IsZero);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_IsUnit);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_IsUniform);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_IsNormal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_IsNearlyZero);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_IsNAN);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_HeadingAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_GetSignVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_GetProjection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_GetAbsMin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_GetAbsMax);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_GetAbs);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Forward);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Down);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_DistanceSquared);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Distance2DSquared);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Distance2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Distance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_CosineAngle2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_ComponentMin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_ComponentMax);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_ClampSizeMax2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_ClampSizeMax);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_ClampSize2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_BoundedToCube);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_BoundedToBox);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Backward);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_Assign);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Vector_AddBounded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Tan);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Subtract_VectorVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Subtract_VectorInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Subtract_VectorFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Subtract_LinearColorLinearColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Subtract_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Subtract_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Subtract_DoubleDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Subtract_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Square);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Sqrt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Sin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SignOfInteger64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SignOfInteger);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SignOfFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SelectVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SelectRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SelectObject);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SelectName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SelectInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SelectFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SelectColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SelectClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_SafeDivide);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Round64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Round);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RotatorFromAxisAndAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RotateAngleAxis);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RLerp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RInterpTo_Constant);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RInterpTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RGBToHSV_Vector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RGBToHSV);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RGBLinearToHSV);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomUnitVectorInEllipticalConeInRadians);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomUnitVectorInEllipticalConeInDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomUnitVectorInConeInRadians);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomUnitVectorInConeInDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomUnitVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomPointInBoundingBox);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomIntegerInRange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomInteger64InRange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomInteger64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomInteger);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomFloatInRange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomBoolWithWeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RandomBool);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_RadiansToDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_ProjectVectorOnToVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_ProjectVectorOnToPlane);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_ProjectPointOnToPlane);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_PerlinNoise1D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Percent_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Percent_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Percent_FloatFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Percent_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Or_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Or_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqualExactly_VectorVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_VectorVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_RotatorRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_ObjectObject);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_NameName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_LinearColorLinearColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_DoubleDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_ClassClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NotEqual_BoolBool);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Not_PreBool);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Not_Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Not_Int);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NormalizeToRange);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NormalizedDeltaRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NormalizeAxis);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Normal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NegateVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NegateRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_NearlyEqual_FloatFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MultiplyMultiply_FloatFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MultiplyByPi);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_VectorVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_VectorInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_VectorFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_RotatorInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_RotatorFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_LinearColorLinearColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_LinearColorFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_IntFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_DoubleDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Multiply_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MirrorVectorByNormal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MinInt64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Min);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MaxInt64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Max);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MapRangeUnclamped);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MapRangeClamped);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotFromZY);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotFromZX);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotFromZ);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotFromYZ);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotFromYX);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotFromY);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotFromXZ);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotFromXY);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotFromX);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeRotationFromAxes);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakePulsatingValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeFrameRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_MakeColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Loge);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Log);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinePlaneIntersection_OriginNormal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColorLerpUsingHSV);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColorLerp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_Yellow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_White);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_Transparent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_ToRGBE);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_ToNewOpacity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_SetTemperature);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_SetRGBA);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_SetRandomHue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_SetFromSRGB);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_SetFromPow22);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_SetFromHSV);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_Set);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_Red);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_QuantizeRound);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_IsNearEqual);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_Green);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_Gray);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_GetMin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_GetMax);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_GetLuminance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_Distance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_Desaturated);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_Blue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LinearColor_Black);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LessLess_VectorRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LessEqual_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LessEqual_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LessEqual_DoubleDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_LessEqual_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Less_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Less_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Less_DoubleDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Less_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Lerp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_IsPointInBox);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_IsLeapYear);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_InRange_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_InRange_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_InRange_FloatFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Hypotenuse);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_HSVToRGBLinear);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_HSVToRGB_Vector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_HSVToRGB);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GridSnap_Float);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GreaterGreater_VectorRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GreaterEqual_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GreaterEqual_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GreaterEqual_DoubleDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GreaterEqual_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Greater_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Greater_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Greater_DoubleDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Greater_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetYawPitchFromVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetUpVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetTAU);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetSlopeDegreeAngles);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetRightVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetReflectionVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetPointDistanceToSegment);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetPointDistanceToLine);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetPI);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetMinElement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetMaxElement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetForwardVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetDirectionUnitVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_GetAxes);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FWrap);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FTrunc64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FTrunc);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Fraction);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FMod64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FMod);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FMin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FMax);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FixedTurn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FInterpTo_Constant);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FInterpTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FInterpEaseInOut);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FindNearestPointsOnLineSegments);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FindLookAtRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FindClosestPointOnSegment);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FindClosestPointOnLine);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FFloor64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FFloor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FClamp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FCeil64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_FCeil);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Exp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualExactly_VectorVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_VectorVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_RotatorRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_ObjectObject);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_NameName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_LinearColorLinearColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_DoubleDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_ClassClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_EqualEqual_BoolBool);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DynamicWeightedMovingAverage_FVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DynamicWeightedMovingAverage_FRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DynamicWeightedMovingAverage_Float);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Dot_VectorVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Divide_VectorVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Divide_VectorInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Divide_VectorFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Divide_LinearColorLinearColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Divide_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Divide_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Divide_DoubleDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Divide_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DegTan);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DegSin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DegreesToRadians);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DegCos);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DegAtan2);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DegAtan);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DegAsin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DegAcos);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DaysInYear);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_DaysInMonth);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Cross_VectorVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_CreateVectorFromYawPitch);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Cos);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_VectorToRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_VectorToLinearColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_RotatorToVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_LinearColorToVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_LinearColorToColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_IntToVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_IntToInt64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_IntToDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_IntToByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_IntToBool);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_Int64ToInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_Int64ToDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_Int64ToByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_DoubleToVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_DoubleToLinearColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_DoubleToInt64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_ColorToLinearColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_ByteToInt64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_ByteToInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_ByteToDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_BoolToInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_BoolToDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Conv_BoolToByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_ComposeRotators);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_ClassIsChildOf);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_ClampVectorSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_ClampInt64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_ClampAxis);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_ClampAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Clamp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_CInterpTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BreakVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BreakRotIntoAxes);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BreakRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BreakFrameRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BreakColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BooleanXOR);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BooleanOR);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BooleanNOR);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BooleanNAND);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BooleanAND);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BMin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_BMax);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Atan2);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Atan);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Asin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_And_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_And_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Add_VectorVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Add_VectorInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Add_VectorFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Add_LinearColorLinearColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Add_IntInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Add_Int64Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Add_DoubleDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Add_ByteByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Acos);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Abs_Int64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Abs_Int);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetMathLibrary_Abs);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_SetCastInsetShadowForAllAttachments);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ResizeRenderTarget2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_RenderTargetCreateStaticVolumeTextureEditorOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_RenderTargetCreateStaticTextureCubeEditorOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_RenderTargetCreateStaticTexture2DEditorOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_RenderTargetCreateStaticTexture2DArrayEditorOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ReleaseRenderTarget2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_RefreshPathTracingOutput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ReadRenderTargetUV);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ReadRenderTargetRawUV);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ReadRenderTargetRawPixel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ReadRenderTargetPixel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ImportFileAsTexture2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ExportTexture2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ExportRenderTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_EnablePathTracing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_DrawMaterialToRenderTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_CreateRenderTargetVolume);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_CreateRenderTarget2DArray);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_CreateRenderTarget2D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ConvertRenderTargetToTextureVolumeEditorOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ConvertRenderTargetToTextureCubeEditorOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ConvertRenderTargetToTexture2DEditorOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ConvertRenderTargetToTexture2DArrayEditorOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetRenderingLibrary_ClearRenderTarget2D);
    }
}
#if PLATFORM_WINDOWS
#pragma warning(pop)
#else
#pragma GCC diagnostic pop
#endif
// ReSharper restore all

