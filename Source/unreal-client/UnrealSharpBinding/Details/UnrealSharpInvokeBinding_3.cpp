/*
    MIT License

    Copyright (c) 2024 UnrealSharp

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    Project URL: https://github.com/bodong1987/UnrealSharp
*/
// ReSharper disable CommentTypo
// ***********************************************************************
// Author           : bodong
// ***********************************************************************
// <copyright file="UnrealSharpInvokeBinding_3.cpp">
//     Copyright (c) 2024 UnrealSharp. 
// <summary>
// This code file is automatically generated by UnrealSharpTool. 
// Manually modifying this file will lose the modifications at the next generate time. 
// </summary>
// ***********************************************************************
// These codes are automatically generated by UnrealSharpTool in order to realize fast function calls from C# to C++.
// Please do not modify this file manually.

// ReSharper disable all
#include "CoreMinimal.h"
#include "Misc/UnrealInteropFunctions.h"
#include "Misc/CSharpStructures.h"
#include "Components/SplineComponent.h"
#include "Components/SplineMeshComponent.h"
#include "Components/SpotLightComponent.h"
#include "Components/StaticMeshComponent.h"
#include "Components/StereoLayerComponent.h"
#include "Components/TextRenderComponent.h"
#include "Components/TimelineComponent.h"
#include "Components/VectorFieldComponent.h"
#include "Components/VolumetricCloudComponent.h"
#include "Components/WindDirectionalSourceComponent.h"
#include "Components/WorldPartitionStreamingSourceComponent.h"
#include "Elements/Framework/TypedElementCommonActions.h"
#include "Engine/StaticMesh.h"
#include "Engine/StreamableRenderAsset.h"
#include "Engine/Texture.h"
#include "Engine/TimecodeProvider.h"
#include "Engine/TwitterIntegrationBase.h"
#include "Engine/ViewportStatsSubsystem.h"
#include "Engine/World.h"
#include "GameFramework/SpringArmComponent.h"
#include "Net/VoiceConfig.h"
#include "SparseVolumeTexture/SparseVolumeTexture.h"
#include "UnrealSharpTestsBaseObjectInCpp.h"
#include "UnrealSharpTestsFunctionLibraryInCpp.h"
#include "WorldPartition/WorldPartitionSubsystem.h"

#if PLATFORM_WINDOWS
#pragma warning(push)
#pragma warning(disable:4996)
#else
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated"
#endif

namespace UnrealSharp::Bindings
{
    void USplineComponent_UpdateSpline(USplineComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->UpdateSpline();
    }

    void USplineComponent_SetUpVectorAtSplinePoint(USplineComponent* __this, int32 PointIndex, const FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->SetUpVectorAtSplinePoint(PointIndex, InUpVector, CoordinateSpace, bUpdateSpline);
    }

    void USplineComponent_SetUnselectedSplineSegmentColor(USplineComponent* __this, const FLinearColor& SegmentColor)
    {
        checkSlow(__this != nullptr);
        __this->SetUnselectedSplineSegmentColor(SegmentColor);
    }

    void USplineComponent_SetTangentsAtSplinePoint(USplineComponent* __this, int32 PointIndex, const FVector& InArriveTangent, const FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->SetTangentsAtSplinePoint(PointIndex, InArriveTangent, InLeaveTangent, CoordinateSpace, bUpdateSpline);
    }

    void USplineComponent_SetTangentColor(USplineComponent* __this, const FLinearColor& TangentColor)
    {
        checkSlow(__this != nullptr);
        __this->SetTangentColor(TangentColor);
    }

    void USplineComponent_SetTangentAtSplinePoint(USplineComponent* __this, int32 PointIndex, const FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->SetTangentAtSplinePoint(PointIndex, InTangent, CoordinateSpace, bUpdateSpline);
    }

    void USplineComponent_SetSplinePointType(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplinePointType::Type> Type, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->SetSplinePointType(PointIndex, Type, bUpdateSpline);
    }

    void USplineComponent_SetSelectedSplineSegmentColor(USplineComponent* __this, const FLinearColor& SegmentColor)
    {
        checkSlow(__this != nullptr);
        __this->SetSelectedSplineSegmentColor(SegmentColor);
    }

    void USplineComponent_SetScaleAtSplinePoint(USplineComponent* __this, int32 PointIndex, const FVector& InScaleVector, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->SetScaleAtSplinePoint(PointIndex, InScaleVector, bUpdateSpline);
    }

    void USplineComponent_SetRotationAtSplinePoint(USplineComponent* __this, int32 PointIndex, const FRotator& InRotation, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->SetRotationAtSplinePoint(PointIndex, InRotation, CoordinateSpace, bUpdateSpline);
    }

    void USplineComponent_SetLocationAtSplinePoint(USplineComponent* __this, int32 PointIndex, const FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->SetLocationAtSplinePoint(PointIndex, InLocation, CoordinateSpace, bUpdateSpline);
    }

    void USplineComponent_SetDrawDebug(USplineComponent* __this, bool bShow)
    {
        checkSlow(__this != nullptr);
        __this->SetDrawDebug(bShow);
    }

    void USplineComponent_SetDefaultUpVector(USplineComponent* __this, const FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace)
    {
        checkSlow(__this != nullptr);
        __this->SetDefaultUpVector(UpVector, CoordinateSpace);
    }

    void USplineComponent_SetClosedLoopAtPosition(USplineComponent* __this, bool bInClosedLoop, float Key, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->SetClosedLoopAtPosition(bInClosedLoop, Key, bUpdateSpline);
    }

    void USplineComponent_SetClosedLoop(USplineComponent* __this, bool bInClosedLoop, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->SetClosedLoop(bInClosedLoop, bUpdateSpline);
    }

    void USplineComponent_RemoveSplinePoint(USplineComponent* __this, int32 Index, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->RemoveSplinePoint(Index, bUpdateSpline);
    }

    void USplineComponent_IsClosedLoop(USplineComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsClosedLoop();
    }

    void USplineComponent_GetVectorPropertyAtSplinePoint(USplineComponent* __this, int32 Index, FName& PropertyName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetVectorPropertyAtSplinePoint(Index, PropertyName);
    }

    void USplineComponent_GetVectorPropertyAtSplineInputKey(USplineComponent* __this, float InKey, FName& PropertyName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetVectorPropertyAtSplineInputKey(InKey, PropertyName);
    }

    void USplineComponent_GetUpVectorAtTime(USplineComponent* __this, float Time, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUseConstantVelocity, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUpVectorAtTime(Time, CoordinateSpace, bUseConstantVelocity);
    }

    void USplineComponent_GetUpVectorAtSplinePoint(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUpVectorAtSplinePoint(PointIndex, CoordinateSpace);
    }

    void USplineComponent_GetUpVectorAtSplineInputKey(USplineComponent* __this, float InKey, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUpVectorAtSplineInputKey(InKey, CoordinateSpace);
    }

    void USplineComponent_GetUpVectorAtDistanceAlongSpline(USplineComponent* __this, float Distance, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUpVectorAtDistanceAlongSpline(Distance, CoordinateSpace);
    }

    void USplineComponent_GetTimeAtDistanceAlongSpline(USplineComponent* __this, float Distance, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTimeAtDistanceAlongSpline(Distance);
    }

    void USplineComponent_GetTangentAtTime(USplineComponent* __this, float Time, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUseConstantVelocity, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTangentAtTime(Time, CoordinateSpace, bUseConstantVelocity);
    }

    void USplineComponent_GetTangentAtSplinePoint(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTangentAtSplinePoint(PointIndex, CoordinateSpace);
    }

    void USplineComponent_GetTangentAtSplineInputKey(USplineComponent* __this, float InKey, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTangentAtSplineInputKey(InKey, CoordinateSpace);
    }

    void USplineComponent_GetTangentAtDistanceAlongSpline(USplineComponent* __this, float Distance, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTangentAtDistanceAlongSpline(Distance, CoordinateSpace);
    }

    void USplineComponent_GetSplinePointType(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplinePointType::Type>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSplinePointType(PointIndex);
    }

    void USplineComponent_GetSplineLength(USplineComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSplineLength();
    }

    void USplineComponent_GetScaleAtTime(USplineComponent* __this, float Time, bool bUseConstantVelocity, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScaleAtTime(Time, bUseConstantVelocity);
    }

    void USplineComponent_GetScaleAtSplinePoint(USplineComponent* __this, int32 PointIndex, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScaleAtSplinePoint(PointIndex);
    }

    void USplineComponent_GetScaleAtSplineInputKey(USplineComponent* __this, float InKey, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScaleAtSplineInputKey(InKey);
    }

    void USplineComponent_GetScaleAtDistanceAlongSpline(USplineComponent* __this, float Distance, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScaleAtDistanceAlongSpline(Distance);
    }

    void USplineComponent_GetRotationAtTime(USplineComponent* __this, float Time, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUseConstantVelocity, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRotationAtTime(Time, CoordinateSpace, bUseConstantVelocity);
    }

    void USplineComponent_GetRotationAtSplinePoint(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRotationAtSplinePoint(PointIndex, CoordinateSpace);
    }

    void USplineComponent_GetRotationAtSplineInputKey(USplineComponent* __this, float InKey, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRotationAtSplineInputKey(InKey, CoordinateSpace);
    }

    void USplineComponent_GetRotationAtDistanceAlongSpline(USplineComponent* __this, float Distance, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRotationAtDistanceAlongSpline(Distance, CoordinateSpace);
    }

    void USplineComponent_GetRollAtTime(USplineComponent* __this, float Time, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUseConstantVelocity, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRollAtTime(Time, CoordinateSpace, bUseConstantVelocity);
    }

    void USplineComponent_GetRollAtSplinePoint(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRollAtSplinePoint(PointIndex, CoordinateSpace);
    }

    void USplineComponent_GetRollAtSplineInputKey(USplineComponent* __this, float InKey, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRollAtSplineInputKey(InKey, CoordinateSpace);
    }

    void USplineComponent_GetRollAtDistanceAlongSpline(USplineComponent* __this, float Distance, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRollAtDistanceAlongSpline(Distance, CoordinateSpace);
    }

    void USplineComponent_GetRightVectorAtTime(USplineComponent* __this, float Time, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUseConstantVelocity, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRightVectorAtTime(Time, CoordinateSpace, bUseConstantVelocity);
    }

    void USplineComponent_GetRightVectorAtSplinePoint(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRightVectorAtSplinePoint(PointIndex, CoordinateSpace);
    }

    void USplineComponent_GetRightVectorAtSplineInputKey(USplineComponent* __this, float InKey, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRightVectorAtSplineInputKey(InKey, CoordinateSpace);
    }

    void USplineComponent_GetRightVectorAtDistanceAlongSpline(USplineComponent* __this, float Distance, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRightVectorAtDistanceAlongSpline(Distance, CoordinateSpace);
    }

    void USplineComponent_GetNumberOfSplineSegments(USplineComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumberOfSplineSegments();
    }

    void USplineComponent_GetNumberOfSplinePoints(USplineComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumberOfSplinePoints();
    }

    void USplineComponent_GetLocationAtTime(USplineComponent* __this, float Time, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUseConstantVelocity, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLocationAtTime(Time, CoordinateSpace, bUseConstantVelocity);
    }

    void USplineComponent_GetLocationAtSplinePoint(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLocationAtSplinePoint(PointIndex, CoordinateSpace);
    }

    void USplineComponent_GetLocationAtSplineInputKey(USplineComponent* __this, float InKey, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLocationAtSplineInputKey(InKey, CoordinateSpace);
    }

    void USplineComponent_GetLocationAtDistanceAlongSpline(USplineComponent* __this, float Distance, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLocationAtDistanceAlongSpline(Distance, CoordinateSpace);
    }

    void USplineComponent_GetLocationAndTangentAtSplinePoint(USplineComponent* __this, int32 PointIndex, FVector& Location, FVector& Tangent, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace)
    {
        checkSlow(__this != nullptr);
        __this->GetLocationAndTangentAtSplinePoint(PointIndex, Location, Tangent, CoordinateSpace);
    }

    void USplineComponent_GetLeaveTangentAtSplinePoint(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLeaveTangentAtSplinePoint(PointIndex, CoordinateSpace);
    }

    void USplineComponent_GetInputKeyValueAtSplinePoint(USplineComponent* __this, int32 PointIndex, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetInputKeyValueAtSplinePoint(PointIndex);
    }

    void USplineComponent_GetInputKeyValueAtDistanceAlongSpline(USplineComponent* __this, float Distance, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetInputKeyValueAtDistanceAlongSpline(Distance);
    }

    void USplineComponent_GetFloatPropertyAtSplinePoint(USplineComponent* __this, int32 Index, FName& PropertyName, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFloatPropertyAtSplinePoint(Index, PropertyName);
    }

    void USplineComponent_GetFloatPropertyAtSplineInputKey(USplineComponent* __this, float InKey, FName& PropertyName, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFloatPropertyAtSplineInputKey(InKey, PropertyName);
    }

    void USplineComponent_GetDistanceAlongSplineAtSplinePoint(USplineComponent* __this, int32 PointIndex, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDistanceAlongSplineAtSplinePoint(PointIndex);
    }

    void USplineComponent_GetDistanceAlongSplineAtSplineInputKey(USplineComponent* __this, float InKey, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDistanceAlongSplineAtSplineInputKey(InKey);
    }

    void USplineComponent_GetDistanceAlongSplineAtLocation(USplineComponent* __this, const FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDistanceAlongSplineAtLocation(InLocation, CoordinateSpace);
    }

    void USplineComponent_GetDirectionAtTime(USplineComponent* __this, float Time, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUseConstantVelocity, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDirectionAtTime(Time, CoordinateSpace, bUseConstantVelocity);
    }

    void USplineComponent_GetDirectionAtSplinePoint(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDirectionAtSplinePoint(PointIndex, CoordinateSpace);
    }

    void USplineComponent_GetDirectionAtSplineInputKey(USplineComponent* __this, float InKey, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDirectionAtSplineInputKey(InKey, CoordinateSpace);
    }

    void USplineComponent_GetDirectionAtDistanceAlongSpline(USplineComponent* __this, float Distance, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDirectionAtDistanceAlongSpline(Distance, CoordinateSpace);
    }

    void USplineComponent_GetDefaultUpVector(USplineComponent* __this, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDefaultUpVector(CoordinateSpace);
    }

    void USplineComponent_GetArriveTangentAtSplinePoint(USplineComponent* __this, int32 PointIndex, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetArriveTangentAtSplinePoint(PointIndex, CoordinateSpace);
    }

    void USplineComponent_FindUpVectorClosestToWorldLocation(USplineComponent* __this, const FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindUpVectorClosestToWorldLocation(WorldLocation, CoordinateSpace);
    }

    void USplineComponent_FindTangentClosestToWorldLocation(USplineComponent* __this, const FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindTangentClosestToWorldLocation(WorldLocation, CoordinateSpace);
    }

    void USplineComponent_FindScaleClosestToWorldLocation(USplineComponent* __this, const FVector& WorldLocation, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindScaleClosestToWorldLocation(WorldLocation);
    }

    void USplineComponent_FindRotationClosestToWorldLocation(USplineComponent* __this, const FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindRotationClosestToWorldLocation(WorldLocation, CoordinateSpace);
    }

    void USplineComponent_FindRollClosestToWorldLocation(USplineComponent* __this, const FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindRollClosestToWorldLocation(WorldLocation, CoordinateSpace);
    }

    void USplineComponent_FindRightVectorClosestToWorldLocation(USplineComponent* __this, const FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindRightVectorClosestToWorldLocation(WorldLocation, CoordinateSpace);
    }

    void USplineComponent_FindLocationClosestToWorldLocation(USplineComponent* __this, const FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindLocationClosestToWorldLocation(WorldLocation, CoordinateSpace);
    }

    void USplineComponent_FindInputKeyClosestToWorldLocation(USplineComponent* __this, const FVector& WorldLocation, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindInputKeyClosestToWorldLocation(WorldLocation);
    }

    void USplineComponent_FindDirectionClosestToWorldLocation(USplineComponent* __this, const FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindDirectionClosestToWorldLocation(WorldLocation, CoordinateSpace);
    }

    void USplineComponent_ClearSplinePoints(USplineComponent* __this, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->ClearSplinePoints(bUpdateSpline);
    }

    void USplineComponent_AddSplinePointAtIndex(USplineComponent* __this, const FVector& Position, int32 Index, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->AddSplinePointAtIndex(Position, Index, CoordinateSpace, bUpdateSpline);
    }

    void USplineComponent_AddSplinePoint(USplineComponent* __this, const FVector& Position, TEnumAsByte<ESplineCoordinateSpace::Type> CoordinateSpace, bool bUpdateSpline)
    {
        checkSlow(__this != nullptr);
        __this->AddSplinePoint(Position, CoordinateSpace, bUpdateSpline);
    }

    void USplineMeshComponent_UpdateMesh(USplineMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->UpdateMesh();
    }

    void USplineMeshComponent_SetStartTangent(USplineMeshComponent* __this, FVector& StartTangent, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetStartTangent(StartTangent, bUpdateMesh);
    }

    void USplineMeshComponent_SetStartRollDegrees(USplineMeshComponent* __this, float StartRollDegrees, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetStartRollDegrees(StartRollDegrees, bUpdateMesh);
    }

    void USplineMeshComponent_SetStartRoll(USplineMeshComponent* __this, float StartRoll, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetStartRoll(StartRoll, bUpdateMesh);
    }

    void USplineMeshComponent_SetStartPosition(USplineMeshComponent* __this, FVector& StartPos, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetStartPosition(StartPos, bUpdateMesh);
    }

    void USplineMeshComponent_SetStartAndEnd(USplineMeshComponent* __this, FVector& StartPos, FVector& StartTangent, FVector& EndPos, FVector& EndTangent, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetStartAndEnd(StartPos, StartTangent, EndPos, EndTangent, bUpdateMesh);
    }

    void USplineMeshComponent_SetSplineUpDir(USplineMeshComponent* __this, const FVector& InSplineUpDir, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetSplineUpDir(InSplineUpDir, bUpdateMesh);
    }

    void USplineMeshComponent_SetForwardAxis(USplineMeshComponent* __this, TEnumAsByte<ESplineMeshAxis::Type> InForwardAxis, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetForwardAxis(InForwardAxis, bUpdateMesh);
    }

    void USplineMeshComponent_SetEndTangent(USplineMeshComponent* __this, FVector& EndTangent, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetEndTangent(EndTangent, bUpdateMesh);
    }

    void USplineMeshComponent_SetEndRollDegrees(USplineMeshComponent* __this, float EndRollDegrees, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetEndRollDegrees(EndRollDegrees, bUpdateMesh);
    }

    void USplineMeshComponent_SetEndRoll(USplineMeshComponent* __this, float EndRoll, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetEndRoll(EndRoll, bUpdateMesh);
    }

    void USplineMeshComponent_SetEndPosition(USplineMeshComponent* __this, FVector& EndPos, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetEndPosition(EndPos, bUpdateMesh);
    }

    void USplineMeshComponent_SetBoundaryMin(USplineMeshComponent* __this, float InBoundaryMin, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetBoundaryMin(InBoundaryMin, bUpdateMesh);
    }

    void USplineMeshComponent_SetBoundaryMax(USplineMeshComponent* __this, float InBoundaryMax, bool bUpdateMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetBoundaryMax(InBoundaryMax, bUpdateMesh);
    }

    void USplineMeshComponent_GetStartTangent(USplineMeshComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetStartTangent();
    }

    void USplineMeshComponent_GetStartRoll(USplineMeshComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetStartRoll();
    }

    void USplineMeshComponent_GetStartPosition(USplineMeshComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetStartPosition();
    }

    void USplineMeshComponent_GetSplineUpDir(USplineMeshComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSplineUpDir();
    }

    void USplineMeshComponent_GetForwardAxis(USplineMeshComponent* __this, TEnumAsByte<ESplineMeshAxis::Type>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetForwardAxis();
    }

    void USplineMeshComponent_GetEndTangent(USplineMeshComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetEndTangent();
    }

    void USplineMeshComponent_GetEndRoll(USplineMeshComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetEndRoll();
    }

    void USplineMeshComponent_GetEndPosition(USplineMeshComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetEndPosition();
    }

    void USplineMeshComponent_GetBoundaryMin(USplineMeshComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBoundaryMin();
    }

    void USplineMeshComponent_GetBoundaryMax(USplineMeshComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBoundaryMax();
    }

    void USpotLightComponent_SetOuterConeAngle(USpotLightComponent* __this, float NewOuterConeAngle)
    {
        checkSlow(__this != nullptr);
        __this->SetOuterConeAngle(NewOuterConeAngle);
    }

    void USpotLightComponent_SetInnerConeAngle(USpotLightComponent* __this, float NewInnerConeAngle)
    {
        checkSlow(__this != nullptr);
        __this->SetInnerConeAngle(NewInnerConeAngle);
    }

    void USpringArmComponent_IsCollisionFixApplied(USpringArmComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsCollisionFixApplied();
    }

    void USpringArmComponent_GetUnfixedCameraPosition(USpringArmComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUnfixedCameraPosition();
    }

    void USpringArmComponent_GetTargetRotation(USpringArmComponent* __this, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTargetRotation();
    }

    void UStaticMesh_SetMinimumLODForPlatform(UStaticMesh* __this, const FName& PlatformName, int32 InMinLOD)
    {
        checkSlow(__this != nullptr);
        __this->SetMinimumLODForPlatform(PlatformName, InMinLOD);
    }

    void UStaticMesh_RemoveSocket(UStaticMesh* __this, UStaticMeshSocket* Socket)
    {
        checkSlow(__this != nullptr);
        __this->RemoveSocket(Socket);
    }

    void UStaticMesh_GetNumTriangles(UStaticMesh* __this, int32 LODIndex, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumTriangles(LODIndex);
    }

    void UStaticMesh_GetNumSections(UStaticMesh* __this, int32 InLOD, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumSections(InLOD);
    }

    void UStaticMesh_GetNumLODs(UStaticMesh* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumLODs();
    }

    void UStaticMesh_GetMinimumLODForQualityLevel(UStaticMesh* __this, const FName& QualityLevel, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMinimumLODForQualityLevel(QualityLevel);
    }

    void UStaticMesh_GetMinimumLODForPlatform(UStaticMesh* __this, const FName& PlatformName, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMinimumLODForPlatform(PlatformName);
    }

    void UStaticMesh_GetMaterialIndex(UStaticMesh* __this, FName& MaterialSlotName, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaterialIndex(MaterialSlotName);
    }

    void UStaticMesh_GetMaterial(UStaticMesh* __this, int32 MaterialIndex, UMaterialInterface*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaterial(MaterialIndex);
    }

    void UStaticMesh_FindSocket(UStaticMesh* __this, FName& InSocketName, UStaticMeshSocket*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindSocket(InSocketName);
    }

    void UStaticMesh_AddSocket(UStaticMesh* __this, UStaticMeshSocket* Socket)
    {
        checkSlow(__this != nullptr);
        __this->AddSocket(Socket);
    }

    void UStaticMesh_AddMaterial(UStaticMesh* __this, UMaterialInterface* Material, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddMaterial(Material);
    }

    void UStaticMesh_HasAssetUserDataOfClass(UStaticMesh* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void UStaticMesh_GetAssetUserDataOfClass(UStaticMesh* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void UStaticMesh_AddAssetUserDataOfClass(UStaticMesh* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void UStaticMeshComponent_UpdateInitialEvaluateWorldPositionOffset(UStaticMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->UpdateInitialEvaluateWorldPositionOffset();
    }

    void UStaticMeshComponent_SetWorldPositionOffsetDisableDistance(UStaticMeshComponent* __this, int32 NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetWorldPositionOffsetDisableDistance(NewValue);
    }

    void UStaticMeshComponent_SetStaticMesh(UStaticMeshComponent* __this, UStaticMesh* NewMesh, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->SetStaticMesh(NewMesh);
    }

    void UStaticMeshComponent_SetReverseCulling(UStaticMeshComponent* __this, bool ReverseCulling)
    {
        checkSlow(__this != nullptr);
        __this->SetReverseCulling(ReverseCulling);
    }

    void UStaticMeshComponent_SetForcedLodModel(UStaticMeshComponent* __this, int32 NewForcedLodModel)
    {
        checkSlow(__this != nullptr);
        __this->SetForcedLodModel(NewForcedLodModel);
    }

    void UStaticMeshComponent_SetForceDisableNanite(UStaticMeshComponent* __this, bool bInForceDisableNanite)
    {
        checkSlow(__this != nullptr);
        __this->SetForceDisableNanite(bInForceDisableNanite);
    }

    void UStaticMeshComponent_SetEvaluateWorldPositionOffsetInRayTracing(UStaticMeshComponent* __this, bool NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetEvaluateWorldPositionOffsetInRayTracing(NewValue);
    }

    void UStaticMeshComponent_SetEvaluateWorldPositionOffset(UStaticMeshComponent* __this, bool NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetEvaluateWorldPositionOffset(NewValue);
    }

    void UStaticMeshComponent_SetDistanceFieldSelfShadowBias(UStaticMeshComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetDistanceFieldSelfShadowBias(NewValue);
    }

    void UStaticMeshComponent_OnRep_StaticMesh(UStaticMeshComponent* __this, UStaticMesh* OldStaticMesh)
    {
        checkSlow(__this != nullptr);
        __this->OnRep_StaticMesh(OldStaticMesh);
    }

    void UStaticMeshComponent_GetLocalBounds(UStaticMeshComponent* __this, FVector& Min, FVector& Max)
    {
        checkSlow(__this != nullptr);
        __this->GetLocalBounds(Min, Max);
    }

    void UStaticMeshComponent_GetInitialEvaluateWorldPositionOffset(UStaticMeshComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetInitialEvaluateWorldPositionOffset();
    }

    void UStereoLayerComponent_SetTexture(UStereoLayerComponent* __this, UTexture* InTexture)
    {
        checkSlow(__this != nullptr);
        __this->SetTexture(InTexture);
    }

    void UStereoLayerComponent_SetPriority(UStereoLayerComponent* __this, int32 InPriority)
    {
        checkSlow(__this != nullptr);
        __this->SetPriority(InPriority);
    }

    void UStereoLayerComponent_SetLeftTexture(UStereoLayerComponent* __this, UTexture* InTexture)
    {
        checkSlow(__this != nullptr);
        __this->SetLeftTexture(InTexture);
    }

    void UStereoLayerComponent_MarkTextureForUpdate(UStereoLayerComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->MarkTextureForUpdate();
    }

    void UStereoLayerComponent_GetTexture(UStereoLayerComponent* __this, UTexture*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTexture();
    }

    void UStereoLayerComponent_GetPriority(UStereoLayerComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPriority();
    }

    void UStereoLayerComponent_GetLeftTexture(UStereoLayerComponent* __this, UTexture*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLeftTexture();
    }

    void UStereoLayerShapeCylinder_SetRadius(UStereoLayerShapeCylinder* __this, float InRadius)
    {
        checkSlow(__this != nullptr);
        __this->SetRadius(InRadius);
    }

    void UStereoLayerShapeCylinder_SetOverlayArc(UStereoLayerShapeCylinder* __this, float InOverlayArc)
    {
        checkSlow(__this != nullptr);
        __this->SetOverlayArc(InOverlayArc);
    }

    void UStereoLayerShapeCylinder_SetHeight(UStereoLayerShapeCylinder* __this, int32 InHeight)
    {
        checkSlow(__this != nullptr);
        __this->SetHeight(InHeight);
    }

    void UStreamableRenderAsset_SetForceMipLevelsToBeResident(UStreamableRenderAsset* __this, float Seconds, int32 CinematicLODGroupMask)
    {
        checkSlow(__this != nullptr);
        __this->SetForceMipLevelsToBeResident(Seconds, CinematicLODGroupMask);
    }

    void UStreamableSparseVolumeTexture_HasAssetUserDataOfClass(UStreamableSparseVolumeTexture* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void UStreamableSparseVolumeTexture_GetAssetUserDataOfClass(UStreamableSparseVolumeTexture* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void UStreamableSparseVolumeTexture_AddAssetUserDataOfClass(UStreamableSparseVolumeTexture* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void UTextRenderComponent_SetYScale(UTextRenderComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetYScale(Value);
    }

    void UTextRenderComponent_SetXScale(UTextRenderComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetXScale(Value);
    }

    void UTextRenderComponent_SetWorldSize(UTextRenderComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetWorldSize(Value);
    }

    void UTextRenderComponent_SetVertSpacingAdjust(UTextRenderComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetVertSpacingAdjust(Value);
    }

    void UTextRenderComponent_SetVerticalAlignment(UTextRenderComponent* __this, TEnumAsByte<EVerticalTextAligment> Value)
    {
        checkSlow(__this != nullptr);
        __this->SetVerticalAlignment(Value);
    }

    void UTextRenderComponent_SetTextRenderColor(UTextRenderComponent* __this, FColor& Value)
    {
        checkSlow(__this != nullptr);
        __this->SetTextRenderColor(Value);
    }

    void UTextRenderComponent_SetTextMaterial(UTextRenderComponent* __this, UMaterialInterface* Material)
    {
        checkSlow(__this != nullptr);
        __this->SetTextMaterial(Material);
    }

    void UTextRenderComponent_SetHorizSpacingAdjust(UTextRenderComponent* __this, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetHorizSpacingAdjust(Value);
    }

    void UTextRenderComponent_SetHorizontalAlignment(UTextRenderComponent* __this, TEnumAsByte<EHorizTextAligment> Value)
    {
        checkSlow(__this != nullptr);
        __this->SetHorizontalAlignment(Value);
    }

    void UTextRenderComponent_SetFont(UTextRenderComponent* __this, UFont* Value)
    {
        checkSlow(__this != nullptr);
        __this->SetFont(Value);
    }

    void UTextRenderComponent_GetTextWorldSize(UTextRenderComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTextWorldSize();
    }

    void UTextRenderComponent_GetTextLocalSize(UTextRenderComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTextLocalSize();
    }

    void UTexture_AreDownscalePropertiesEditable(UTexture* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AreDownscalePropertiesEditable();
    }

    void UTexture_HasAssetUserDataOfClass(UTexture* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void UTexture_GetAssetUserDataOfClass(UTexture* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void UTexture_AddAssetUserDataOfClass(UTexture* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void UTimecodeProvider_GetTimecode(UTimecodeProvider* __this, FTimecode& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTimecode();
    }

    void UTimecodeProvider_GetSynchronizationState(UTimecodeProvider* __this, ETimecodeProviderSynchronizationState& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSynchronizationState();
    }

    void UTimecodeProvider_GetFrameRate(UTimecodeProvider* __this, FFrameRate& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFrameRate();
    }

    void UTimecodeProvider_GetDelayedTimecode(UTimecodeProvider* __this, FTimecode& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDelayedTimecode();
    }

    void UTimecodeProvider_FetchAndUpdate(UTimecodeProvider* __this)
    {
        checkSlow(__this != nullptr);
        __this->FetchAndUpdate();
    }

    void UTimelineComponent_Stop(UTimelineComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->Stop();
    }

    void UTimelineComponent_SetVectorCurve(UTimelineComponent* __this, UCurveVector* NewVectorCurve, FName& VectorTrackName)
    {
        checkSlow(__this != nullptr);
        __this->SetVectorCurve(NewVectorCurve, VectorTrackName);
    }

    void UTimelineComponent_SetTimelineLengthMode(UTimelineComponent* __this, TEnumAsByte<ETimelineLengthMode> NewLengthMode)
    {
        checkSlow(__this != nullptr);
        __this->SetTimelineLengthMode(NewLengthMode);
    }

    void UTimelineComponent_SetTimelineLength(UTimelineComponent* __this, float NewLength)
    {
        checkSlow(__this != nullptr);
        __this->SetTimelineLength(NewLength);
    }

    void UTimelineComponent_SetPlayRate(UTimelineComponent* __this, float NewRate)
    {
        checkSlow(__this != nullptr);
        __this->SetPlayRate(NewRate);
    }

    void UTimelineComponent_SetPlaybackPosition(UTimelineComponent* __this, float NewPosition, bool bFireEvents, bool bFireUpdate)
    {
        checkSlow(__this != nullptr);
        __this->SetPlaybackPosition(NewPosition, bFireEvents, bFireUpdate);
    }

    void UTimelineComponent_SetNewTime(UTimelineComponent* __this, float NewTime)
    {
        checkSlow(__this != nullptr);
        __this->SetNewTime(NewTime);
    }

    void UTimelineComponent_SetLooping(UTimelineComponent* __this, bool bNewLooping)
    {
        checkSlow(__this != nullptr);
        __this->SetLooping(bNewLooping);
    }

    void UTimelineComponent_SetLinearColorCurve(UTimelineComponent* __this, UCurveLinearColor* NewLinearColorCurve, FName& LinearColorTrackName)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearColorCurve(NewLinearColorCurve, LinearColorTrackName);
    }

    void UTimelineComponent_SetIgnoreTimeDilation(UTimelineComponent* __this, bool bNewIgnoreTimeDilation)
    {
        checkSlow(__this != nullptr);
        __this->SetIgnoreTimeDilation(bNewIgnoreTimeDilation);
    }

    void UTimelineComponent_SetFloatCurve(UTimelineComponent* __this, UCurveFloat* NewFloatCurve, FName& FloatTrackName)
    {
        checkSlow(__this != nullptr);
        __this->SetFloatCurve(NewFloatCurve, FloatTrackName);
    }

    void UTimelineComponent_ReverseFromEnd(UTimelineComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReverseFromEnd();
    }

    void UTimelineComponent_Reverse(UTimelineComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->Reverse();
    }

    void UTimelineComponent_PlayFromStart(UTimelineComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->PlayFromStart();
    }

    void UTimelineComponent_Play(UTimelineComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->Play();
    }

    void UTimelineComponent_IsReversing(UTimelineComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsReversing();
    }

    void UTimelineComponent_IsPlaying(UTimelineComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPlaying();
    }

    void UTimelineComponent_IsLooping(UTimelineComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsLooping();
    }

    void UTimelineComponent_GetTimelineLength(UTimelineComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTimelineLength();
    }

    void UTimelineComponent_GetScaledTimelineLength(UTimelineComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScaledTimelineLength();
    }

    void UTimelineComponent_GetPlayRate(UTimelineComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayRate();
    }

    void UTimelineComponent_GetPlaybackPosition(UTimelineComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlaybackPosition();
    }

    void UTimelineComponent_GetIgnoreTimeDilation(UTimelineComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetIgnoreTimeDilation();
    }

    void UTwitterIntegrationBase_ShowTweetUI(UTwitterIntegrationBase* __this, const char* InitialMessage, const char* URL, const char* Picture, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ShowTweetUI(US_STRING_TO_TCHAR(InitialMessage), US_STRING_TO_TCHAR(URL), US_STRING_TO_TCHAR(Picture));
    }

    void UTwitterIntegrationBase_Init(UTwitterIntegrationBase* __this)
    {
        checkSlow(__this != nullptr);
        __this->Init();
    }

    void UTwitterIntegrationBase_GetNumAccounts(UTwitterIntegrationBase* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumAccounts();
    }

    void UTwitterIntegrationBase_CanShowTweetUI(UTwitterIntegrationBase* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CanShowTweetUI();
    }

    void UTwitterIntegrationBase_AuthorizeAccounts(UTwitterIntegrationBase* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AuthorizeAccounts();
    }

    void UTypedElementCommonActions_CopySelectedElements(UTypedElementCommonActions* __this, UTypedElementSelectionSet* SelectionSet, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CopySelectedElements(SelectionSet);
    }

    void UUnrealSharpTestsBaseObjectInCpp_InvokeDelegateInCpp(UUnrealSharpTestsBaseObjectInCpp* __this, int32 intParam, const char* strParam, FName& nameParam)
    {
        checkSlow(__this != nullptr);
        __this->InvokeDelegateInCpp(intParam, US_STRING_TO_TCHAR(strParam), nameParam);
    }

    void UUnrealSharpTestsBaseObjectInCpp_BroadcastDelegateInCpp(UUnrealSharpTestsBaseObjectInCpp* __this, bool bValue, FVector& vecParam, const char* strParam, UObject* objectParam)
    {
        checkSlow(__this != nullptr);
        __this->BroadcastDelegateInCpp(bValue, vecParam, US_STRING_TO_TCHAR(strParam), objectParam);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppPrintText(const char* Text, FColor& TextColor, float TimeOfDisplay)
    {
        UUnrealSharpTestsFunctionLibraryInCpp::CppPrintText(US_STRING_TO_TCHAR(Text), TextColor, TimeOfDisplay);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppGetSubclassOfAndReturnByRef(TSubclassOf<UUnrealSharpTestsBaseObjectInCpp>& a, TSubclassOf<UUnrealSharpTestsBaseObjectInCpp>& b, TSubclassOf<UUnrealSharpTestsBaseObjectInCpp>& outA, TSubclassOf<UUnrealSharpTestsBaseObjectInCpp>& outB, TSubclassOf<UUnrealSharpTestsBaseObjectInCpp>& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppGetSubclassOfAndReturnByRef(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppGetObjectAndReturnByRef(UUnrealSharpTestsBaseObjectInCpp* a, UUnrealSharpTestsBaseObjectInCpp* b, UUnrealSharpTestsBaseObjectInCpp*& outA, UUnrealSharpTestsBaseObjectInCpp*& outB, UObject*& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppGetObjectAndReturnByRef(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppGetClassAndReturnByRef(UClass*& a, UClass*& b, UClass*& outA, UClass*& outB, UClass*& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppGetClassAndReturnByRef(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_VectorValue(FVector& a, FVector& b, FVector& outA, FVector& outB, FVector& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppAddAndReturnByRef_VectorValue(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Vector(const FVector& a, const FVector& b, FVector& outA, FVector& outB, FVector& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppAddAndReturnByRef_Vector(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_UInt8(uint8 a, uint8 b, uint8& outA, uint8& outB, uint8& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppAddAndReturnByRef_UInt8(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Name(const FName& a, const FName& b, FName& outA, FName& outB, FName& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppAddAndReturnByRef_Name(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Int32(int32 a, int32 b, int32& outA, int32& outB, int32& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppAddAndReturnByRef_Int32(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Float(float a, float b, float& outA, float& outB, float& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppAddAndReturnByRef_Float(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Enum(EUnrealSharpLanguageTypesInCpp a, EUnrealSharpLanguageTypesInCpp b, EUnrealSharpLanguageTypesInCpp& outA, EUnrealSharpLanguageTypesInCpp& outB, EUnrealSharpLanguageTypesInCpp& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppAddAndReturnByRef_Enum(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Double(double a, double b, double& outA, double& outB, double& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppAddAndReturnByRef_Double(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_ByteEnum(EUnrealSharpProjectsEnumTypeInCpp a, EUnrealSharpProjectsEnumTypeInCpp b, EUnrealSharpProjectsEnumTypeInCpp& outA, EUnrealSharpProjectsEnumTypeInCpp& outB, EUnrealSharpProjectsEnumTypeInCpp& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppAddAndReturnByRef_ByteEnum(a, b, outA, outB);
    }

    void UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Bool(bool a, bool b, bool& outA, bool& outB, bool& __result)
    {
        __result = UUnrealSharpTestsFunctionLibraryInCpp::CppAddAndReturnByRef_Bool(a, b, outA, outB);
    }

    void UVectorFieldComponent_SetIntensity(UVectorFieldComponent* __this, float NewIntensity)
    {
        checkSlow(__this != nullptr);
        __this->SetIntensity(NewIntensity);
    }

    void UViewportStatsSubsystem_RemoveDisplayDelegate(UViewportStatsSubsystem* __this, const int32 IndexToRemove)
    {
        checkSlow(__this != nullptr);
        __this->RemoveDisplayDelegate(IndexToRemove);
    }

    void UVOIPStatics_SetMicThreshold(float InThreshold)
    {
        UVOIPStatics::SetMicThreshold(InThreshold);
    }

    void UVOIPTalker_RegisterWithPlayerState(UVOIPTalker* __this, APlayerState* OwningState)
    {
        checkSlow(__this != nullptr);
        __this->RegisterWithPlayerState(OwningState);
    }

    void UVOIPTalker_GetVoiceLevel(UVOIPTalker* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetVoiceLevel();
    }

    void UVOIPTalker_CreateTalkerForPlayer(APlayerState* OwningState, UVOIPTalker*& __result)
    {
        __result = UVOIPTalker::CreateTalkerForPlayer(OwningState);
    }

    void UVolumetricCloudComponent_SetViewSampleCountScale(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetViewSampleCountScale(NewValue);
    }

    void UVolumetricCloudComponent_SetTracingStartMaxDistance(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetTracingStartMaxDistance(NewValue);
    }

    void UVolumetricCloudComponent_SetTracingStartDistanceFromCamera(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetTracingStartDistanceFromCamera(NewValue);
    }

    void UVolumetricCloudComponent_SetTracingMaxDistance(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetTracingMaxDistance(NewValue);
    }

    void UVolumetricCloudComponent_SetStopTracingTransmittanceThreshold(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetStopTracingTransmittanceThreshold(NewValue);
    }

    void UVolumetricCloudComponent_SetSkyLightCloudBottomOcclusion(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSkyLightCloudBottomOcclusion(NewValue);
    }

    void UVolumetricCloudComponent_SetShadowViewSampleCountScale(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetShadowViewSampleCountScale(NewValue);
    }

    void UVolumetricCloudComponent_SetShadowTracingDistance(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetShadowTracingDistance(NewValue);
    }

    void UVolumetricCloudComponent_SetShadowReflectionViewSampleCountScale(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetShadowReflectionViewSampleCountScale(NewValue);
    }

    void UVolumetricCloudComponent_SetRenderInMainPass(UVolumetricCloudComponent* __this, bool bValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRenderInMainPass(bValue);
    }

    void UVolumetricCloudComponent_SetReflectionViewSampleCountScale(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetReflectionViewSampleCountScale(NewValue);
    }

    void UVolumetricCloudComponent_SetPlanetRadius(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetPlanetRadius(NewValue);
    }

    void UVolumetricCloudComponent_SetMaterial(UVolumetricCloudComponent* __this, UMaterialInterface* NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetMaterial(NewValue);
    }

    void UVolumetricCloudComponent_SetLayerHeight(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetLayerHeight(NewValue);
    }

    void UVolumetricCloudComponent_SetLayerBottomAltitude(UVolumetricCloudComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetLayerBottomAltitude(NewValue);
    }

    void UVolumetricCloudComponent_SetHoldout(UVolumetricCloudComponent* __this, bool bNewHoldout)
    {
        checkSlow(__this != nullptr);
        __this->SetHoldout(bNewHoldout);
    }

    void UVolumetricCloudComponent_SetGroundAlbedo(UVolumetricCloudComponent* __this, FColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetGroundAlbedo(NewValue);
    }

    void UVolumetricCloudComponent_SetbUsePerSampleAtmosphericLightTransmittance(UVolumetricCloudComponent* __this, bool NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetbUsePerSampleAtmosphericLightTransmittance(NewValue);
    }

    void UWindDirectionalSourceComponent_SetWindType(UWindDirectionalSourceComponent* __this, EWindSourceType InNewType)
    {
        checkSlow(__this != nullptr);
        __this->SetWindType(InNewType);
    }

    void UWindDirectionalSourceComponent_SetStrength(UWindDirectionalSourceComponent* __this, float InNewStrength)
    {
        checkSlow(__this != nullptr);
        __this->SetStrength(InNewStrength);
    }

    void UWindDirectionalSourceComponent_SetSpeed(UWindDirectionalSourceComponent* __this, float InNewSpeed)
    {
        checkSlow(__this != nullptr);
        __this->SetSpeed(InNewSpeed);
    }

    void UWindDirectionalSourceComponent_SetRadius(UWindDirectionalSourceComponent* __this, float InNewRadius)
    {
        checkSlow(__this != nullptr);
        __this->SetRadius(InNewRadius);
    }

    void UWindDirectionalSourceComponent_SetMinimumGustAmount(UWindDirectionalSourceComponent* __this, float InNewMinGust)
    {
        checkSlow(__this != nullptr);
        __this->SetMinimumGustAmount(InNewMinGust);
    }

    void UWindDirectionalSourceComponent_SetMaximumGustAmount(UWindDirectionalSourceComponent* __this, float InNewMaxGust)
    {
        checkSlow(__this != nullptr);
        __this->SetMaximumGustAmount(InNewMaxGust);
    }

    void UWorld_K2_GetWorldSettings(UWorld* __this, AWorldSettings*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetWorldSettings();
    }

    void UWorld_HandleTimelineScrubbed(UWorld* __this)
    {
        checkSlow(__this != nullptr);
        __this->HandleTimelineScrubbed();
    }

    void UWorld_GetDataLayerManager(UWorld* __this, UDataLayerManager*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDataLayerManager();
    }

    void UWorldPartitionStreamingSourceComponent_IsStreamingSourceEnabled(UWorldPartitionStreamingSourceComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsStreamingSourceEnabled();
    }

    void UWorldPartitionStreamingSourceComponent_IsStreamingCompleted(UWorldPartitionStreamingSourceComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsStreamingCompleted();
    }

    void UWorldPartitionStreamingSourceComponent_EnableStreamingSource(UWorldPartitionStreamingSourceComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->EnableStreamingSource();
    }

    void UWorldPartitionStreamingSourceComponent_DisableStreamingSource(UWorldPartitionStreamingSourceComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->DisableStreamingSource();
    }

    void UWorldPartitionSubsystem_IsAllStreamingCompleted(UWorldPartitionSubsystem* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsAllStreamingCompleted();
    }


    // Export register function
    void RegisterFastInvokeApis_3(FUnrealInteropFunctions* InInteropFunctions)
    {
        check(InInteropFunctions);

        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_UpdateSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetUpVectorAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetUnselectedSplineSegmentColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetTangentsAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetTangentColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetTangentAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetSplinePointType);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetSelectedSplineSegmentColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetScaleAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetRotationAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetLocationAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetDrawDebug);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetDefaultUpVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetClosedLoopAtPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_SetClosedLoop);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_RemoveSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_IsClosedLoop);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetVectorPropertyAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetVectorPropertyAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetUpVectorAtTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetUpVectorAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetUpVectorAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetUpVectorAtDistanceAlongSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetTimeAtDistanceAlongSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetTangentAtTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetTangentAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetTangentAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetTangentAtDistanceAlongSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetSplinePointType);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetSplineLength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetScaleAtTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetScaleAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetScaleAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetScaleAtDistanceAlongSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRotationAtTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRotationAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRotationAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRotationAtDistanceAlongSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRollAtTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRollAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRollAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRollAtDistanceAlongSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRightVectorAtTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRightVectorAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRightVectorAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetRightVectorAtDistanceAlongSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetNumberOfSplineSegments);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetNumberOfSplinePoints);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetLocationAtTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetLocationAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetLocationAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetLocationAtDistanceAlongSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetLocationAndTangentAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetLeaveTangentAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetInputKeyValueAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetInputKeyValueAtDistanceAlongSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetFloatPropertyAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetFloatPropertyAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetDistanceAlongSplineAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetDistanceAlongSplineAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetDistanceAlongSplineAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetDirectionAtTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetDirectionAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetDirectionAtSplineInputKey);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetDirectionAtDistanceAlongSpline);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetDefaultUpVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_GetArriveTangentAtSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_FindUpVectorClosestToWorldLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_FindTangentClosestToWorldLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_FindScaleClosestToWorldLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_FindRotationClosestToWorldLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_FindRollClosestToWorldLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_FindRightVectorClosestToWorldLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_FindLocationClosestToWorldLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_FindInputKeyClosestToWorldLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_FindDirectionClosestToWorldLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_ClearSplinePoints);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_AddSplinePointAtIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineComponent_AddSplinePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_UpdateMesh);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetStartTangent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetStartRollDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetStartRoll);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetStartPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetStartAndEnd);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetSplineUpDir);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetForwardAxis);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetEndTangent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetEndRollDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetEndRoll);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetEndPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetBoundaryMin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_SetBoundaryMax);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_GetStartTangent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_GetStartRoll);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_GetStartPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_GetSplineUpDir);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_GetForwardAxis);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_GetEndTangent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_GetEndRoll);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_GetEndPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_GetBoundaryMin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USplineMeshComponent_GetBoundaryMax);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USpotLightComponent_SetOuterConeAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USpotLightComponent_SetInnerConeAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USpringArmComponent_IsCollisionFixApplied);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USpringArmComponent_GetUnfixedCameraPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USpringArmComponent_GetTargetRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_SetMinimumLODForPlatform);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_RemoveSocket);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_GetNumTriangles);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_GetNumSections);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_GetNumLODs);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_GetMinimumLODForQualityLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_GetMinimumLODForPlatform);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_GetMaterialIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_GetMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_FindSocket);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_AddSocket);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_AddMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMesh_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_UpdateInitialEvaluateWorldPositionOffset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_SetWorldPositionOffsetDisableDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_SetStaticMesh);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_SetReverseCulling);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_SetForcedLodModel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_SetForceDisableNanite);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_SetEvaluateWorldPositionOffsetInRayTracing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_SetEvaluateWorldPositionOffset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_SetDistanceFieldSelfShadowBias);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_OnRep_StaticMesh);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_GetLocalBounds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStaticMeshComponent_GetInitialEvaluateWorldPositionOffset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStereoLayerComponent_SetTexture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStereoLayerComponent_SetPriority);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStereoLayerComponent_SetLeftTexture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStereoLayerComponent_MarkTextureForUpdate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStereoLayerComponent_GetTexture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStereoLayerComponent_GetPriority);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStereoLayerComponent_GetLeftTexture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStereoLayerShapeCylinder_SetRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStereoLayerShapeCylinder_SetOverlayArc);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStereoLayerShapeCylinder_SetHeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStreamableRenderAsset_SetForceMipLevelsToBeResident);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStreamableSparseVolumeTexture_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStreamableSparseVolumeTexture_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UStreamableSparseVolumeTexture_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_SetYScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_SetXScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_SetWorldSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_SetVertSpacingAdjust);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_SetVerticalAlignment);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_SetTextRenderColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_SetTextMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_SetHorizSpacingAdjust);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_SetHorizontalAlignment);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_SetFont);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_GetTextWorldSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTextRenderComponent_GetTextLocalSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTexture_AreDownscalePropertiesEditable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTexture_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTexture_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTexture_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimecodeProvider_GetTimecode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimecodeProvider_GetSynchronizationState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimecodeProvider_GetFrameRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimecodeProvider_GetDelayedTimecode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimecodeProvider_FetchAndUpdate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_Stop);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_SetVectorCurve);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_SetTimelineLengthMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_SetTimelineLength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_SetPlayRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_SetPlaybackPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_SetNewTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_SetLooping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_SetLinearColorCurve);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_SetIgnoreTimeDilation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_SetFloatCurve);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_ReverseFromEnd);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_Reverse);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_PlayFromStart);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_Play);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_IsReversing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_IsPlaying);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_IsLooping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_GetTimelineLength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_GetScaledTimelineLength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_GetPlayRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_GetPlaybackPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTimelineComponent_GetIgnoreTimeDilation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTwitterIntegrationBase_ShowTweetUI);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTwitterIntegrationBase_Init);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTwitterIntegrationBase_GetNumAccounts);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTwitterIntegrationBase_CanShowTweetUI);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTwitterIntegrationBase_AuthorizeAccounts);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UTypedElementCommonActions_CopySelectedElements);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsBaseObjectInCpp_InvokeDelegateInCpp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsBaseObjectInCpp_BroadcastDelegateInCpp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppPrintText);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppGetSubclassOfAndReturnByRef);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppGetObjectAndReturnByRef);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppGetClassAndReturnByRef);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_VectorValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Vector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_UInt8);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Name);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Int32);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Float);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Enum);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Double);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_ByteEnum);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UUnrealSharpTestsFunctionLibraryInCpp_CppAddAndReturnByRef_Bool);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVectorFieldComponent_SetIntensity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UViewportStatsSubsystem_RemoveDisplayDelegate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVOIPStatics_SetMicThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVOIPTalker_RegisterWithPlayerState);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVOIPTalker_GetVoiceLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVOIPTalker_CreateTalkerForPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetViewSampleCountScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetTracingStartMaxDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetTracingStartDistanceFromCamera);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetTracingMaxDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetStopTracingTransmittanceThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetSkyLightCloudBottomOcclusion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetShadowViewSampleCountScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetShadowTracingDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetShadowReflectionViewSampleCountScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetRenderInMainPass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetReflectionViewSampleCountScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetPlanetRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetLayerHeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetLayerBottomAltitude);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetHoldout);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetGroundAlbedo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UVolumetricCloudComponent_SetbUsePerSampleAtmosphericLightTransmittance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWindDirectionalSourceComponent_SetWindType);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWindDirectionalSourceComponent_SetStrength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWindDirectionalSourceComponent_SetSpeed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWindDirectionalSourceComponent_SetRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWindDirectionalSourceComponent_SetMinimumGustAmount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWindDirectionalSourceComponent_SetMaximumGustAmount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWorld_K2_GetWorldSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWorld_HandleTimelineScrubbed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWorld_GetDataLayerManager);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWorldPartitionStreamingSourceComponent_IsStreamingSourceEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWorldPartitionStreamingSourceComponent_IsStreamingCompleted);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWorldPartitionStreamingSourceComponent_EnableStreamingSource);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWorldPartitionStreamingSourceComponent_DisableStreamingSource);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UWorldPartitionSubsystem_IsAllStreamingCompleted);
    }
}
#if PLATFORM_WINDOWS
#pragma warning(pop)
#else
#pragma GCC diagnostic pop
#endif
// ReSharper restore all

