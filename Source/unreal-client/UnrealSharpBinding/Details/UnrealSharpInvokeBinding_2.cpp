/*
    MIT License

    Copyright (c) 2024 UnrealSharp

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    Project URL: https://github.com/bodong1987/UnrealSharp
*/
// ReSharper disable CommentTypo
// ***********************************************************************
// Author           : bodong
// ***********************************************************************
// <copyright file="UnrealSharpInvokeBinding_2.cpp">
//     Copyright (c) 2024 UnrealSharp. 
// <summary>
// This code file is automatically generated by UnrealSharpTool. 
// Manually modifying this file will lose the modifications at the next generate time. 
// </summary>
// ***********************************************************************
// These codes are automatically generated by UnrealSharpTool in order to realize fast function calls from C# to C++.
// Please do not modify this file manually.

// ReSharper disable all
#include "CoreMinimal.h"
#include "Misc/UnrealInteropFunctions.h"
#include "Misc/CSharpStructures.h"
#include "Animation/Skeleton.h"
#include "Components/LightComponent.h"
#include "Components/LightComponentBase.h"
#include "Components/LocalFogVolumeComponent.h"
#include "Components/LocalLightComponent.h"
#include "Components/MaterialBillboardComponent.h"
#include "Components/MeshComponent.h"
#include "Components/PawnNoiseEmitterComponent.h"
#include "Components/PlatformEventsComponent.h"
#include "Components/PointLightComponent.h"
#include "Components/PoseableMeshComponent.h"
#include "Components/PrimitiveComponent.h"
#include "Components/RectLightComponent.h"
#include "Components/SceneCaptureComponent.h"
#include "Components/SceneCaptureComponent2D.h"
#include "Components/SceneCaptureComponentCube.h"
#include "Components/SceneComponent.h"
#include "Components/ShapeComponent.h"
#include "Components/SkeletalMeshComponent.h"
#include "Components/SkinnedMeshComponent.h"
#include "Components/SkyAtmosphereComponent.h"
#include "Components/SkyLightComponent.h"
#include "Components/SphereComponent.h"
#include "Engine/Level.h"
#include "Engine/LevelStreaming.h"
#include "Engine/LevelStreamingDynamic.h"
#include "Engine/PlatformInterfaceWebResponse.h"
#include "Engine/SkeletalMesh.h"
#include "Engine/SkeletalMeshSocket.h"
#include "Engine/SkinnedAsset.h"
#include "GameFramework/MovementComponent.h"
#include "GameFramework/NavMovementComponent.h"
#include "GameFramework/PawnMovementComponent.h"
#include "GameFramework/PlayerInput.h"
#include "GameFramework/ProjectileMovementComponent.h"
#include "GameFramework/SaveGame.h"
#include "Kismet/KismetStringLibrary.h"
#include "Kismet/KismetStringTableLibrary.h"
#include "Kismet/KismetSystemLibrary.h"
#include "Materials/MaterialInstanceDynamic.h"
#include "Materials/MaterialInterface.h"
#include "Net/NetPushModelHelpers.h"
#include "Particles/ParticleSystemComponent.h"
#include "PhysicsEngine/PhysicalAnimationComponent.h"
#include "PhysicsEngine/PhysicsConstraintComponent.h"
#include "PhysicsEngine/PhysicsHandleComponent.h"
#include "PhysicsEngine/PhysicsSettings.h"
#include "PhysicsEngine/PhysicsSpringComponent.h"
#include "PhysicsEngine/RadialForceComponent.h"
#include "PhysicsField/PhysicsFieldComponent.h"
#include "ReplaySubsystem.h"
#include "Sound/SoundBase.h"
#include "Sound/SoundSubmix.h"
#include "Sound/SoundWave.h"
#include "SparseVolumeTexture/SparseVolumeTexture.h"
#include "VT/RuntimeVirtualTexture.h"

#if PLATFORM_WINDOWS
#pragma warning(push)
#pragma warning(disable:4996)
#else
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated"
#endif

namespace UnrealSharp::Bindings
{
    void UKismetStringLibrary_StartsWith(const char* SourceString, const char* InPrefix, TEnumAsByte<ESearchCase::Type> SearchCase, bool& __result)
    {
        __result = UKismetStringLibrary::StartsWith(US_STRING_TO_TCHAR(SourceString), US_STRING_TO_TCHAR(InPrefix), SearchCase);
    }

    void UKismetStringLibrary_NotEqual_StrStr(const char* A, const char* B, bool& __result)
    {
        __result = UKismetStringLibrary::NotEqual_StrStr(US_STRING_TO_TCHAR(A), US_STRING_TO_TCHAR(B));
    }

    void UKismetStringLibrary_NotEqual_StriStri(const char* A, const char* B, bool& __result)
    {
        __result = UKismetStringLibrary::NotEqual_StriStri(US_STRING_TO_TCHAR(A), US_STRING_TO_TCHAR(B));
    }

    void UKismetStringLibrary_MatchesWildcard(const char* SourceString, const char* Wildcard, TEnumAsByte<ESearchCase::Type> SearchCase, bool& __result)
    {
        __result = UKismetStringLibrary::MatchesWildcard(US_STRING_TO_TCHAR(SourceString), US_STRING_TO_TCHAR(Wildcard), SearchCase);
    }

    void UKismetStringLibrary_Len(const char* S, int32& __result)
    {
        __result = UKismetStringLibrary::Len(US_STRING_TO_TCHAR(S));
    }

    void UKismetStringLibrary_IsNumeric(const char* SourceString, bool& __result)
    {
        __result = UKismetStringLibrary::IsNumeric(US_STRING_TO_TCHAR(SourceString));
    }

    void UKismetStringLibrary_IsEmpty(const char* InString, bool& __result)
    {
        __result = UKismetStringLibrary::IsEmpty(US_STRING_TO_TCHAR(InString));
    }

    void UKismetStringLibrary_GetCharacterAsNumber(const char* SourceString, int32 Index, int32& __result)
    {
        __result = UKismetStringLibrary::GetCharacterAsNumber(US_STRING_TO_TCHAR(SourceString), Index);
    }

    void UKismetStringLibrary_FindSubstring(const char* SearchIn, const char* Substring, bool bUseCase, bool bSearchFromEnd, int32 StartPosition, int32& __result)
    {
        __result = UKismetStringLibrary::FindSubstring(US_STRING_TO_TCHAR(SearchIn), US_STRING_TO_TCHAR(Substring), bUseCase, bSearchFromEnd, StartPosition);
    }

    void UKismetStringLibrary_EqualEqual_StrStr(const char* A, const char* B, bool& __result)
    {
        __result = UKismetStringLibrary::EqualEqual_StrStr(US_STRING_TO_TCHAR(A), US_STRING_TO_TCHAR(B));
    }

    void UKismetStringLibrary_EqualEqual_StriStri(const char* A, const char* B, bool& __result)
    {
        __result = UKismetStringLibrary::EqualEqual_StriStri(US_STRING_TO_TCHAR(A), US_STRING_TO_TCHAR(B));
    }

    void UKismetStringLibrary_EndsWith(const char* SourceString, const char* InSuffix, TEnumAsByte<ESearchCase::Type> SearchCase, bool& __result)
    {
        __result = UKismetStringLibrary::EndsWith(US_STRING_TO_TCHAR(SourceString), US_STRING_TO_TCHAR(InSuffix), SearchCase);
    }

    void UKismetStringLibrary_Conv_StringToVector(const char* InString, FVector& OutConvertedVector, bool& OutIsValid)
    {
        UKismetStringLibrary::Conv_StringToVector(US_STRING_TO_TCHAR(InString), OutConvertedVector, OutIsValid);
    }

    void UKismetStringLibrary_Conv_StringToRotator(const char* InString, FRotator& OutConvertedRotator, bool& OutIsValid)
    {
        UKismetStringLibrary::Conv_StringToRotator(US_STRING_TO_TCHAR(InString), OutConvertedRotator, OutIsValid);
    }

    void UKismetStringLibrary_Conv_StringToName(const char* InString, FName& __result)
    {
        __result = UKismetStringLibrary::Conv_StringToName(US_STRING_TO_TCHAR(InString));
    }

    void UKismetStringLibrary_Conv_StringToInt64(const char* InString, int64& __result)
    {
        __result = UKismetStringLibrary::Conv_StringToInt64(US_STRING_TO_TCHAR(InString));
    }

    void UKismetStringLibrary_Conv_StringToInt(const char* InString, int32& __result)
    {
        __result = UKismetStringLibrary::Conv_StringToInt(US_STRING_TO_TCHAR(InString));
    }

    void UKismetStringLibrary_Conv_StringToDouble(const char* InString, double& __result)
    {
        __result = UKismetStringLibrary::Conv_StringToDouble(US_STRING_TO_TCHAR(InString));
    }

    void UKismetStringLibrary_Conv_StringToColor(const char* InString, FLinearColor& OutConvertedColor, bool& OutIsValid)
    {
        UKismetStringLibrary::Conv_StringToColor(US_STRING_TO_TCHAR(InString), OutConvertedColor, OutIsValid);
    }

    void UKismetStringLibrary_Contains(const char* SearchIn, const char* Substring, bool bUseCase, bool bSearchFromEnd, bool& __result)
    {
        __result = UKismetStringLibrary::Contains(US_STRING_TO_TCHAR(SearchIn), US_STRING_TO_TCHAR(Substring), bUseCase, bSearchFromEnd);
    }

    void UKismetStringTableLibrary_IsRegisteredTableId(const FName& TableId, bool& __result)
    {
        __result = UKismetStringTableLibrary::IsRegisteredTableId(TableId);
    }

    void UKismetStringTableLibrary_IsRegisteredTableEntry(const FName& TableId, const char* Key, bool& __result)
    {
        __result = UKismetStringTableLibrary::IsRegisteredTableEntry(TableId, US_STRING_TO_TCHAR(Key));
    }

    void UKismetSystemLibrary_UnregisterForRemoteNotifications()
    {
        UKismetSystemLibrary::UnregisterForRemoteNotifications();
    }

    void UKismetSystemLibrary_TransactObject(UObject* Object)
    {
        UKismetSystemLibrary::TransactObject(Object);
    }

    void UKismetSystemLibrary_SnapshotObject(UObject* Object)
    {
        UKismetSystemLibrary::SnapshotObject(Object);
    }

    void UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen(const char* CategoryName)
    {
        UKismetSystemLibrary::ShowPlatformSpecificLeaderboardScreen(US_STRING_TO_TCHAR(CategoryName));
    }

    void UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen(const APlayerController* SpecificPlayer)
    {
        UKismetSystemLibrary::ShowPlatformSpecificAchievementsScreen(SpecificPlayer);
    }

    void UKismetSystemLibrary_ShowInterstitialAd()
    {
        UKismetSystemLibrary::ShowInterstitialAd();
    }

    void UKismetSystemLibrary_ShowAdBanner(int32 AdIdIndex, bool bShowOnBottomOfScreen)
    {
        UKismetSystemLibrary::ShowAdBanner(AdIdIndex, bShowOnBottomOfScreen);
    }

    void UKismetSystemLibrary_SetVolumeButtonsHandledBySystem(bool bEnabled)
    {
        UKismetSystemLibrary::SetVolumeButtonsHandledBySystem(bEnabled);
    }

    void UKismetSystemLibrary_SetSuppressViewportTransitionMessage(const UObject* WorldContextObject, bool bState)
    {
        UKismetSystemLibrary::SetSuppressViewportTransitionMessage(WorldContextObject, bState);
    }

    void UKismetSystemLibrary_SetGamepadsBlockDeviceFeedback(bool bBlock)
    {
        UKismetSystemLibrary::SetGamepadsBlockDeviceFeedback(bBlock);
    }

    void UKismetSystemLibrary_ResetGamepadAssignmentToController(int32 ControllerId)
    {
        UKismetSystemLibrary::ResetGamepadAssignmentToController(ControllerId);
    }

    void UKismetSystemLibrary_ResetGamepadAssignments()
    {
        UKismetSystemLibrary::ResetGamepadAssignments();
    }

    void UKismetSystemLibrary_RegisterForRemoteNotifications()
    {
        UKismetSystemLibrary::RegisterForRemoteNotifications();
    }

    void UKismetSystemLibrary_QuitGame(const UObject* WorldContextObject, APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference::Type> QuitPreference, bool bIgnorePlatformRestrictions)
    {
        UKismetSystemLibrary::QuitGame(WorldContextObject, SpecificPlayer, QuitPreference, bIgnorePlatformRestrictions);
    }

    void UKismetSystemLibrary_PrintString(const UObject* WorldContextObject, const char* InString, bool bPrintToScreen, bool bPrintToLog, FLinearColor& TextColor, float Duration, const FName& Key)
    {
        UKismetSystemLibrary::PrintString(WorldContextObject, US_STRING_TO_TCHAR(InString), bPrintToScreen, bPrintToLog, TextColor, Duration, Key);
    }

    void UKismetSystemLibrary_ParseParam(const char* InString, const char* InParam, bool& __result)
    {
        __result = UKismetSystemLibrary::ParseParam(US_STRING_TO_TCHAR(InString), US_STRING_TO_TCHAR(InParam));
    }

    void UKismetSystemLibrary_MakeLiteralName(FName& Value, FName& __result)
    {
        __result = UKismetSystemLibrary::MakeLiteralName(Value);
    }

    void UKismetSystemLibrary_MakeLiteralInt64(int64 Value, int64& __result)
    {
        __result = UKismetSystemLibrary::MakeLiteralInt64(Value);
    }

    void UKismetSystemLibrary_MakeLiteralInt(int32 Value, int32& __result)
    {
        __result = UKismetSystemLibrary::MakeLiteralInt(Value);
    }

    void UKismetSystemLibrary_MakeLiteralDouble(double Value, double& __result)
    {
        __result = UKismetSystemLibrary::MakeLiteralDouble(Value);
    }

    void UKismetSystemLibrary_MakeLiteralByte(uint8 Value, uint8& __result)
    {
        __result = UKismetSystemLibrary::MakeLiteralByte(Value);
    }

    void UKismetSystemLibrary_MakeLiteralBool(bool Value, bool& __result)
    {
        __result = UKismetSystemLibrary::MakeLiteralBool(Value);
    }

    void UKismetSystemLibrary_LogString(const char* InString, bool bPrintToLog)
    {
        UKismetSystemLibrary::LogString(US_STRING_TO_TCHAR(InString), bPrintToLog);
    }

    void UKismetSystemLibrary_LoadInterstitialAd(int32 AdIdIndex)
    {
        UKismetSystemLibrary::LoadInterstitialAd(AdIdIndex);
    }

    void UKismetSystemLibrary_LaunchURL(const char* URL)
    {
        UKismetSystemLibrary::LaunchURL(US_STRING_TO_TCHAR(URL));
    }

    void UKismetSystemLibrary_K2_UnPauseTimer(UObject* Object, const char* FunctionName)
    {
        UKismetSystemLibrary::K2_UnPauseTimer(Object, US_STRING_TO_TCHAR(FunctionName));
    }

    void UKismetSystemLibrary_K2_TimerExists(UObject* Object, const char* FunctionName, bool& __result)
    {
        __result = UKismetSystemLibrary::K2_TimerExists(Object, US_STRING_TO_TCHAR(FunctionName));
    }

    void UKismetSystemLibrary_K2_PauseTimer(UObject* Object, const char* FunctionName)
    {
        UKismetSystemLibrary::K2_PauseTimer(Object, US_STRING_TO_TCHAR(FunctionName));
    }

    void UKismetSystemLibrary_K2_IsTimerPaused(UObject* Object, const char* FunctionName, bool& __result)
    {
        __result = UKismetSystemLibrary::K2_IsTimerPaused(Object, US_STRING_TO_TCHAR(FunctionName));
    }

    void UKismetSystemLibrary_K2_IsTimerActive(UObject* Object, const char* FunctionName, bool& __result)
    {
        __result = UKismetSystemLibrary::K2_IsTimerActive(Object, US_STRING_TO_TCHAR(FunctionName));
    }

    void UKismetSystemLibrary_K2_GetTimerRemainingTime(UObject* Object, const char* FunctionName, float& __result)
    {
        __result = UKismetSystemLibrary::K2_GetTimerRemainingTime(Object, US_STRING_TO_TCHAR(FunctionName));
    }

    void UKismetSystemLibrary_K2_GetTimerElapsedTime(UObject* Object, const char* FunctionName, float& __result)
    {
        __result = UKismetSystemLibrary::K2_GetTimerElapsedTime(Object, US_STRING_TO_TCHAR(FunctionName));
    }

    void UKismetSystemLibrary_K2_ClearTimer(UObject* Object, const char* FunctionName)
    {
        UKismetSystemLibrary::K2_ClearTimer(Object, US_STRING_TO_TCHAR(FunctionName));
    }

    void UKismetSystemLibrary_IsValidClass(UClass*& Class, bool& __result)
    {
        __result = UKismetSystemLibrary::IsValidClass(Class);
    }

    void UKismetSystemLibrary_IsValid(const UObject* Object, bool& __result)
    {
        __result = UKismetSystemLibrary::IsValid(Object);
    }

    void UKismetSystemLibrary_IsUnattended(bool& __result)
    {
        __result = UKismetSystemLibrary::IsUnattended();
    }

    void UKismetSystemLibrary_IsStandalone(const UObject* WorldContextObject, bool& __result)
    {
        __result = UKismetSystemLibrary::IsStandalone(WorldContextObject);
    }

    void UKismetSystemLibrary_IsServer(const UObject* WorldContextObject, bool& __result)
    {
        __result = UKismetSystemLibrary::IsServer(WorldContextObject);
    }

    void UKismetSystemLibrary_IsScreensaverEnabled(bool& __result)
    {
        __result = UKismetSystemLibrary::IsScreensaverEnabled();
    }

    void UKismetSystemLibrary_IsPackagedForDistribution(bool& __result)
    {
        __result = UKismetSystemLibrary::IsPackagedForDistribution();
    }

    void UKismetSystemLibrary_IsLoggedIn(const APlayerController* SpecificPlayer, bool& __result)
    {
        __result = UKismetSystemLibrary::IsLoggedIn(SpecificPlayer);
    }

    void UKismetSystemLibrary_IsInterstitialAdRequested(bool& __result)
    {
        __result = UKismetSystemLibrary::IsInterstitialAdRequested();
    }

    void UKismetSystemLibrary_IsInterstitialAdAvailable(bool& __result)
    {
        __result = UKismetSystemLibrary::IsInterstitialAdAvailable();
    }

    void UKismetSystemLibrary_IsDedicatedServer(const UObject* WorldContextObject, bool& __result)
    {
        __result = UKismetSystemLibrary::IsDedicatedServer(WorldContextObject);
    }

    void UKismetSystemLibrary_IsControllerAssignedToGamepad(int32 ControllerId, bool& __result)
    {
        __result = UKismetSystemLibrary::IsControllerAssignedToGamepad(ControllerId);
    }

    void UKismetSystemLibrary_HideAdBanner()
    {
        UKismetSystemLibrary::HideAdBanner();
    }

    void UKismetSystemLibrary_HasMultipleLocalPlayers(const UObject* WorldContextObject, bool& __result)
    {
        __result = UKismetSystemLibrary::HasMultipleLocalPlayers(WorldContextObject);
    }

    void UKismetSystemLibrary_GetVolumeButtonsHandledBySystem(bool& __result)
    {
        __result = UKismetSystemLibrary::GetVolumeButtonsHandledBySystem();
    }

    void UKismetSystemLibrary_GetRenderingMaterialQualityLevel(int32& __result)
    {
        __result = UKismetSystemLibrary::GetRenderingMaterialQualityLevel();
    }

    void UKismetSystemLibrary_GetRenderingDetailMode(int32& __result)
    {
        __result = UKismetSystemLibrary::GetRenderingDetailMode();
    }

    void UKismetSystemLibrary_GetOuterObject(const UObject* Object, UObject*& __result)
    {
        __result = UKismetSystemLibrary::GetOuterObject(Object);
    }

    void UKismetSystemLibrary_GetMinYResolutionForUI(int32& __result)
    {
        __result = UKismetSystemLibrary::GetMinYResolutionForUI();
    }

    void UKismetSystemLibrary_GetMinYResolutionFor3DView(int32& __result)
    {
        __result = UKismetSystemLibrary::GetMinYResolutionFor3DView();
    }

    void UKismetSystemLibrary_GetGameTimeInSeconds(const UObject* WorldContextObject, double& __result)
    {
        __result = UKismetSystemLibrary::GetGameTimeInSeconds(WorldContextObject);
    }

    void UKismetSystemLibrary_GetGamepadButtonGlyph(const char* ButtonKey, int32 ControllerIndex, UTexture2D*& __result)
    {
        __result = UKismetSystemLibrary::GetGamepadButtonGlyph(US_STRING_TO_TCHAR(ButtonKey), ControllerIndex);
    }

    void UKismetSystemLibrary_GetFrameCount(int64& __result)
    {
        __result = UKismetSystemLibrary::GetFrameCount();
    }

    void UKismetSystemLibrary_GetConsoleVariableIntValue(const char* VariableName, int32& __result)
    {
        __result = UKismetSystemLibrary::GetConsoleVariableIntValue(US_STRING_TO_TCHAR(VariableName));
    }

    void UKismetSystemLibrary_GetConsoleVariableFloatValue(const char* VariableName, float& __result)
    {
        __result = UKismetSystemLibrary::GetConsoleVariableFloatValue(US_STRING_TO_TCHAR(VariableName));
    }

    void UKismetSystemLibrary_GetConsoleVariableBoolValue(const char* VariableName, bool& __result)
    {
        __result = UKismetSystemLibrary::GetConsoleVariableBoolValue(US_STRING_TO_TCHAR(VariableName));
    }

    void UKismetSystemLibrary_GetComponentBounds(const USceneComponent* Component, FVector& Origin, FVector& BoxExtent, float& SphereRadius)
    {
        UKismetSystemLibrary::GetComponentBounds(Component, Origin, BoxExtent, SphereRadius);
    }

    void UKismetSystemLibrary_GetAdIDCount(int32& __result)
    {
        __result = UKismetSystemLibrary::GetAdIDCount();
    }

    void UKismetSystemLibrary_ForceCloseAdBanner()
    {
        UKismetSystemLibrary::ForceCloseAdBanner();
    }

    void UKismetSystemLibrary_FlushPersistentDebugLines(const UObject* WorldContextObject)
    {
        UKismetSystemLibrary::FlushPersistentDebugLines(WorldContextObject);
    }

    void UKismetSystemLibrary_FlushDebugStrings(const UObject* WorldContextObject)
    {
        UKismetSystemLibrary::FlushDebugStrings(WorldContextObject);
    }

    void UKismetSystemLibrary_ExecuteConsoleCommand(const UObject* WorldContextObject, const char* Command, APlayerController* SpecificPlayer)
    {
        UKismetSystemLibrary::ExecuteConsoleCommand(WorldContextObject, US_STRING_TO_TCHAR(Command), SpecificPlayer);
    }

    void UKismetSystemLibrary_EndTransaction(int32& __result)
    {
        __result = UKismetSystemLibrary::EndTransaction();
    }

    void UKismetSystemLibrary_DrawDebugString(const UObject* WorldContextObject, const FVector& TextLocation, const char* Text, AActor* TestBaseActor, FLinearColor& TextColor, float Duration)
    {
        UKismetSystemLibrary::DrawDebugString(WorldContextObject, TextLocation, US_STRING_TO_TCHAR(Text), TestBaseActor, TextColor, Duration);
    }

    void UKismetSystemLibrary_DrawDebugSphere(const UObject* WorldContextObject, const FVector& Center, float Radius, int32 Segments, FLinearColor& LineColor, float Duration, float Thickness)
    {
        UKismetSystemLibrary::DrawDebugSphere(WorldContextObject, Center, Radius, Segments, LineColor, Duration, Thickness);
    }

    void UKismetSystemLibrary_DrawDebugPoint(const UObject* WorldContextObject, const FVector& Position, float Size, FLinearColor& PointColor, float Duration)
    {
        UKismetSystemLibrary::DrawDebugPoint(WorldContextObject, Position, Size, PointColor, Duration);
    }

    void UKismetSystemLibrary_DrawDebugLine(const UObject* WorldContextObject, const FVector& LineStart, const FVector& LineEnd, FLinearColor& LineColor, float Duration, float Thickness)
    {
        UKismetSystemLibrary::DrawDebugLine(WorldContextObject, LineStart, LineEnd, LineColor, Duration, Thickness);
    }

    void UKismetSystemLibrary_DrawDebugCylinder(const UObject* WorldContextObject, const FVector& Start, const FVector& End, float Radius, int32 Segments, FLinearColor& LineColor, float Duration, float Thickness)
    {
        UKismetSystemLibrary::DrawDebugCylinder(WorldContextObject, Start, End, Radius, Segments, LineColor, Duration, Thickness);
    }

    void UKismetSystemLibrary_DrawDebugCoordinateSystem(const UObject* WorldContextObject, const FVector& AxisLoc, const FRotator& AxisRot, float Scale, float Duration, float Thickness)
    {
        UKismetSystemLibrary::DrawDebugCoordinateSystem(WorldContextObject, AxisLoc, AxisRot, Scale, Duration, Thickness);
    }

    void UKismetSystemLibrary_DrawDebugConeInDegrees(const UObject* WorldContextObject, const FVector& Origin, const FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, FLinearColor& LineColor, float Duration, float Thickness)
    {
        UKismetSystemLibrary::DrawDebugConeInDegrees(WorldContextObject, Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, LineColor, Duration, Thickness);
    }

    void UKismetSystemLibrary_DrawDebugCircle(const UObject* WorldContextObject, FVector& Center, float Radius, int32 NumSegments, FLinearColor& LineColor, float Duration, float Thickness, FVector& YAxis, FVector& ZAxis, bool bDrawAxis)
    {
        UKismetSystemLibrary::DrawDebugCircle(WorldContextObject, Center, Radius, NumSegments, LineColor, Duration, Thickness, YAxis, ZAxis, bDrawAxis);
    }

    void UKismetSystemLibrary_DrawDebugCapsule(const UObject* WorldContextObject, const FVector& Center, float HalfHeight, float Radius, const FRotator& Rotation, FLinearColor& LineColor, float Duration, float Thickness)
    {
        UKismetSystemLibrary::DrawDebugCapsule(WorldContextObject, Center, HalfHeight, Radius, Rotation, LineColor, Duration, Thickness);
    }

    void UKismetSystemLibrary_DrawDebugCamera(const ACameraActor* CameraActor, FLinearColor& CameraColor, float Duration)
    {
        UKismetSystemLibrary::DrawDebugCamera(CameraActor, CameraColor, Duration);
    }

    void UKismetSystemLibrary_DrawDebugBox(const UObject* WorldContextObject, const FVector& Center, FVector& Extent, FLinearColor& LineColor, const FRotator& Rotation, float Duration, float Thickness)
    {
        UKismetSystemLibrary::DrawDebugBox(WorldContextObject, Center, Extent, LineColor, Rotation, Duration, Thickness);
    }

    void UKismetSystemLibrary_DrawDebugArrow(const UObject* WorldContextObject, const FVector& LineStart, const FVector& LineEnd, float ArrowSize, FLinearColor& LineColor, float Duration, float Thickness)
    {
        UKismetSystemLibrary::DrawDebugArrow(WorldContextObject, LineStart, LineEnd, ArrowSize, LineColor, Duration, Thickness);
    }

    void UKismetSystemLibrary_DoesImplementInterface(const UObject* TestObject, TSubclassOf<UInterface>& Interface, bool& __result)
    {
        __result = UKismetSystemLibrary::DoesImplementInterface(TestObject, Interface);
    }

    void UKismetSystemLibrary_DoesClassImplementInterface(const UClass*& TestClass, TSubclassOf<UInterface>& Interface, bool& __result)
    {
        __result = UKismetSystemLibrary::DoesClassImplementInterface(TestClass, Interface);
    }

    void UKismetSystemLibrary_CreateCopyForUndoBuffer(UObject* ObjectToModify)
    {
        UKismetSystemLibrary::CreateCopyForUndoBuffer(ObjectToModify);
    }

    void UKismetSystemLibrary_Conv_ObjectToClass(UObject* Object, TSubclassOf<UObject>& Class, UClass*& __result)
    {
        __result = UKismetSystemLibrary::Conv_ObjectToClass(Object, Class);
    }

    void UKismetSystemLibrary_ControlScreensaver(bool bAllowScreenSaver)
    {
        UKismetSystemLibrary::ControlScreensaver(bAllowScreenSaver);
    }

    void UKismetSystemLibrary_CollectGarbage()
    {
        UKismetSystemLibrary::CollectGarbage();
    }

    void UKismetSystemLibrary_CanLaunchURL(const char* URL, bool& __result)
    {
        __result = UKismetSystemLibrary::CanLaunchURL(US_STRING_TO_TCHAR(URL));
    }

    void UKismetSystemLibrary_CancelTransaction(const int32 Index)
    {
        UKismetSystemLibrary::CancelTransaction(Index);
    }

    void ULevel_HasAssetUserDataOfClass(ULevel* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void ULevel_GetAssetUserDataOfClass(ULevel* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void ULevel_AddAssetUserDataOfClass(ULevel* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void ULevelStreaming_ShouldBeLoaded(ULevelStreaming* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ShouldBeLoaded();
    }

    void ULevelStreaming_SetShouldBeVisible(ULevelStreaming* __this, bool bInShouldBeVisible)
    {
        checkSlow(__this != nullptr);
        __this->SetShouldBeVisible(bInShouldBeVisible);
    }

    void ULevelStreaming_SetShouldBeLoaded(ULevelStreaming* __this, bool bInShouldBeLoaded)
    {
        checkSlow(__this != nullptr);
        __this->SetShouldBeLoaded(bInShouldBeLoaded);
    }

    void ULevelStreaming_SetPriority(ULevelStreaming* __this, int32 NewPriority)
    {
        checkSlow(__this != nullptr);
        __this->SetPriority(NewPriority);
    }

    void ULevelStreaming_SetLevelLODIndex(ULevelStreaming* __this, int32 LODIndex)
    {
        checkSlow(__this != nullptr);
        __this->SetLevelLODIndex(LODIndex);
    }

    void ULevelStreaming_SetIsRequestingUnloadAndRemoval(ULevelStreaming* __this, bool bInIsRequestingUnloadAndRemoval)
    {
        checkSlow(__this != nullptr);
        __this->SetIsRequestingUnloadAndRemoval(bInIsRequestingUnloadAndRemoval);
    }

    void ULevelStreaming_IsStreamingStatePending(ULevelStreaming* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsStreamingStatePending();
    }

    void ULevelStreaming_IsLevelVisible(ULevelStreaming* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsLevelVisible();
    }

    void ULevelStreaming_IsLevelLoaded(ULevelStreaming* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsLevelLoaded();
    }

    void ULevelStreaming_GetWorldAssetPackageFName(ULevelStreaming* __this, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetWorldAssetPackageFName();
    }

    void ULevelStreaming_GetLoadedLevel(ULevelStreaming* __this, ULevel*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLoadedLevel();
    }

    void ULevelStreaming_GetIsRequestingUnloadAndRemoval(ULevelStreaming* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetIsRequestingUnloadAndRemoval();
    }

    void ULevelStreaming_CreateInstance(ULevelStreaming* __this, const char* UniqueInstanceName, ULevelStreaming*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CreateInstance(US_STRING_TO_TCHAR(UniqueInstanceName));
    }

    void ULevelStreamingDynamic_LoadLevelInstance(UObject* WorldContextObject, const char* LevelName, FVector& Location, FRotator& Rotation, bool& bOutSuccess, const char* OptionalLevelNameOverride, TSubclassOf<ULevelStreamingDynamic>& OptionalLevelStreamingClass, bool bLoadAsTempPackage, ULevelStreamingDynamic*& __result)
    {
        __result = ULevelStreamingDynamic::LoadLevelInstance(WorldContextObject, US_STRING_TO_TCHAR(LevelName), Location, Rotation, bOutSuccess, US_STRING_TO_TCHAR(OptionalLevelNameOverride), OptionalLevelStreamingClass, bLoadAsTempPackage);
    }

    void ULightComponent_SetVolumetricScatteringIntensity(ULightComponent* __this, float NewIntensity)
    {
        checkSlow(__this != nullptr);
        __this->SetVolumetricScatteringIntensity(NewIntensity);
    }

    void ULightComponent_SetUseTemperature(ULightComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetUseTemperature(bNewValue);
    }

    void ULightComponent_SetUseIESBrightness(ULightComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetUseIESBrightness(bNewValue);
    }

    void ULightComponent_SetTransmission(ULightComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetTransmission(bNewValue);
    }

    void ULightComponent_SetTemperature(ULightComponent* __this, float NewTemperature)
    {
        checkSlow(__this != nullptr);
        __this->SetTemperature(NewTemperature);
    }

    void ULightComponent_SetSpecularScale(ULightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSpecularScale(NewValue);
    }

    void ULightComponent_SetShadowSlopeBias(ULightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetShadowSlopeBias(NewValue);
    }

    void ULightComponent_SetShadowBias(ULightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetShadowBias(NewValue);
    }

    void ULightComponent_SetLightingChannels(ULightComponent* __this, bool bChannel0, bool bChannel1, bool bChannel2)
    {
        checkSlow(__this != nullptr);
        __this->SetLightingChannels(bChannel0, bChannel1, bChannel2);
    }

    void ULightComponent_SetLightFunctionScale(ULightComponent* __this, FVector& NewLightFunctionScale)
    {
        checkSlow(__this != nullptr);
        __this->SetLightFunctionScale(NewLightFunctionScale);
    }

    void ULightComponent_SetLightFunctionMaterial(ULightComponent* __this, UMaterialInterface* NewLightFunctionMaterial)
    {
        checkSlow(__this != nullptr);
        __this->SetLightFunctionMaterial(NewLightFunctionMaterial);
    }

    void ULightComponent_SetLightFunctionFadeDistance(ULightComponent* __this, float NewLightFunctionFadeDistance)
    {
        checkSlow(__this != nullptr);
        __this->SetLightFunctionFadeDistance(NewLightFunctionFadeDistance);
    }

    void ULightComponent_SetLightFunctionDisabledBrightness(ULightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetLightFunctionDisabledBrightness(NewValue);
    }

    void ULightComponent_SetLightFColor(ULightComponent* __this, FColor& NewLightColor)
    {
        checkSlow(__this != nullptr);
        __this->SetLightFColor(NewLightColor);
    }

    void ULightComponent_SetLightColor(ULightComponent* __this, FLinearColor& NewLightColor, bool bSRGB)
    {
        checkSlow(__this != nullptr);
        __this->SetLightColor(NewLightColor, bSRGB);
    }

    void ULightComponent_SetIntensity(ULightComponent* __this, float NewIntensity)
    {
        checkSlow(__this != nullptr);
        __this->SetIntensity(NewIntensity);
    }

    void ULightComponent_SetIndirectLightingIntensity(ULightComponent* __this, float NewIntensity)
    {
        checkSlow(__this != nullptr);
        __this->SetIndirectLightingIntensity(NewIntensity);
    }

    void ULightComponent_SetIESTexture(ULightComponent* __this, UTextureLightProfile* NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetIESTexture(NewValue);
    }

    void ULightComponent_SetIESBrightnessScale(ULightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetIESBrightnessScale(NewValue);
    }

    void ULightComponent_SetForceCachedShadowsForMovablePrimitives(ULightComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetForceCachedShadowsForMovablePrimitives(bNewValue);
    }

    void ULightComponent_SetEnableLightShaftBloom(ULightComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetEnableLightShaftBloom(bNewValue);
    }

    void ULightComponent_SetBloomTint(ULightComponent* __this, FColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetBloomTint(NewValue);
    }

    void ULightComponent_SetBloomThreshold(ULightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetBloomThreshold(NewValue);
    }

    void ULightComponent_SetBloomScale(ULightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetBloomScale(NewValue);
    }

    void ULightComponent_SetBloomMaxBrightness(ULightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetBloomMaxBrightness(NewValue);
    }

    void ULightComponent_SetAffectTranslucentLighting(ULightComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetAffectTranslucentLighting(bNewValue);
    }

    void ULightComponentBase_SetSamplesPerPixel(ULightComponentBase* __this, int32 NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSamplesPerPixel(NewValue);
    }

    void ULightComponentBase_SetCastVolumetricShadow(ULightComponentBase* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetCastVolumetricShadow(bNewValue);
    }

    void ULightComponentBase_SetCastShadows(ULightComponentBase* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetCastShadows(bNewValue);
    }

    void ULightComponentBase_SetCastRaytracedShadows(ULightComponentBase* __this, TEnumAsByte<ECastRayTracedShadow::Type> bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetCastRaytracedShadows(bNewValue);
    }

    void ULightComponentBase_SetCastDeepShadow(ULightComponentBase* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetCastDeepShadow(bNewValue);
    }

    void ULightComponentBase_SetAffectReflection(ULightComponentBase* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetAffectReflection(bNewValue);
    }

    void ULightComponentBase_SetAffectGlobalIllumination(ULightComponentBase* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetAffectGlobalIllumination(bNewValue);
    }

    void ULightComponentBase_GetLightColor(ULightComponentBase* __this, FLinearColor& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLightColor();
    }

    void ULocalFogVolumeComponent_SetRadialFogExtinction(ULocalFogVolumeComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRadialFogExtinction(NewValue);
    }

    void ULocalFogVolumeComponent_SetHeightFogOffset(ULocalFogVolumeComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetHeightFogOffset(NewValue);
    }

    void ULocalFogVolumeComponent_SetHeightFogFalloff(ULocalFogVolumeComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetHeightFogFalloff(NewValue);
    }

    void ULocalFogVolumeComponent_SetHeightFogExtinction(ULocalFogVolumeComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetHeightFogExtinction(NewValue);
    }

    void ULocalFogVolumeComponent_SetFogPhaseG(ULocalFogVolumeComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetFogPhaseG(NewValue);
    }

    void ULocalFogVolumeComponent_SetFogEmissive(ULocalFogVolumeComponent* __this, FLinearColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetFogEmissive(NewValue);
    }

    void ULocalFogVolumeComponent_SetFogAlbedo(ULocalFogVolumeComponent* __this, FLinearColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetFogAlbedo(NewValue);
    }

    void ULocalLightComponent_SetIntensityUnits(ULocalLightComponent* __this, ELightUnits NewIntensityUnits)
    {
        checkSlow(__this != nullptr);
        __this->SetIntensityUnits(NewIntensityUnits);
    }

    void ULocalLightComponent_SetAttenuationRadius(ULocalLightComponent* __this, float NewRadius)
    {
        checkSlow(__this != nullptr);
        __this->SetAttenuationRadius(NewRadius);
    }

    void ULocalLightComponent_GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle, float& __result)
    {
        __result = ULocalLightComponent::GetUnitsConversionFactor(SrcUnits, TargetUnits, CosHalfConeAngle);
    }

    void ULocalPlayerSaveGame_WasSaveRequested(ULocalPlayerSaveGame* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->WasSaveRequested();
    }

    void ULocalPlayerSaveGame_WasLoaded(ULocalPlayerSaveGame* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->WasLoaded();
    }

    void ULocalPlayerSaveGame_WasLastSaveSuccessful(ULocalPlayerSaveGame* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->WasLastSaveSuccessful();
    }

    void ULocalPlayerSaveGame_SaveGameToSlotForLocalPlayer(ULocalPlayerSaveGame* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->SaveGameToSlotForLocalPlayer();
    }

    void ULocalPlayerSaveGame_ResetToDefault(ULocalPlayerSaveGame* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetToDefault();
    }

    void ULocalPlayerSaveGame_OnResetToDefault(ULocalPlayerSaveGame* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnResetToDefault();
    }

    void ULocalPlayerSaveGame_OnPreSave(ULocalPlayerSaveGame* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnPreSave();
    }

    void ULocalPlayerSaveGame_OnPostSave(ULocalPlayerSaveGame* __this, bool bSuccess)
    {
        checkSlow(__this != nullptr);
        __this->OnPostSave(bSuccess);
    }

    void ULocalPlayerSaveGame_OnPostLoad(ULocalPlayerSaveGame* __this)
    {
        checkSlow(__this != nullptr);
        __this->OnPostLoad();
    }

    void ULocalPlayerSaveGame_LoadOrCreateSaveGameForLocalPlayer(TSubclassOf<ULocalPlayerSaveGame>& SaveGameClass, APlayerController* LocalPlayerController, const char* SlotName, ULocalPlayerSaveGame*& __result)
    {
        __result = ULocalPlayerSaveGame::LoadOrCreateSaveGameForLocalPlayer(SaveGameClass, LocalPlayerController, US_STRING_TO_TCHAR(SlotName));
    }

    void ULocalPlayerSaveGame_IsSaveInProgress(ULocalPlayerSaveGame* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsSaveInProgress();
    }

    void ULocalPlayerSaveGame_GetSavedDataVersion(ULocalPlayerSaveGame* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSavedDataVersion();
    }

    void ULocalPlayerSaveGame_GetPlatformUserIndex(ULocalPlayerSaveGame* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlatformUserIndex();
    }

    void ULocalPlayerSaveGame_GetPlatformUserId(ULocalPlayerSaveGame* __this, FPlatformUserId& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlatformUserId();
    }

    void ULocalPlayerSaveGame_GetLocalPlayerController(ULocalPlayerSaveGame* __this, APlayerController*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLocalPlayerController();
    }

    void ULocalPlayerSaveGame_GetLatestDataVersion(ULocalPlayerSaveGame* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLatestDataVersion();
    }

    void ULocalPlayerSaveGame_GetInvalidDataVersion(ULocalPlayerSaveGame* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetInvalidDataVersion();
    }

    void ULocalPlayerSaveGame_AsyncSaveGameToSlotForLocalPlayer(ULocalPlayerSaveGame* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AsyncSaveGameToSlotForLocalPlayer();
    }

    void UMaterialBillboardComponent_AddElement(UMaterialBillboardComponent* __this, UMaterialInterface* Material, UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, UCurveFloat* DistanceToSizeCurve)
    {
        checkSlow(__this != nullptr);
        __this->AddElement(Material, DistanceToOpacityCurve, bSizeIsInScreenSpace, BaseSizeX, BaseSizeY, DistanceToSizeCurve);
    }

    void UMaterialInstanceDynamic_SetVectorParameterValue(UMaterialInstanceDynamic* __this, FName& ParameterName, FLinearColor& Value)
    {
        checkSlow(__this != nullptr);
        __this->SetVectorParameterValue(ParameterName, Value);
    }

    void UMaterialInstanceDynamic_SetTextureParameterValue(UMaterialInstanceDynamic* __this, FName& ParameterName, UTexture* Value)
    {
        checkSlow(__this != nullptr);
        __this->SetTextureParameterValue(ParameterName, Value);
    }

    void UMaterialInstanceDynamic_SetSparseVolumeTextureParameterValue(UMaterialInstanceDynamic* __this, FName& ParameterName, USparseVolumeTexture* Value)
    {
        checkSlow(__this != nullptr);
        __this->SetSparseVolumeTextureParameterValue(ParameterName, Value);
    }

    void UMaterialInstanceDynamic_SetScalarParameterValue(UMaterialInstanceDynamic* __this, FName& ParameterName, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetScalarParameterValue(ParameterName, Value);
    }

    void UMaterialInstanceDynamic_SetScalarParameterByIndex(UMaterialInstanceDynamic* __this, int32 ParameterIndex, float Value, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->SetScalarParameterByIndex(ParameterIndex, Value);
    }

    void UMaterialInstanceDynamic_SetRuntimeVirtualTextureParameterValue(UMaterialInstanceDynamic* __this, FName& ParameterName, URuntimeVirtualTexture* Value)
    {
        checkSlow(__this != nullptr);
        __this->SetRuntimeVirtualTextureParameterValue(ParameterName, Value);
    }

    void UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams(UMaterialInstanceDynamic* __this, UMaterialInstance* SourceA, UMaterialInstance* SourceB, float Alpha)
    {
        checkSlow(__this != nullptr);
        __this->K2_InterpolateMaterialInstanceParams(SourceA, SourceB, Alpha);
    }

    void UMaterialInstanceDynamic_K2_GetVectorParameterValue(UMaterialInstanceDynamic* __this, FName& ParameterName, FLinearColor& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetVectorParameterValue(ParameterName);
    }

    void UMaterialInstanceDynamic_K2_GetTextureParameterValue(UMaterialInstanceDynamic* __this, FName& ParameterName, UTexture*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetTextureParameterValue(ParameterName);
    }

    void UMaterialInstanceDynamic_K2_GetScalarParameterValue(UMaterialInstanceDynamic* __this, FName& ParameterName, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetScalarParameterValue(ParameterName);
    }

    void UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters(UMaterialInstanceDynamic* __this, UMaterialInterface* Source, bool bQuickParametersOnly)
    {
        checkSlow(__this != nullptr);
        __this->K2_CopyMaterialInstanceParameters(Source, bQuickParametersOnly);
    }

    void UMaterialInstanceDynamic_InitializeScalarParameterAndGetIndex(UMaterialInstanceDynamic* __this, const FName& ParameterName, float Value, int32& OutParameterIndex, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->InitializeScalarParameterAndGetIndex(ParameterName, Value, OutParameterIndex);
    }

    void UMaterialInstanceDynamic_CopyParameterOverrides(UMaterialInstanceDynamic* __this, UMaterialInstance* MaterialInstance)
    {
        checkSlow(__this != nullptr);
        __this->CopyParameterOverrides(MaterialInstance);
    }

    void UMaterialInstanceDynamic_CopyInterpParameters(UMaterialInstanceDynamic* __this, UMaterialInstance* Source)
    {
        checkSlow(__this != nullptr);
        __this->CopyInterpParameters(Source);
    }

    void UMaterialInterface_SetForceMipLevelsToBeResident(UMaterialInterface* __this, bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32 CinematicTextureGroups, bool bFastResponse)
    {
        checkSlow(__this != nullptr);
        __this->SetForceMipLevelsToBeResident(OverrideForceMiplevelsToBeResident, bForceMiplevelsToBeResidentValue, ForceDuration, CinematicTextureGroups, bFastResponse);
    }

    void UMaterialInterface_GetPhysicalMaterialMask(UMaterialInterface* __this, UPhysicalMaterialMask*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicalMaterialMask();
    }

    void UMaterialInterface_GetPhysicalMaterialFromMap(UMaterialInterface* __this, int32 Index, UPhysicalMaterial*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicalMaterialFromMap(Index);
    }

    void UMaterialInterface_GetPhysicalMaterial(UMaterialInterface* __this, UPhysicalMaterial*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicalMaterial();
    }

    void UMaterialInterface_GetNaniteOverideMaterial(UMaterialInterface* __this, UMaterialInterface*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNaniteOverideMaterial();
    }

    void UMaterialInterface_GetBlendMode(UMaterialInterface* __this, TEnumAsByte<EBlendMode>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBlendMode();
    }

    void UMaterialInterface_GetBaseMaterial(UMaterialInterface* __this, UMaterial*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBaseMaterial();
    }

    void UMaterialInterface_HasAssetUserDataOfClass(UMaterialInterface* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void UMaterialInterface_GetAssetUserDataOfClass(UMaterialInterface* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void UMaterialInterface_AddAssetUserDataOfClass(UMaterialInterface* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void UMeshComponent_SetVectorParameterValueOnMaterials(UMeshComponent* __this, const FName& ParameterName, const FVector& ParameterValue)
    {
        checkSlow(__this != nullptr);
        __this->SetVectorParameterValueOnMaterials(ParameterName, ParameterValue);
    }

    void UMeshComponent_SetScalarParameterValueOnMaterials(UMeshComponent* __this, const FName& ParameterName, const float ParameterValue)
    {
        checkSlow(__this != nullptr);
        __this->SetScalarParameterValueOnMaterials(ParameterName, ParameterValue);
    }

    void UMeshComponent_SetOverlayMaterialMaxDrawDistance(UMeshComponent* __this, float InMaxDrawDistance)
    {
        checkSlow(__this != nullptr);
        __this->SetOverlayMaterialMaxDrawDistance(InMaxDrawDistance);
    }

    void UMeshComponent_SetOverlayMaterial(UMeshComponent* __this, UMaterialInterface* NewOverlayMaterial)
    {
        checkSlow(__this != nullptr);
        __this->SetOverlayMaterial(NewOverlayMaterial);
    }

    void UMeshComponent_PrestreamTextures(UMeshComponent* __this, float Seconds, bool bPrioritizeCharacterTextures, int32 CinematicTextureGroups)
    {
        checkSlow(__this != nullptr);
        __this->PrestreamTextures(Seconds, bPrioritizeCharacterTextures, CinematicTextureGroups);
    }

    void UMeshComponent_PrestreamMeshLODs(UMeshComponent* __this, float Seconds, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->PrestreamMeshLODs(Seconds);
    }

    void UMeshComponent_GetOverlayMaterial(UMeshComponent* __this, UMaterialInterface*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOverlayMaterial();
    }

    void UMovementComponent_StopMovementImmediately(UMovementComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->StopMovementImmediately();
    }

    void UMovementComponent_SnapUpdatedComponentToPlane(UMovementComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->SnapUpdatedComponentToPlane();
    }

    void UMovementComponent_SetUpdatedComponent(UMovementComponent* __this, USceneComponent* NewUpdatedComponent)
    {
        checkSlow(__this != nullptr);
        __this->SetUpdatedComponent(NewUpdatedComponent);
    }

    void UMovementComponent_SetPlaneConstraintOrigin(UMovementComponent* __this, FVector& PlaneOrigin)
    {
        checkSlow(__this != nullptr);
        __this->SetPlaneConstraintOrigin(PlaneOrigin);
    }

    void UMovementComponent_SetPlaneConstraintNormal(UMovementComponent* __this, FVector& PlaneNormal)
    {
        checkSlow(__this != nullptr);
        __this->SetPlaneConstraintNormal(PlaneNormal);
    }

    void UMovementComponent_SetPlaneConstraintFromVectors(UMovementComponent* __this, FVector& Forward, FVector& Up)
    {
        checkSlow(__this != nullptr);
        __this->SetPlaneConstraintFromVectors(Forward, Up);
    }

    void UMovementComponent_SetPlaneConstraintEnabled(UMovementComponent* __this, bool bEnabled)
    {
        checkSlow(__this != nullptr);
        __this->SetPlaneConstraintEnabled(bEnabled);
    }

    void UMovementComponent_SetPlaneConstraintAxisSetting(UMovementComponent* __this, EPlaneConstraintAxisSetting NewAxisSetting)
    {
        checkSlow(__this != nullptr);
        __this->SetPlaneConstraintAxisSetting(NewAxisSetting);
    }

    void UMovementComponent_PhysicsVolumeChanged(UMovementComponent* __this, APhysicsVolume* NewVolume)
    {
        checkSlow(__this != nullptr);
        __this->PhysicsVolumeChanged(NewVolume);
    }

    void UMovementComponent_IsExceedingMaxSpeed(UMovementComponent* __this, float MaxSpeed, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsExceedingMaxSpeed(MaxSpeed);
    }

    void UMovementComponent_GetPlaneConstraintOrigin(UMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlaneConstraintOrigin();
    }

    void UMovementComponent_GetPlaneConstraintNormal(UMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlaneConstraintNormal();
    }

    void UMovementComponent_GetPlaneConstraintAxisSetting(UMovementComponent* __this, EPlaneConstraintAxisSetting& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlaneConstraintAxisSetting();
    }

    void UMovementComponent_GetPhysicsVolume(UMovementComponent* __this, APhysicsVolume*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicsVolume();
    }

    void UMovementComponent_GetMaxSpeed(UMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaxSpeed();
    }

    void UMovementComponent_GetGravityZ(UMovementComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetGravityZ();
    }

    void UMovementComponent_ConstrainNormalToPlane(UMovementComponent* __this, FVector& Normal, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ConstrainNormalToPlane(Normal);
    }

    void UMovementComponent_ConstrainLocationToPlane(UMovementComponent* __this, FVector& Location, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ConstrainLocationToPlane(Location);
    }

    void UMovementComponent_ConstrainDirectionToPlane(UMovementComponent* __this, FVector& Direction, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ConstrainDirectionToPlane(Direction);
    }

    void UNavMovementComponent_StopMovementKeepPathing(UNavMovementComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->StopMovementKeepPathing();
    }

    void UNavMovementComponent_StopActiveMovement(UNavMovementComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->StopActiveMovement();
    }

    void UNavMovementComponent_IsSwimming(UNavMovementComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsSwimming();
    }

    void UNavMovementComponent_IsMovingOnGround(UNavMovementComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsMovingOnGround();
    }

    void UNavMovementComponent_IsFlying(UNavMovementComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsFlying();
    }

    void UNavMovementComponent_IsFalling(UNavMovementComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsFalling();
    }

    void UNavMovementComponent_IsCrouching(UNavMovementComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsCrouching();
    }

    void UNetPushModelHelpers_MarkPropertyDirty(UObject* Object, FName& PropertyName)
    {
        UNetPushModelHelpers::MarkPropertyDirty(Object, PropertyName);
    }

    void UParticleSystemComponent_SetTrailSourceData(UParticleSystemComponent* __this, FName& InFirstSocketName, FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)
    {
        checkSlow(__this != nullptr);
        __this->SetTrailSourceData(InFirstSocketName, InSecondSocketName, InWidthMode, InWidth);
    }

    void UParticleSystemComponent_SetTemplate(UParticleSystemComponent* __this, UParticleSystem* NewTemplate)
    {
        checkSlow(__this != nullptr);
        __this->SetTemplate(NewTemplate);
    }

    void UParticleSystemComponent_SetMaterialParameter(UParticleSystemComponent* __this, FName& ParameterName, UMaterialInterface* Param)
    {
        checkSlow(__this != nullptr);
        __this->SetMaterialParameter(ParameterName, Param);
    }

    void UParticleSystemComponent_SetBeamTargetTangent(UParticleSystemComponent* __this, int32 EmitterIndex, FVector& NewTangentPoint, int32 TargetIndex)
    {
        checkSlow(__this != nullptr);
        __this->SetBeamTargetTangent(EmitterIndex, NewTangentPoint, TargetIndex);
    }

    void UParticleSystemComponent_SetBeamTargetStrength(UParticleSystemComponent* __this, int32 EmitterIndex, float NewTargetStrength, int32 TargetIndex)
    {
        checkSlow(__this != nullptr);
        __this->SetBeamTargetStrength(EmitterIndex, NewTargetStrength, TargetIndex);
    }

    void UParticleSystemComponent_SetBeamTargetPoint(UParticleSystemComponent* __this, int32 EmitterIndex, FVector& NewTargetPoint, int32 TargetIndex)
    {
        checkSlow(__this != nullptr);
        __this->SetBeamTargetPoint(EmitterIndex, NewTargetPoint, TargetIndex);
    }

    void UParticleSystemComponent_SetBeamSourceTangent(UParticleSystemComponent* __this, int32 EmitterIndex, FVector& NewTangentPoint, int32 SourceIndex)
    {
        checkSlow(__this != nullptr);
        __this->SetBeamSourceTangent(EmitterIndex, NewTangentPoint, SourceIndex);
    }

    void UParticleSystemComponent_SetBeamSourceStrength(UParticleSystemComponent* __this, int32 EmitterIndex, float NewSourceStrength, int32 SourceIndex)
    {
        checkSlow(__this != nullptr);
        __this->SetBeamSourceStrength(EmitterIndex, NewSourceStrength, SourceIndex);
    }

    void UParticleSystemComponent_SetBeamSourcePoint(UParticleSystemComponent* __this, int32 EmitterIndex, FVector& NewSourcePoint, int32 SourceIndex)
    {
        checkSlow(__this != nullptr);
        __this->SetBeamSourcePoint(EmitterIndex, NewSourcePoint, SourceIndex);
    }

    void UParticleSystemComponent_SetBeamEndPoint(UParticleSystemComponent* __this, int32 EmitterIndex, FVector& NewEndPoint)
    {
        checkSlow(__this != nullptr);
        __this->SetBeamEndPoint(EmitterIndex, NewEndPoint);
    }

    void UParticleSystemComponent_GetNumActiveParticles(UParticleSystemComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumActiveParticles();
    }

    void UParticleSystemComponent_GetNamedMaterial(UParticleSystemComponent* __this, FName& InName, UMaterialInterface*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNamedMaterial(InName);
    }

    void UParticleSystemComponent_GetBeamTargetTangent(UParticleSystemComponent* __this, int32 EmitterIndex, int32 TargetIndex, FVector& OutTangentPoint, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBeamTargetTangent(EmitterIndex, TargetIndex, OutTangentPoint);
    }

    void UParticleSystemComponent_GetBeamTargetStrength(UParticleSystemComponent* __this, int32 EmitterIndex, int32 TargetIndex, float& OutTargetStrength, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBeamTargetStrength(EmitterIndex, TargetIndex, OutTargetStrength);
    }

    void UParticleSystemComponent_GetBeamTargetPoint(UParticleSystemComponent* __this, int32 EmitterIndex, int32 TargetIndex, FVector& OutTargetPoint, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBeamTargetPoint(EmitterIndex, TargetIndex, OutTargetPoint);
    }

    void UParticleSystemComponent_GetBeamSourceTangent(UParticleSystemComponent* __this, int32 EmitterIndex, int32 SourceIndex, FVector& OutTangentPoint, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBeamSourceTangent(EmitterIndex, SourceIndex, OutTangentPoint);
    }

    void UParticleSystemComponent_GetBeamSourceStrength(UParticleSystemComponent* __this, int32 EmitterIndex, int32 SourceIndex, float& OutSourceStrength, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBeamSourceStrength(EmitterIndex, SourceIndex, OutSourceStrength);
    }

    void UParticleSystemComponent_GetBeamSourcePoint(UParticleSystemComponent* __this, int32 EmitterIndex, int32 SourceIndex, FVector& OutSourcePoint, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBeamSourcePoint(EmitterIndex, SourceIndex, OutSourcePoint);
    }

    void UParticleSystemComponent_GetBeamEndPoint(UParticleSystemComponent* __this, int32 EmitterIndex, FVector& OutEndPoint, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBeamEndPoint(EmitterIndex, OutEndPoint);
    }

    void UParticleSystemComponent_GenerateParticleEvent(UParticleSystemComponent* __this, const FName& InEventName, const float InEmitterTime, const FVector& InLocation, const FVector& InDirection, const FVector& InVelocity)
    {
        checkSlow(__this != nullptr);
        __this->GenerateParticleEvent(InEventName, InEmitterTime, InLocation, InDirection, InVelocity);
    }

    void UParticleSystemComponent_EndTrails(UParticleSystemComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->EndTrails();
    }

    void UParticleSystemComponent_CreateNamedDynamicMaterialInstance(UParticleSystemComponent* __this, FName& InName, UMaterialInterface* SourceMaterial, UMaterialInstanceDynamic*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CreateNamedDynamicMaterialInstance(InName, SourceMaterial);
    }

    void UParticleSystemComponent_BeginTrails(UParticleSystemComponent* __this, FName& InFirstSocketName, FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)
    {
        checkSlow(__this != nullptr);
        __this->BeginTrails(InFirstSocketName, InSecondSocketName, InWidthMode, InWidth);
    }

    void UPawnMovementComponent_IsMoveInputIgnored(UPawnMovementComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsMoveInputIgnored();
    }

    void UPawnMovementComponent_GetPendingInputVector(UPawnMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPendingInputVector();
    }

    void UPawnMovementComponent_GetPawnOwner(UPawnMovementComponent* __this, APawn*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPawnOwner();
    }

    void UPawnMovementComponent_GetLastInputVector(UPawnMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLastInputVector();
    }

    void UPawnMovementComponent_ConsumeInputVector(UPawnMovementComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ConsumeInputVector();
    }

    void UPawnMovementComponent_AddInputVector(UPawnMovementComponent* __this, FVector& WorldVector, bool bForce)
    {
        checkSlow(__this != nullptr);
        __this->AddInputVector(WorldVector, bForce);
    }

    void UPawnNoiseEmitterComponent_MakeNoise(UPawnNoiseEmitterComponent* __this, AActor* NoiseMaker, float Loudness, const FVector& NoiseLocation)
    {
        checkSlow(__this != nullptr);
        __this->MakeNoise(NoiseMaker, Loudness, NoiseLocation);
    }

    void UPhysicalAnimationComponent_SetStrengthMultiplyer(UPhysicalAnimationComponent* __this, float InStrengthMultiplyer)
    {
        checkSlow(__this != nullptr);
        __this->SetStrengthMultiplyer(InStrengthMultiplyer);
    }

    void UPhysicalAnimationComponent_SetSkeletalMeshComponent(UPhysicalAnimationComponent* __this, USkeletalMeshComponent* InSkeletalMeshComponent)
    {
        checkSlow(__this != nullptr);
        __this->SetSkeletalMeshComponent(InSkeletalMeshComponent);
    }

    void UPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow(UPhysicalAnimationComponent* __this, FName& BodyName, FName& ProfileName, bool bIncludeSelf, bool bClearNotFound)
    {
        checkSlow(__this != nullptr);
        __this->ApplyPhysicalAnimationProfileBelow(BodyName, ProfileName, bIncludeSelf, bClearNotFound);
    }

    void UPhysicsConstraintComponent_SetProjectionParams(UPhysicsConstraintComponent* __this, float ProjectionLinearAlpha, float ProjectionAngularAlpha, float ProjectionLinearTolerance, float ProjectionAngularTolerance)
    {
        checkSlow(__this != nullptr);
        __this->SetProjectionParams(ProjectionLinearAlpha, ProjectionAngularAlpha, ProjectionLinearTolerance, ProjectionAngularTolerance);
    }

    void UPhysicsConstraintComponent_SetProjectionEnabled(UPhysicsConstraintComponent* __this, bool bProjectionEnabled)
    {
        checkSlow(__this != nullptr);
        __this->SetProjectionEnabled(bProjectionEnabled);
    }

    void UPhysicsConstraintComponent_SetOrientationDriveTwistAndSwing(UPhysicsConstraintComponent* __this, bool bEnableTwistDrive, bool bEnableSwingDrive)
    {
        checkSlow(__this != nullptr);
        __this->SetOrientationDriveTwistAndSwing(bEnableTwistDrive, bEnableSwingDrive);
    }

    void UPhysicsConstraintComponent_SetOrientationDriveSLERP(UPhysicsConstraintComponent* __this, bool bEnableSLERP)
    {
        checkSlow(__this != nullptr);
        __this->SetOrientationDriveSLERP(bEnableSLERP);
    }

    void UPhysicsConstraintComponent_SetLinearZLimit(UPhysicsConstraintComponent* __this, TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearZLimit(ConstraintType, LimitSize);
    }

    void UPhysicsConstraintComponent_SetLinearYLimit(UPhysicsConstraintComponent* __this, TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearYLimit(ConstraintType, LimitSize);
    }

    void UPhysicsConstraintComponent_SetLinearXLimit(UPhysicsConstraintComponent* __this, TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearXLimit(ConstraintType, LimitSize);
    }

    void UPhysicsConstraintComponent_SetLinearVelocityTarget(UPhysicsConstraintComponent* __this, const FVector& InVelTarget)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearVelocityTarget(InVelTarget);
    }

    void UPhysicsConstraintComponent_SetLinearVelocityDrive(UPhysicsConstraintComponent* __this, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearVelocityDrive(bEnableDriveX, bEnableDriveY, bEnableDriveZ);
    }

    void UPhysicsConstraintComponent_SetLinearPositionTarget(UPhysicsConstraintComponent* __this, const FVector& InPosTarget)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearPositionTarget(InPosTarget);
    }

    void UPhysicsConstraintComponent_SetLinearPositionDrive(UPhysicsConstraintComponent* __this, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearPositionDrive(bEnableDriveX, bEnableDriveY, bEnableDriveZ);
    }

    void UPhysicsConstraintComponent_SetLinearPlasticity(UPhysicsConstraintComponent* __this, bool bLinearPlasticity, float LinearPlasticityThreshold, TEnumAsByte<EConstraintPlasticityType> PlasticityType)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearPlasticity(bLinearPlasticity, LinearPlasticityThreshold, PlasticityType);
    }

    void UPhysicsConstraintComponent_SetLinearDriveParams(UPhysicsConstraintComponent* __this, float PositionStrength, float VelocityStrength, float InForceLimit)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearDriveParams(PositionStrength, VelocityStrength, InForceLimit);
    }

    void UPhysicsConstraintComponent_SetLinearBreakable(UPhysicsConstraintComponent* __this, bool bLinearBreakable, float LinearBreakThreshold)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearBreakable(bLinearBreakable, LinearBreakThreshold);
    }

    void UPhysicsConstraintComponent_SetDisableCollision(UPhysicsConstraintComponent* __this, bool bDisableCollision)
    {
        checkSlow(__this != nullptr);
        __this->SetDisableCollision(bDisableCollision);
    }

    void UPhysicsConstraintComponent_SetContactTransferScale(UPhysicsConstraintComponent* __this, float ContactTransferScale)
    {
        checkSlow(__this != nullptr);
        __this->SetContactTransferScale(ContactTransferScale);
    }

    void UPhysicsConstraintComponent_SetConstraintReferencePosition(UPhysicsConstraintComponent* __this, TEnumAsByte<EConstraintFrame::Type> Frame, const FVector& RefPosition)
    {
        checkSlow(__this != nullptr);
        __this->SetConstraintReferencePosition(Frame, RefPosition);
    }

    void UPhysicsConstraintComponent_SetConstraintReferenceOrientation(UPhysicsConstraintComponent* __this, TEnumAsByte<EConstraintFrame::Type> Frame, const FVector& PriAxis, const FVector& SecAxis)
    {
        checkSlow(__this != nullptr);
        __this->SetConstraintReferenceOrientation(Frame, PriAxis, SecAxis);
    }

    void UPhysicsConstraintComponent_SetConstrainedComponents(UPhysicsConstraintComponent* __this, UPrimitiveComponent* Component1, FName& BoneName1, UPrimitiveComponent* Component2, FName& BoneName2)
    {
        checkSlow(__this != nullptr);
        __this->SetConstrainedComponents(Component1, BoneName1, Component2, BoneName2);
    }

    void UPhysicsConstraintComponent_SetAngularVelocityTarget(UPhysicsConstraintComponent* __this, const FVector& InVelTarget)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularVelocityTarget(InVelTarget);
    }

    void UPhysicsConstraintComponent_SetAngularVelocityDriveTwistAndSwing(UPhysicsConstraintComponent* __this, bool bEnableTwistDrive, bool bEnableSwingDrive)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularVelocityDriveTwistAndSwing(bEnableTwistDrive, bEnableSwingDrive);
    }

    void UPhysicsConstraintComponent_SetAngularVelocityDriveSLERP(UPhysicsConstraintComponent* __this, bool bEnableSLERP)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularVelocityDriveSLERP(bEnableSLERP);
    }

    void UPhysicsConstraintComponent_SetAngularTwistLimit(UPhysicsConstraintComponent* __this, TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularTwistLimit(ConstraintType, TwistLimitAngle);
    }

    void UPhysicsConstraintComponent_SetAngularSwing2Limit(UPhysicsConstraintComponent* __this, TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularSwing2Limit(MotionType, Swing2LimitAngle);
    }

    void UPhysicsConstraintComponent_SetAngularSwing1Limit(UPhysicsConstraintComponent* __this, TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularSwing1Limit(MotionType, Swing1LimitAngle);
    }

    void UPhysicsConstraintComponent_SetAngularPlasticity(UPhysicsConstraintComponent* __this, bool bAngularPlasticity, float AngularPlasticityThreshold)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularPlasticity(bAngularPlasticity, AngularPlasticityThreshold);
    }

    void UPhysicsConstraintComponent_SetAngularOrientationTarget(UPhysicsConstraintComponent* __this, const FRotator& InPosTarget)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularOrientationTarget(InPosTarget);
    }

    void UPhysicsConstraintComponent_SetAngularDriveParams(UPhysicsConstraintComponent* __this, float PositionStrength, float VelocityStrength, float InForceLimit)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularDriveParams(PositionStrength, VelocityStrength, InForceLimit);
    }

    void UPhysicsConstraintComponent_SetAngularDriveMode(UPhysicsConstraintComponent* __this, TEnumAsByte<EAngularDriveMode::Type> DriveMode)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularDriveMode(DriveMode);
    }

    void UPhysicsConstraintComponent_SetAngularBreakable(UPhysicsConstraintComponent* __this, bool bAngularBreakable, float AngularBreakThreshold)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularBreakable(bAngularBreakable, AngularBreakThreshold);
    }

    void UPhysicsConstraintComponent_IsBroken(UPhysicsConstraintComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsBroken();
    }

    void UPhysicsConstraintComponent_GetCurrentTwist(UPhysicsConstraintComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurrentTwist();
    }

    void UPhysicsConstraintComponent_GetCurrentSwing2(UPhysicsConstraintComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurrentSwing2();
    }

    void UPhysicsConstraintComponent_GetCurrentSwing1(UPhysicsConstraintComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurrentSwing1();
    }

    void UPhysicsConstraintComponent_GetConstraintForce(UPhysicsConstraintComponent* __this, FVector& OutLinearForce, FVector& OutAngularForce)
    {
        checkSlow(__this != nullptr);
        __this->GetConstraintForce(OutLinearForce, OutAngularForce);
    }

    void UPhysicsConstraintComponent_GetConstrainedComponents(UPhysicsConstraintComponent* __this, UPrimitiveComponent*& OutComponent1, FName& OutBoneName1, UPrimitiveComponent*& OutComponent2, FName& OutBoneName2)
    {
        checkSlow(__this != nullptr);
        __this->GetConstrainedComponents(OutComponent1, OutBoneName1, OutComponent2, OutBoneName2);
    }

    void UPhysicsConstraintComponent_BreakConstraint(UPhysicsConstraintComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->BreakConstraint();
    }

    void UPhysicsFieldStatics_EvalPhysicsVectorField(const UObject* WorldContextObject, const FVector& WorldPosition, const TEnumAsByte<EFieldVectorType> VectorType, FVector& __result)
    {
        __result = UPhysicsFieldStatics::EvalPhysicsVectorField(WorldContextObject, WorldPosition, VectorType);
    }

    void UPhysicsFieldStatics_EvalPhysicsScalarField(const UObject* WorldContextObject, const FVector& WorldPosition, const TEnumAsByte<EFieldScalarType> ScalarType, float& __result)
    {
        __result = UPhysicsFieldStatics::EvalPhysicsScalarField(WorldContextObject, WorldPosition, ScalarType);
    }

    void UPhysicsFieldStatics_EvalPhysicsIntegerField(const UObject* WorldContextObject, const FVector& WorldPosition, const TEnumAsByte<EFieldIntegerType> IntegerType, int32& __result)
    {
        __result = UPhysicsFieldStatics::EvalPhysicsIntegerField(WorldContextObject, WorldPosition, IntegerType);
    }

    void UPhysicsHandleComponent_SetTargetRotation(UPhysicsHandleComponent* __this, FRotator& NewRotation)
    {
        checkSlow(__this != nullptr);
        __this->SetTargetRotation(NewRotation);
    }

    void UPhysicsHandleComponent_SetTargetLocationAndRotation(UPhysicsHandleComponent* __this, FVector& NewLocation, FRotator& NewRotation)
    {
        checkSlow(__this != nullptr);
        __this->SetTargetLocationAndRotation(NewLocation, NewRotation);
    }

    void UPhysicsHandleComponent_SetTargetLocation(UPhysicsHandleComponent* __this, FVector& NewLocation)
    {
        checkSlow(__this != nullptr);
        __this->SetTargetLocation(NewLocation);
    }

    void UPhysicsHandleComponent_SetLinearStiffness(UPhysicsHandleComponent* __this, float NewLinearStiffness)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearStiffness(NewLinearStiffness);
    }

    void UPhysicsHandleComponent_SetLinearDamping(UPhysicsHandleComponent* __this, float NewLinearDamping)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearDamping(NewLinearDamping);
    }

    void UPhysicsHandleComponent_SetInterpolationSpeed(UPhysicsHandleComponent* __this, float NewInterpolationSpeed)
    {
        checkSlow(__this != nullptr);
        __this->SetInterpolationSpeed(NewInterpolationSpeed);
    }

    void UPhysicsHandleComponent_SetAngularStiffness(UPhysicsHandleComponent* __this, float NewAngularStiffness)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularStiffness(NewAngularStiffness);
    }

    void UPhysicsHandleComponent_SetAngularDamping(UPhysicsHandleComponent* __this, float NewAngularDamping)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularDamping(NewAngularDamping);
    }

    void UPhysicsHandleComponent_ReleaseComponent(UPhysicsHandleComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ReleaseComponent();
    }

    void UPhysicsHandleComponent_GrabComponentAtLocationWithRotation(UPhysicsHandleComponent* __this, UPrimitiveComponent* Component, FName& InBoneName, FVector& Location, FRotator& Rotation)
    {
        checkSlow(__this != nullptr);
        __this->GrabComponentAtLocationWithRotation(Component, InBoneName, Location, Rotation);
    }

    void UPhysicsHandleComponent_GrabComponentAtLocation(UPhysicsHandleComponent* __this, UPrimitiveComponent* Component, FName& InBoneName, FVector& GrabLocation)
    {
        checkSlow(__this != nullptr);
        __this->GrabComponentAtLocation(Component, InBoneName, GrabLocation);
    }

    void UPhysicsHandleComponent_GetTargetLocationAndRotation(UPhysicsHandleComponent* __this, FVector& TargetLocation, FRotator& TargetRotation)
    {
        checkSlow(__this != nullptr);
        __this->GetTargetLocationAndRotation(TargetLocation, TargetRotation);
    }

    void UPhysicsHandleComponent_GetGrabbedComponent(UPhysicsHandleComponent* __this, UPrimitiveComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetGrabbedComponent();
    }

    void UPhysicsSettings_GetPhysicsHistoryCount(UPhysicsSettings* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicsHistoryCount();
    }

    void UPhysicsSpringComponent_GetSpringRestingPoint(UPhysicsSpringComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSpringRestingPoint();
    }

    void UPhysicsSpringComponent_GetSpringDirection(UPhysicsSpringComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSpringDirection();
    }

    void UPhysicsSpringComponent_GetSpringCurrentEndPoint(UPhysicsSpringComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSpringCurrentEndPoint();
    }

    void UPhysicsSpringComponent_GetNormalizedCompressionScalar(UPhysicsSpringComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNormalizedCompressionScalar();
    }

    void UPlatformEventsComponent_SupportsConvertibleLaptops(UPlatformEventsComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->SupportsConvertibleLaptops();
    }

    void UPlatformEventsComponent_IsInTabletMode(UPlatformEventsComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsInTabletMode();
    }

    void UPlatformEventsComponent_IsInLaptopMode(UPlatformEventsComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsInLaptopMode();
    }

    void UPlatformInterfaceWebResponse_GetNumHeaders(UPlatformInterfaceWebResponse* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumHeaders();
    }

    void UPlayerInput_SetMouseSensitivity(UPlayerInput* __this, const float Sensitivity)
    {
        checkSlow(__this != nullptr);
        __this->SetMouseSensitivity(Sensitivity);
    }

    void UPlayerInput_SetBind(UPlayerInput* __this, FName& BindName, const char* Command)
    {
        checkSlow(__this != nullptr);
        __this->SetBind(BindName, US_STRING_TO_TCHAR(Command));
    }

    void UPlayerInput_InvertAxis(UPlayerInput* __this, const FName& AxisName)
    {
        checkSlow(__this != nullptr);
        __this->InvertAxis(AxisName);
    }

    void UPlayerInput_GetOuterAPlayerController(UPlayerInput* __this, APlayerController*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOuterAPlayerController();
    }

    void UPlayerInput_ClearSmoothing(UPlayerInput* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearSmoothing();
    }

    void UPointLightComponent_SetUseInverseSquaredFalloff(UPointLightComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetUseInverseSquaredFalloff(bNewValue);
    }

    void UPointLightComponent_SetSourceRadius(UPointLightComponent* __this, float bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSourceRadius(bNewValue);
    }

    void UPointLightComponent_SetSourceLength(UPointLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSourceLength(NewValue);
    }

    void UPointLightComponent_SetSoftSourceRadius(UPointLightComponent* __this, float bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSoftSourceRadius(bNewValue);
    }

    void UPointLightComponent_SetLightFalloffExponent(UPointLightComponent* __this, float NewLightFalloffExponent)
    {
        checkSlow(__this != nullptr);
        __this->SetLightFalloffExponent(NewLightFalloffExponent);
    }

    void UPointLightComponent_SetInverseExposureBlend(UPointLightComponent* __this, float NewInverseExposureBlend)
    {
        checkSlow(__this != nullptr);
        __this->SetInverseExposureBlend(NewInverseExposureBlend);
    }

    void UPoseableMeshComponent_SetBoneScaleByName(UPoseableMeshComponent* __this, FName& BoneName, FVector& InScale3D, TEnumAsByte<EBoneSpaces::Type> BoneSpace)
    {
        checkSlow(__this != nullptr);
        __this->SetBoneScaleByName(BoneName, InScale3D, BoneSpace);
    }

    void UPoseableMeshComponent_SetBoneRotationByName(UPoseableMeshComponent* __this, FName& BoneName, FRotator& InRotation, TEnumAsByte<EBoneSpaces::Type> BoneSpace)
    {
        checkSlow(__this != nullptr);
        __this->SetBoneRotationByName(BoneName, InRotation, BoneSpace);
    }

    void UPoseableMeshComponent_SetBoneLocationByName(UPoseableMeshComponent* __this, FName& BoneName, FVector& InLocation, TEnumAsByte<EBoneSpaces::Type> BoneSpace)
    {
        checkSlow(__this != nullptr);
        __this->SetBoneLocationByName(BoneName, InLocation, BoneSpace);
    }

    void UPoseableMeshComponent_ResetBoneTransformByName(UPoseableMeshComponent* __this, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->ResetBoneTransformByName(BoneName);
    }

    void UPoseableMeshComponent_GetBoneScaleByName(UPoseableMeshComponent* __this, FName& BoneName, TEnumAsByte<EBoneSpaces::Type> BoneSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBoneScaleByName(BoneName, BoneSpace);
    }

    void UPoseableMeshComponent_GetBoneRotationByName(UPoseableMeshComponent* __this, FName& BoneName, TEnumAsByte<EBoneSpaces::Type> BoneSpace, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBoneRotationByName(BoneName, BoneSpace);
    }

    void UPoseableMeshComponent_GetBoneLocationByName(UPoseableMeshComponent* __this, FName& BoneName, TEnumAsByte<EBoneSpaces::Type> BoneSpace, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBoneLocationByName(BoneName, BoneSpace);
    }

    void UPoseableMeshComponent_CopyPoseFromSkeletalComponent(UPoseableMeshComponent* __this, USkeletalMeshComponent* InComponentToCopy)
    {
        checkSlow(__this != nullptr);
        __this->CopyPoseFromSkeletalComponent(InComponentToCopy);
    }

    void UPrimitiveComponent_WasRecentlyRendered(UPrimitiveComponent* __this, float Tolerance, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->WasRecentlyRendered(Tolerance);
    }

    void UPrimitiveComponent_WakeRigidBody(UPrimitiveComponent* __this, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->WakeRigidBody(BoneName);
    }

    void UPrimitiveComponent_WakeAllRigidBodies(UPrimitiveComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->WakeAllRigidBodies();
    }

    void UPrimitiveComponent_SetVisibleInSceneCaptureOnly(UPrimitiveComponent* __this, bool bValue)
    {
        checkSlow(__this != nullptr);
        __this->SetVisibleInSceneCaptureOnly(bValue);
    }

    void UPrimitiveComponent_SetVisibleInRayTracing(UPrimitiveComponent* __this, bool bNewVisibleInRayTracing)
    {
        checkSlow(__this != nullptr);
        __this->SetVisibleInRayTracing(bNewVisibleInRayTracing);
    }

    void UPrimitiveComponent_SetUseCCD(UPrimitiveComponent* __this, bool InUseCCD, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->SetUseCCD(InUseCCD, BoneName);
    }

    void UPrimitiveComponent_SetUpdateKinematicFromSimulation(UPrimitiveComponent* __this, bool bUpdateKinematicFromSimulation)
    {
        checkSlow(__this != nullptr);
        __this->SetUpdateKinematicFromSimulation(bUpdateKinematicFromSimulation);
    }

    void UPrimitiveComponent_SetTranslucentSortPriority(UPrimitiveComponent* __this, int32 NewTranslucentSortPriority)
    {
        checkSlow(__this != nullptr);
        __this->SetTranslucentSortPriority(NewTranslucentSortPriority);
    }

    void UPrimitiveComponent_SetTranslucencySortDistanceOffset(UPrimitiveComponent* __this, float NewTranslucencySortDistanceOffset)
    {
        checkSlow(__this != nullptr);
        __this->SetTranslucencySortDistanceOffset(NewTranslucencySortDistanceOffset);
    }

    void UPrimitiveComponent_SetStaticWhenNotMoveable(UPrimitiveComponent* __this, bool bInStaticWhenNotMoveable)
    {
        checkSlow(__this != nullptr);
        __this->SetStaticWhenNotMoveable(bInStaticWhenNotMoveable);
    }

    void UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights(UPrimitiveComponent* __this, bool bNewSingleSampleShadowFromStationaryLights)
    {
        checkSlow(__this != nullptr);
        __this->SetSingleSampleShadowFromStationaryLights(bNewSingleSampleShadowFromStationaryLights);
    }

    void UPrimitiveComponent_SetSimulatePhysics(UPrimitiveComponent* __this, bool bSimulate)
    {
        checkSlow(__this != nullptr);
        __this->SetSimulatePhysics(bSimulate);
    }

    void UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveData(UPrimitiveComponent* __this, FName& ParameterName, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetScalarParameterForDefaultCustomPrimitiveData(ParameterName, Value);
    }

    void UPrimitiveComponent_SetScalarParameterForCustomPrimitiveData(UPrimitiveComponent* __this, FName& ParameterName, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetScalarParameterForCustomPrimitiveData(ParameterName, Value);
    }

    void UPrimitiveComponent_SetRenderInMainPass(UPrimitiveComponent* __this, bool bValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRenderInMainPass(bValue);
    }

    void UPrimitiveComponent_SetRenderInDepthPass(UPrimitiveComponent* __this, bool bValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRenderInDepthPass(bValue);
    }

    void UPrimitiveComponent_SetRenderCustomDepth(UPrimitiveComponent* __this, bool bValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRenderCustomDepth(bValue);
    }

    void UPrimitiveComponent_SetReceivesDecals(UPrimitiveComponent* __this, bool bNewReceivesDecals)
    {
        checkSlow(__this != nullptr);
        __this->SetReceivesDecals(bNewReceivesDecals);
    }

    void UPrimitiveComponent_SetPhysMaterialOverride(UPrimitiveComponent* __this, UPhysicalMaterial* NewPhysMaterial)
    {
        checkSlow(__this != nullptr);
        __this->SetPhysMaterialOverride(NewPhysMaterial);
    }

    void UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians(UPrimitiveComponent* __this, float NewMaxAngVel, bool bAddToCurrent, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->SetPhysicsMaxAngularVelocityInRadians(NewMaxAngVel, bAddToCurrent, BoneName);
    }

    void UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees(UPrimitiveComponent* __this, float NewMaxAngVel, bool bAddToCurrent, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->SetPhysicsMaxAngularVelocityInDegrees(NewMaxAngVel, bAddToCurrent, BoneName);
    }

    void UPrimitiveComponent_SetPhysicsLinearVelocity(UPrimitiveComponent* __this, FVector& NewVel, bool bAddToCurrent, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->SetPhysicsLinearVelocity(NewVel, bAddToCurrent, BoneName);
    }

    void UPrimitiveComponent_SetPhysicsAngularVelocityInRadians(UPrimitiveComponent* __this, FVector& NewAngVel, bool bAddToCurrent, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->SetPhysicsAngularVelocityInRadians(NewAngVel, bAddToCurrent, BoneName);
    }

    void UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees(UPrimitiveComponent* __this, FVector& NewAngVel, bool bAddToCurrent, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->SetPhysicsAngularVelocityInDegrees(NewAngVel, bAddToCurrent, BoneName);
    }

    void UPrimitiveComponent_SetOwnerNoSee(UPrimitiveComponent* __this, bool bNewOwnerNoSee)
    {
        checkSlow(__this != nullptr);
        __this->SetOwnerNoSee(bNewOwnerNoSee);
    }

    void UPrimitiveComponent_SetOnlyOwnerSee(UPrimitiveComponent* __this, bool bNewOnlyOwnerSee)
    {
        checkSlow(__this != nullptr);
        __this->SetOnlyOwnerSee(bNewOnlyOwnerSee);
    }

    void UPrimitiveComponent_SetNotifyRigidBodyCollision(UPrimitiveComponent* __this, bool bNewNotifyRigidBodyCollision)
    {
        checkSlow(__this != nullptr);
        __this->SetNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision);
    }

    void UPrimitiveComponent_SetMaxDepenetrationVelocity(UPrimitiveComponent* __this, FName& BoneName, float InMaxDepenetrationVelocity)
    {
        checkSlow(__this != nullptr);
        __this->SetMaxDepenetrationVelocity(BoneName, InMaxDepenetrationVelocity);
    }

    void UPrimitiveComponent_SetMaterialByName(UPrimitiveComponent* __this, FName& MaterialSlotName, UMaterialInterface* Material)
    {
        checkSlow(__this != nullptr);
        __this->SetMaterialByName(MaterialSlotName, Material);
    }

    void UPrimitiveComponent_SetMaterial(UPrimitiveComponent* __this, int32 ElementIndex, UMaterialInterface* Material)
    {
        checkSlow(__this != nullptr);
        __this->SetMaterial(ElementIndex, Material);
    }

    void UPrimitiveComponent_SetMassScale(UPrimitiveComponent* __this, FName& BoneName, float InMassScale)
    {
        checkSlow(__this != nullptr);
        __this->SetMassScale(BoneName, InMassScale);
    }

    void UPrimitiveComponent_SetMassOverrideInKg(UPrimitiveComponent* __this, FName& BoneName, float MassInKg, bool bOverrideMass)
    {
        checkSlow(__this != nullptr);
        __this->SetMassOverrideInKg(BoneName, MassInKg, bOverrideMass);
    }

    void UPrimitiveComponent_SetLinearDamping(UPrimitiveComponent* __this, float InDamping)
    {
        checkSlow(__this != nullptr);
        __this->SetLinearDamping(InDamping);
    }

    void UPrimitiveComponent_SetLightingChannels(UPrimitiveComponent* __this, bool bChannel0, bool bChannel1, bool bChannel2)
    {
        checkSlow(__this != nullptr);
        __this->SetLightingChannels(bChannel0, bChannel1, bChannel2);
    }

    void UPrimitiveComponent_SetLightAttachmentsAsGroup(UPrimitiveComponent* __this, bool bInLightAttachmentsAsGroup)
    {
        checkSlow(__this != nullptr);
        __this->SetLightAttachmentsAsGroup(bInLightAttachmentsAsGroup);
    }

    void UPrimitiveComponent_SetIgnoreBoundsForEditorFocus(UPrimitiveComponent* __this, bool bIgnore)
    {
        checkSlow(__this != nullptr);
        __this->SetIgnoreBoundsForEditorFocus(bIgnore);
    }

    void UPrimitiveComponent_SetHoldout(UPrimitiveComponent* __this, bool bNewHoldout)
    {
        checkSlow(__this != nullptr);
        __this->SetHoldout(bNewHoldout);
    }

    void UPrimitiveComponent_SetHiddenInSceneCapture(UPrimitiveComponent* __this, bool bValue)
    {
        checkSlow(__this != nullptr);
        __this->SetHiddenInSceneCapture(bValue);
    }

    void UPrimitiveComponent_SetGenerateOverlapEvents(UPrimitiveComponent* __this, bool bInGenerateOverlapEvents)
    {
        checkSlow(__this != nullptr);
        __this->SetGenerateOverlapEvents(bInGenerateOverlapEvents);
    }

    void UPrimitiveComponent_SetExcludeFromLightAttachmentGroup(UPrimitiveComponent* __this, bool bInExcludeFromLightAttachmentGroup)
    {
        checkSlow(__this != nullptr);
        __this->SetExcludeFromLightAttachmentGroup(bInExcludeFromLightAttachmentGroup);
    }

    void UPrimitiveComponent_SetExcludedFromHLODLevel(UPrimitiveComponent* __this, EHLODLevelExclusion HLODLevel, bool bExcluded)
    {
        checkSlow(__this != nullptr);
        __this->SetExcludedFromHLODLevel(HLODLevel, bExcluded);
    }

    void UPrimitiveComponent_SetEnableGravity(UPrimitiveComponent* __this, bool bGravityEnabled)
    {
        checkSlow(__this != nullptr);
        __this->SetEnableGravity(bGravityEnabled);
    }

    void UPrimitiveComponent_SetEmissiveLightSource(UPrimitiveComponent* __this, bool NewEmissiveLightSource)
    {
        checkSlow(__this != nullptr);
        __this->SetEmissiveLightSource(NewEmissiveLightSource);
    }

    void UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3(UPrimitiveComponent* __this, int32 DataIndex, FVector& Value)
    {
        checkSlow(__this != nullptr);
        __this->SetDefaultCustomPrimitiveDataVector3(DataIndex, Value);
    }

    void UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloat(UPrimitiveComponent* __this, int32 DataIndex, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetDefaultCustomPrimitiveDataFloat(DataIndex, Value);
    }

    void UPrimitiveComponent_SetCustomPrimitiveDataVector3(UPrimitiveComponent* __this, int32 DataIndex, FVector& Value)
    {
        checkSlow(__this != nullptr);
        __this->SetCustomPrimitiveDataVector3(DataIndex, Value);
    }

    void UPrimitiveComponent_SetCustomPrimitiveDataFloat(UPrimitiveComponent* __this, int32 DataIndex, float Value)
    {
        checkSlow(__this != nullptr);
        __this->SetCustomPrimitiveDataFloat(DataIndex, Value);
    }

    void UPrimitiveComponent_SetCustomDepthStencilWriteMask(UPrimitiveComponent* __this, ERendererStencilMask WriteMaskBit)
    {
        checkSlow(__this != nullptr);
        __this->SetCustomDepthStencilWriteMask(WriteMaskBit);
    }

    void UPrimitiveComponent_SetCustomDepthStencilValue(UPrimitiveComponent* __this, int32 Value)
    {
        checkSlow(__this != nullptr);
        __this->SetCustomDepthStencilValue(Value);
    }

    void UPrimitiveComponent_SetCullDistance(UPrimitiveComponent* __this, float NewCullDistance)
    {
        checkSlow(__this != nullptr);
        __this->SetCullDistance(NewCullDistance);
    }

    void UPrimitiveComponent_SetConstraintMode(UPrimitiveComponent* __this, TEnumAsByte<EDOFMode::Type> ConstraintMode)
    {
        checkSlow(__this != nullptr);
        __this->SetConstraintMode(ConstraintMode);
    }

    void UPrimitiveComponent_SetCollisionResponseToChannel(UPrimitiveComponent* __this, TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse)
    {
        checkSlow(__this != nullptr);
        __this->SetCollisionResponseToChannel(Channel, NewResponse);
    }

    void UPrimitiveComponent_SetCollisionResponseToAllChannels(UPrimitiveComponent* __this, TEnumAsByte<ECollisionResponse> NewResponse)
    {
        checkSlow(__this != nullptr);
        __this->SetCollisionResponseToAllChannels(NewResponse);
    }

    void UPrimitiveComponent_SetCollisionProfileName(UPrimitiveComponent* __this, FName& InCollisionProfileName, bool bUpdateOverlaps)
    {
        checkSlow(__this != nullptr);
        __this->SetCollisionProfileName(InCollisionProfileName, bUpdateOverlaps);
    }

    void UPrimitiveComponent_SetCollisionObjectType(UPrimitiveComponent* __this, TEnumAsByte<ECollisionChannel> Channel)
    {
        checkSlow(__this != nullptr);
        __this->SetCollisionObjectType(Channel);
    }

    void UPrimitiveComponent_SetCollisionEnabled(UPrimitiveComponent* __this, TEnumAsByte<ECollisionEnabled::Type> NewType)
    {
        checkSlow(__this != nullptr);
        __this->SetCollisionEnabled(NewType);
    }

    void UPrimitiveComponent_SetCenterOfMass(UPrimitiveComponent* __this, FVector& CenterOfMassOffset, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->SetCenterOfMass(CenterOfMassOffset, BoneName);
    }

    void UPrimitiveComponent_SetCastShadow(UPrimitiveComponent* __this, bool NewCastShadow)
    {
        checkSlow(__this != nullptr);
        __this->SetCastShadow(NewCastShadow);
    }

    void UPrimitiveComponent_SetCastInsetShadow(UPrimitiveComponent* __this, bool bInCastInsetShadow)
    {
        checkSlow(__this != nullptr);
        __this->SetCastInsetShadow(bInCastInsetShadow);
    }

    void UPrimitiveComponent_SetCastHiddenShadow(UPrimitiveComponent* __this, bool NewCastHiddenShadow)
    {
        checkSlow(__this != nullptr);
        __this->SetCastHiddenShadow(NewCastHiddenShadow);
    }

    void UPrimitiveComponent_SetCastContactShadow(UPrimitiveComponent* __this, bool bInCastContactShadow)
    {
        checkSlow(__this != nullptr);
        __this->SetCastContactShadow(bInCastContactShadow);
    }

    void UPrimitiveComponent_SetBoundsScale(UPrimitiveComponent* __this, float NewBoundsScale)
    {
        checkSlow(__this != nullptr);
        __this->SetBoundsScale(NewBoundsScale);
    }

    void UPrimitiveComponent_SetAngularDamping(UPrimitiveComponent* __this, float InDamping)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularDamping(InDamping);
    }

    void UPrimitiveComponent_SetAllUseCCD(UPrimitiveComponent* __this, bool InUseCCD)
    {
        checkSlow(__this != nullptr);
        __this->SetAllUseCCD(InUseCCD);
    }

    void UPrimitiveComponent_SetAllPhysicsLinearVelocity(UPrimitiveComponent* __this, FVector& NewVel, bool bAddToCurrent)
    {
        checkSlow(__this != nullptr);
        __this->SetAllPhysicsLinearVelocity(NewVel, bAddToCurrent);
    }

    void UPrimitiveComponent_SetAllPhysicsAngularVelocityInRadians(UPrimitiveComponent* __this, const FVector& NewAngVel, bool bAddToCurrent)
    {
        checkSlow(__this != nullptr);
        __this->SetAllPhysicsAngularVelocityInRadians(NewAngVel, bAddToCurrent);
    }

    void UPrimitiveComponent_SetAllPhysicsAngularVelocityInDegrees(UPrimitiveComponent* __this, const FVector& NewAngVel, bool bAddToCurrent)
    {
        checkSlow(__this != nullptr);
        __this->SetAllPhysicsAngularVelocityInDegrees(NewAngVel, bAddToCurrent);
    }

    void UPrimitiveComponent_SetAllMassScale(UPrimitiveComponent* __this, float InMassScale)
    {
        checkSlow(__this != nullptr);
        __this->SetAllMassScale(InMassScale);
    }

    void UPrimitiveComponent_SetAffectIndirectLightingWhileHidden(UPrimitiveComponent* __this, bool bNewAffectIndirectLightingWhileHidden)
    {
        checkSlow(__this != nullptr);
        __this->SetAffectIndirectLightingWhileHidden(bNewAffectIndirectLightingWhileHidden);
    }

    void UPrimitiveComponent_SetAffectDynamicIndirectLighting(UPrimitiveComponent* __this, bool bNewAffectDynamicIndirectLighting)
    {
        checkSlow(__this != nullptr);
        __this->SetAffectDynamicIndirectLighting(bNewAffectDynamicIndirectLighting);
    }

    void UPrimitiveComponent_SetAffectDistanceFieldLighting(UPrimitiveComponent* __this, bool NewAffectDistanceFieldLighting)
    {
        checkSlow(__this != nullptr);
        __this->SetAffectDistanceFieldLighting(NewAffectDistanceFieldLighting);
    }

    void UPrimitiveComponent_ScaleByMomentOfInertia(UPrimitiveComponent* __this, FVector& InputVector, FName& BoneName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->ScaleByMomentOfInertia(InputVector, BoneName);
    }

    void UPrimitiveComponent_PutRigidBodyToSleep(UPrimitiveComponent* __this, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->PutRigidBodyToSleep(BoneName);
    }

    void UPrimitiveComponent_K2_IsQueryCollisionEnabled(UPrimitiveComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_IsQueryCollisionEnabled();
    }

    void UPrimitiveComponent_K2_IsPhysicsCollisionEnabled(UPrimitiveComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_IsPhysicsCollisionEnabled();
    }

    void UPrimitiveComponent_K2_IsCollisionEnabled(UPrimitiveComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_IsCollisionEnabled();
    }

    void UPrimitiveComponent_IsOverlappingComponent(UPrimitiveComponent* __this, const UPrimitiveComponent* OtherComp, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsOverlappingComponent(OtherComp);
    }

    void UPrimitiveComponent_IsOverlappingActor(UPrimitiveComponent* __this, const AActor* Other, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsOverlappingActor(Other);
    }

    void UPrimitiveComponent_IsMaterialSlotNameValid(UPrimitiveComponent* __this, FName& MaterialSlotName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsMaterialSlotNameValid(MaterialSlotName);
    }

    void UPrimitiveComponent_IsGravityEnabled(UPrimitiveComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsGravityEnabled();
    }

    void UPrimitiveComponent_IsExcludedFromHLODLevel(UPrimitiveComponent* __this, EHLODLevelExclusion HLODLevel, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsExcludedFromHLODLevel(HLODLevel);
    }

    void UPrimitiveComponent_IsAnyRigidBodyAwake(UPrimitiveComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsAnyRigidBodyAwake();
    }

    void UPrimitiveComponent_InvalidateLumenSurfaceCache(UPrimitiveComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->InvalidateLumenSurfaceCache();
    }

    void UPrimitiveComponent_IgnoreComponentWhenMoving(UPrimitiveComponent* __this, UPrimitiveComponent* Component, bool bShouldIgnore)
    {
        checkSlow(__this != nullptr);
        __this->IgnoreComponentWhenMoving(Component, bShouldIgnore);
    }

    void UPrimitiveComponent_IgnoreActorWhenMoving(UPrimitiveComponent* __this, AActor* Actor, bool bShouldIgnore)
    {
        checkSlow(__this != nullptr);
        __this->IgnoreActorWhenMoving(Actor, bShouldIgnore);
    }

    void UPrimitiveComponent_GetUpdateKinematicFromSimulation(UPrimitiveComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUpdateKinematicFromSimulation();
    }

    void UPrimitiveComponent_GetStaticWhenNotMoveable(UPrimitiveComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetStaticWhenNotMoveable();
    }

    void UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint(UPrimitiveComponent* __this, FVector& Point, FName& BoneName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicsLinearVelocityAtPoint(Point, BoneName);
    }

    void UPrimitiveComponent_GetPhysicsLinearVelocity(UPrimitiveComponent* __this, FName& BoneName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicsLinearVelocity(BoneName);
    }

    void UPrimitiveComponent_GetPhysicsAngularVelocityInRadians(UPrimitiveComponent* __this, FName& BoneName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicsAngularVelocityInRadians(BoneName);
    }

    void UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees(UPrimitiveComponent* __this, FName& BoneName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicsAngularVelocityInDegrees(BoneName);
    }

    void UPrimitiveComponent_GetNumMaterials(UPrimitiveComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumMaterials();
    }

    void UPrimitiveComponent_GetMaxDepenetrationVelocity(UPrimitiveComponent* __this, FName& BoneName, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaxDepenetrationVelocity(BoneName);
    }

    void UPrimitiveComponent_GetMaterialIndex(UPrimitiveComponent* __this, FName& MaterialSlotName, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaterialIndex(MaterialSlotName);
    }

    void UPrimitiveComponent_GetMaterialFromCollisionFaceIndex(UPrimitiveComponent* __this, int32 FaceIndex, int32& SectionIndex, UMaterialInterface*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaterialFromCollisionFaceIndex(FaceIndex, SectionIndex);
    }

    void UPrimitiveComponent_GetMaterialByName(UPrimitiveComponent* __this, FName& MaterialSlotName, UMaterialInterface*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaterialByName(MaterialSlotName);
    }

    void UPrimitiveComponent_GetMaterial(UPrimitiveComponent* __this, int32 ElementIndex, UMaterialInterface*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMaterial(ElementIndex);
    }

    void UPrimitiveComponent_GetMassScale(UPrimitiveComponent* __this, FName& BoneName, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMassScale(BoneName);
    }

    void UPrimitiveComponent_GetMass(UPrimitiveComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMass();
    }

    void UPrimitiveComponent_GetLinearDamping(UPrimitiveComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLinearDamping();
    }

    void UPrimitiveComponent_GetInertiaTensor(UPrimitiveComponent* __this, FName& BoneName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetInertiaTensor(BoneName);
    }

    void UPrimitiveComponent_GetIgnoreBoundsForEditorFocus(UPrimitiveComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetIgnoreBoundsForEditorFocus();
    }

    void UPrimitiveComponent_GetGenerateOverlapEvents(UPrimitiveComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetGenerateOverlapEvents();
    }

    void UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameter(UPrimitiveComponent* __this, FName& ParameterName, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCustomPrimitiveDataIndexForVectorParameter(ParameterName);
    }

    void UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameter(UPrimitiveComponent* __this, FName& ParameterName, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCustomPrimitiveDataIndexForScalarParameter(ParameterName);
    }

    void UPrimitiveComponent_GetCollisionResponseToChannel(UPrimitiveComponent* __this, TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCollisionResponseToChannel(Channel);
    }

    void UPrimitiveComponent_GetCollisionProfileName(UPrimitiveComponent* __this, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCollisionProfileName();
    }

    void UPrimitiveComponent_GetCollisionObjectType(UPrimitiveComponent* __this, TEnumAsByte<ECollisionChannel>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCollisionObjectType();
    }

    void UPrimitiveComponent_GetCollisionEnabled(UPrimitiveComponent* __this, TEnumAsByte<ECollisionEnabled::Type>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCollisionEnabled();
    }

    void UPrimitiveComponent_GetClosestPointOnCollision(UPrimitiveComponent* __this, const FVector& Point, FVector& OutPointOnBody, FName& BoneName, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetClosestPointOnCollision(Point, OutPointOnBody, BoneName);
    }

    void UPrimitiveComponent_GetCenterOfMass(UPrimitiveComponent* __this, FName& BoneName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCenterOfMass(BoneName);
    }

    void UPrimitiveComponent_GetAngularDamping(UPrimitiveComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAngularDamping();
    }

    void UPrimitiveComponent_CreateDynamicMaterialInstance(UPrimitiveComponent* __this, int32 ElementIndex, UMaterialInterface* SourceMaterial, FName& OptionalName, UMaterialInstanceDynamic*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CreateDynamicMaterialInstance(ElementIndex, SourceMaterial, OptionalName);
    }

    void UPrimitiveComponent_ClearMoveIgnoreComponents(UPrimitiveComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearMoveIgnoreComponents();
    }

    void UPrimitiveComponent_ClearMoveIgnoreActors(UPrimitiveComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearMoveIgnoreActors();
    }

    void UPrimitiveComponent_CanCharacterStepUp(UPrimitiveComponent* __this, APawn* Pawn, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->CanCharacterStepUp(Pawn);
    }

    void UPrimitiveComponent_AddVelocityChangeImpulseAtLocation(UPrimitiveComponent* __this, FVector& Impulse, FVector& Location, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->AddVelocityChangeImpulseAtLocation(Impulse, Location, BoneName);
    }

    void UPrimitiveComponent_AddTorqueInRadians(UPrimitiveComponent* __this, FVector& Torque, FName& BoneName, bool bAccelChange)
    {
        checkSlow(__this != nullptr);
        __this->AddTorqueInRadians(Torque, BoneName, bAccelChange);
    }

    void UPrimitiveComponent_AddTorqueInDegrees(UPrimitiveComponent* __this, FVector& Torque, FName& BoneName, bool bAccelChange)
    {
        checkSlow(__this != nullptr);
        __this->AddTorqueInDegrees(Torque, BoneName, bAccelChange);
    }

    void UPrimitiveComponent_AddRadialImpulse(UPrimitiveComponent* __this, FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange)
    {
        checkSlow(__this != nullptr);
        __this->AddRadialImpulse(Origin, Radius, Strength, Falloff, bVelChange);
    }

    void UPrimitiveComponent_AddRadialForce(UPrimitiveComponent* __this, FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange)
    {
        checkSlow(__this != nullptr);
        __this->AddRadialForce(Origin, Radius, Strength, Falloff, bAccelChange);
    }

    void UPrimitiveComponent_AddImpulseAtLocation(UPrimitiveComponent* __this, FVector& Impulse, FVector& Location, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->AddImpulseAtLocation(Impulse, Location, BoneName);
    }

    void UPrimitiveComponent_AddImpulse(UPrimitiveComponent* __this, FVector& Impulse, FName& BoneName, bool bVelChange)
    {
        checkSlow(__this != nullptr);
        __this->AddImpulse(Impulse, BoneName, bVelChange);
    }

    void UPrimitiveComponent_AddForceAtLocationLocal(UPrimitiveComponent* __this, FVector& Force, FVector& Location, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->AddForceAtLocationLocal(Force, Location, BoneName);
    }

    void UPrimitiveComponent_AddForceAtLocation(UPrimitiveComponent* __this, FVector& Force, FVector& Location, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->AddForceAtLocation(Force, Location, BoneName);
    }

    void UPrimitiveComponent_AddForce(UPrimitiveComponent* __this, FVector& Force, FName& BoneName, bool bAccelChange)
    {
        checkSlow(__this != nullptr);
        __this->AddForce(Force, BoneName, bAccelChange);
    }

    void UPrimitiveComponent_AddAngularImpulseInRadians(UPrimitiveComponent* __this, FVector& Impulse, FName& BoneName, bool bVelChange)
    {
        checkSlow(__this != nullptr);
        __this->AddAngularImpulseInRadians(Impulse, BoneName, bVelChange);
    }

    void UPrimitiveComponent_AddAngularImpulseInDegrees(UPrimitiveComponent* __this, FVector& Impulse, FName& BoneName, bool bVelChange)
    {
        checkSlow(__this != nullptr);
        __this->AddAngularImpulseInDegrees(Impulse, BoneName, bVelChange);
    }

    void UProjectileMovementComponent_SetVelocityInLocalSpace(UProjectileMovementComponent* __this, FVector& NewVelocity)
    {
        checkSlow(__this != nullptr);
        __this->SetVelocityInLocalSpace(NewVelocity);
    }

    void UProjectileMovementComponent_SetInterpolatedComponent(UProjectileMovementComponent* __this, USceneComponent* Component)
    {
        checkSlow(__this != nullptr);
        __this->SetInterpolatedComponent(Component);
    }

    void UProjectileMovementComponent_ResetInterpolation(UProjectileMovementComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetInterpolation();
    }

    void UProjectileMovementComponent_MoveInterpolationTarget(UProjectileMovementComponent* __this, const FVector& NewLocation, const FRotator& NewRotation)
    {
        checkSlow(__this != nullptr);
        __this->MoveInterpolationTarget(NewLocation, NewRotation);
    }

    void UProjectileMovementComponent_LimitVelocity(UProjectileMovementComponent* __this, FVector& NewVelocity, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->LimitVelocity(NewVelocity);
    }

    void UProjectileMovementComponent_IsVelocityUnderSimulationThreshold(UProjectileMovementComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsVelocityUnderSimulationThreshold();
    }

    void UProjectileMovementComponent_IsInterpolationComplete(UProjectileMovementComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsInterpolationComplete();
    }

    void URadialForceComponent_RemoveObjectTypeToAffect(URadialForceComponent* __this, TEnumAsByte<EObjectTypeQuery> ObjectType)
    {
        checkSlow(__this != nullptr);
        __this->RemoveObjectTypeToAffect(ObjectType);
    }

    void URadialForceComponent_FireImpulse(URadialForceComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->FireImpulse();
    }

    void URadialForceComponent_AddObjectTypeToAffect(URadialForceComponent* __this, TEnumAsByte<EObjectTypeQuery> ObjectType)
    {
        checkSlow(__this != nullptr);
        __this->AddObjectTypeToAffect(ObjectType);
    }

    void URectLightComponent_SetSourceWidth(URectLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSourceWidth(NewValue);
    }

    void URectLightComponent_SetSourceTexture(URectLightComponent* __this, UTexture* NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSourceTexture(NewValue);
    }

    void URectLightComponent_SetSourceHeight(URectLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSourceHeight(NewValue);
    }

    void URectLightComponent_SetBarnDoorLength(URectLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetBarnDoorLength(NewValue);
    }

    void URectLightComponent_SetBarnDoorAngle(URectLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetBarnDoorAngle(NewValue);
    }

    void UReplaySubsystem_RequestCheckpoint(UReplaySubsystem* __this)
    {
        checkSlow(__this != nullptr);
        __this->RequestCheckpoint();
    }

    void UReplaySubsystem_IsRecording(UReplaySubsystem* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsRecording();
    }

    void UReplaySubsystem_IsPlaying(UReplaySubsystem* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPlaying();
    }

    void UReplaySubsystem_GetReplayCurrentTime(UReplaySubsystem* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetReplayCurrentTime();
    }

    void URuntimeVirtualTexture_GetTileSize(URuntimeVirtualTexture* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTileSize();
    }

    void URuntimeVirtualTexture_GetTileCount(URuntimeVirtualTexture* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTileCount();
    }

    void URuntimeVirtualTexture_GetTileBorderSize(URuntimeVirtualTexture* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTileBorderSize();
    }

    void URuntimeVirtualTexture_GetSize(URuntimeVirtualTexture* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSize();
    }

    void URuntimeVirtualTexture_GetPageTableSize(URuntimeVirtualTexture* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPageTableSize();
    }

    void USceneCaptureComponent_ShowOnlyComponent(USceneCaptureComponent* __this, UPrimitiveComponent* InComponent)
    {
        checkSlow(__this != nullptr);
        __this->ShowOnlyComponent(InComponent);
    }

    void USceneCaptureComponent_ShowOnlyActorComponents(USceneCaptureComponent* __this, AActor* InActor, const bool bIncludeFromChildActors)
    {
        checkSlow(__this != nullptr);
        __this->ShowOnlyActorComponents(InActor, bIncludeFromChildActors);
    }

    void USceneCaptureComponent_SetCaptureSortPriority(USceneCaptureComponent* __this, int32 NewCaptureSortPriority)
    {
        checkSlow(__this != nullptr);
        __this->SetCaptureSortPriority(NewCaptureSortPriority);
    }

    void USceneCaptureComponent_RemoveShowOnlyComponent(USceneCaptureComponent* __this, UPrimitiveComponent* InComponent)
    {
        checkSlow(__this != nullptr);
        __this->RemoveShowOnlyComponent(InComponent);
    }

    void USceneCaptureComponent_RemoveShowOnlyActorComponents(USceneCaptureComponent* __this, AActor* InActor, const bool bIncludeFromChildActors)
    {
        checkSlow(__this != nullptr);
        __this->RemoveShowOnlyActorComponents(InActor, bIncludeFromChildActors);
    }

    void USceneCaptureComponent_HideComponent(USceneCaptureComponent* __this, UPrimitiveComponent* InComponent)
    {
        checkSlow(__this != nullptr);
        __this->HideComponent(InComponent);
    }

    void USceneCaptureComponent_HideActorComponents(USceneCaptureComponent* __this, AActor* InActor, const bool bIncludeFromChildActors)
    {
        checkSlow(__this != nullptr);
        __this->HideActorComponents(InActor, bIncludeFromChildActors);
    }

    void USceneCaptureComponent_ClearShowOnlyComponents(USceneCaptureComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearShowOnlyComponents();
    }

    void USceneCaptureComponent_ClearHiddenComponents(USceneCaptureComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearHiddenComponents();
    }

    void USceneCaptureComponent2D_CaptureScene(USceneCaptureComponent2D* __this)
    {
        checkSlow(__this != nullptr);
        __this->CaptureScene();
    }

    void USceneCaptureComponentCube_CaptureScene(USceneCaptureComponentCube* __this)
    {
        checkSlow(__this != nullptr);
        __this->CaptureScene();
    }

    void USceneComponent_ToggleVisibility(USceneComponent* __this, bool bPropagateToChildren)
    {
        checkSlow(__this != nullptr);
        __this->ToggleVisibility(bPropagateToChildren);
    }

    void USceneComponent_SetWorldScale3D(USceneComponent* __this, FVector& NewScale)
    {
        checkSlow(__this != nullptr);
        __this->SetWorldScale3D(NewScale);
    }

    void USceneComponent_SetVisibility(USceneComponent* __this, bool bNewVisibility, bool bPropagateToChildren)
    {
        checkSlow(__this != nullptr);
        __this->SetVisibility(bNewVisibility, bPropagateToChildren);
    }

    void USceneComponent_SetShouldUpdatePhysicsVolume(USceneComponent* __this, bool bInShouldUpdatePhysicsVolume)
    {
        checkSlow(__this != nullptr);
        __this->SetShouldUpdatePhysicsVolume(bInShouldUpdatePhysicsVolume);
    }

    void USceneComponent_SetRelativeScale3D(USceneComponent* __this, FVector& NewScale3D)
    {
        checkSlow(__this != nullptr);
        __this->SetRelativeScale3D(NewScale3D);
    }

    void USceneComponent_SetMobility(USceneComponent* __this, TEnumAsByte<EComponentMobility::Type> NewMobility)
    {
        checkSlow(__this != nullptr);
        __this->SetMobility(NewMobility);
    }

    void USceneComponent_SetHiddenInGame(USceneComponent* __this, bool NewHidden, bool bPropagateToChildren)
    {
        checkSlow(__this != nullptr);
        __this->SetHiddenInGame(NewHidden, bPropagateToChildren);
    }

    void USceneComponent_SetAbsolute(USceneComponent* __this, bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale)
    {
        checkSlow(__this != nullptr);
        __this->SetAbsolute(bNewAbsoluteLocation, bNewAbsoluteRotation, bNewAbsoluteScale);
    }

    void USceneComponent_ResetRelativeTransform(USceneComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetRelativeTransform();
    }

    void USceneComponent_K2_GetComponentScale(USceneComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetComponentScale();
    }

    void USceneComponent_K2_GetComponentRotation(USceneComponent* __this, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetComponentRotation();
    }

    void USceneComponent_K2_GetComponentLocation(USceneComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetComponentLocation();
    }

    void USceneComponent_K2_DetachFromComponent(USceneComponent* __this, EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify)
    {
        checkSlow(__this != nullptr);
        __this->K2_DetachFromComponent(LocationRule, RotationRule, ScaleRule, bCallModify);
    }

    void USceneComponent_K2_AttachToComponent(USceneComponent* __this, USceneComponent* Parent, FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_AttachToComponent(Parent, SocketName, LocationRule, RotationRule, ScaleRule, bWeldSimulatedBodies);
    }

    void USceneComponent_K2_AttachTo(USceneComponent* __this, USceneComponent* InParent, FName& InSocketName, TEnumAsByte<EAttachLocation::Type> AttachType, bool bWeldSimulatedBodies, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_AttachTo(InParent, InSocketName, AttachType, bWeldSimulatedBodies);
    }

    void USceneComponent_IsVisible(USceneComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsVisible();
    }

    void USceneComponent_IsSimulatingPhysics(USceneComponent* __this, FName& BoneName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsSimulatingPhysics(BoneName);
    }

    void USceneComponent_IsAnySimulatingPhysics(USceneComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsAnySimulatingPhysics();
    }

    void USceneComponent_GetUpVector(USceneComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUpVector();
    }

    void USceneComponent_GetSocketRotation(USceneComponent* __this, FName& InSocketName, FRotator& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSocketRotation(InSocketName);
    }

    void USceneComponent_GetSocketLocation(USceneComponent* __this, FName& InSocketName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSocketLocation(InSocketName);
    }

    void USceneComponent_GetShouldUpdatePhysicsVolume(USceneComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetShouldUpdatePhysicsVolume();
    }

    void USceneComponent_GetRightVector(USceneComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRightVector();
    }

    void USceneComponent_GetPhysicsVolume(USceneComponent* __this, APhysicsVolume*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicsVolume();
    }

    void USceneComponent_GetNumChildrenComponents(USceneComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumChildrenComponents();
    }

    void USceneComponent_GetForwardVector(USceneComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetForwardVector();
    }

    void USceneComponent_GetComponentVelocity(USceneComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetComponentVelocity();
    }

    void USceneComponent_GetChildComponent(USceneComponent* __this, int32 ChildIndex, USceneComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetChildComponent(ChildIndex);
    }

    void USceneComponent_GetAttachSocketName(USceneComponent* __this, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAttachSocketName();
    }

    void USceneComponent_GetAttachParent(USceneComponent* __this, USceneComponent*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAttachParent();
    }

    void USceneComponent_DoesSocketExist(USceneComponent* __this, FName& InSocketName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->DoesSocketExist(InSocketName);
    }

    void USceneComponent_DetachFromParent(USceneComponent* __this, bool bMaintainWorldPosition, bool bCallModify)
    {
        checkSlow(__this != nullptr);
        __this->DetachFromParent(bMaintainWorldPosition, bCallModify);
    }

    void UShapeComponent_SetLineThickness(UShapeComponent* __this, float Thickness)
    {
        checkSlow(__this != nullptr);
        __this->SetLineThickness(Thickness);
    }

    void USkeletalMesh_SetSkeleton(USkeletalMesh* __this, USkeleton* InSkeleton)
    {
        checkSlow(__this != nullptr);
        __this->SetSkeleton(InSkeleton);
    }

    void USkeletalMesh_SetOverlayMaterialMaxDrawDistance(USkeletalMesh* __this, float InMaxDrawDistance)
    {
        checkSlow(__this != nullptr);
        __this->SetOverlayMaterialMaxDrawDistance(InMaxDrawDistance);
    }

    void USkeletalMesh_SetOverlayMaterial(USkeletalMesh* __this, UMaterialInterface* NewOverlayMaterial)
    {
        checkSlow(__this != nullptr);
        __this->SetOverlayMaterial(NewOverlayMaterial);
    }

    void USkeletalMesh_SetLODSettings(USkeletalMesh* __this, USkeletalMeshLODSettings* InLODSettings)
    {
        checkSlow(__this != nullptr);
        __this->SetLODSettings(InLODSettings);
    }

    void USkeletalMesh_NumSockets(USkeletalMesh* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->NumSockets();
    }

    void USkeletalMesh_IsSectionUsingCloth(USkeletalMesh* __this, int32 InSectionIndex, bool bCheckCorrespondingSections, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsSectionUsingCloth(InSectionIndex, bCheckCorrespondingSections);
    }

    void USkeletalMesh_GetSocketByIndex(USkeletalMesh* __this, int32 Index, USkeletalMeshSocket*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSocketByIndex(Index);
    }

    void USkeletalMesh_GetSkeleton(USkeletalMesh* __this, const USkeleton*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSkeleton();
    }

    void USkeletalMesh_GetShadowPhysicsAsset(USkeletalMesh* __this, UPhysicsAsset*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetShadowPhysicsAsset();
    }

    void USkeletalMesh_GetPhysicsAsset(USkeletalMesh* __this, UPhysicsAsset*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPhysicsAsset();
    }

    void USkeletalMesh_GetOverlayMaterialMaxDrawDistance(USkeletalMesh* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOverlayMaterialMaxDrawDistance();
    }

    void USkeletalMesh_GetOverlayMaterial(USkeletalMesh* __this, UMaterialInterface*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOverlayMaterial();
    }

    void USkeletalMesh_GetNodeMappingContainer(USkeletalMesh* __this, UBlueprint* SourceAsset, UNodeMappingContainer*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNodeMappingContainer(SourceAsset);
    }

    void USkeletalMesh_GetLODSettings(USkeletalMesh* __this, const USkeletalMeshLODSettings*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLODSettings();
    }

    void USkeletalMesh_GetDefaultMeshDeformer(USkeletalMesh* __this, UMeshDeformer*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDefaultMeshDeformer();
    }

    void USkeletalMesh_FindSocketAndIndex(USkeletalMesh* __this, FName& InSocketName, int32& OutIndex, USkeletalMeshSocket*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindSocketAndIndex(InSocketName, OutIndex);
    }

    void USkeletalMesh_HasAssetUserDataOfClass(USkeletalMesh* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void USkeletalMesh_GetAssetUserDataOfClass(USkeletalMesh* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void USkeletalMesh_AddAssetUserDataOfClass(USkeletalMesh* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void USkeletalMeshComponent_UnlinkAnimClassLayers(USkeletalMeshComponent* __this, TSubclassOf<UAnimInstance>& InClass)
    {
        checkSlow(__this != nullptr);
        __this->UnlinkAnimClassLayers(InClass);
    }

    void USkeletalMeshComponent_UnbindClothFromLeaderPoseComponent(USkeletalMeshComponent* __this, bool bRestoreSimulationSpace)
    {
        checkSlow(__this != nullptr);
        __this->UnbindClothFromLeaderPoseComponent(bRestoreSimulationSpace);
    }

    void USkeletalMeshComponent_ToggleDisablePostProcessBlueprint(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ToggleDisablePostProcessBlueprint();
    }

    void USkeletalMeshComponent_TermBodiesBelow(USkeletalMeshComponent* __this, FName& ParentBoneName)
    {
        checkSlow(__this != nullptr);
        __this->TermBodiesBelow(ParentBoneName);
    }

    void USkeletalMeshComponent_SuspendClothingSimulation(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->SuspendClothingSimulation();
    }

    void USkeletalMeshComponent_Stop(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->Stop();
    }

    void USkeletalMeshComponent_SetUpdateClothInEditor(USkeletalMeshComponent* __this, const bool NewUpdateState)
    {
        checkSlow(__this != nullptr);
        __this->SetUpdateClothInEditor(NewUpdateState);
    }

    void USkeletalMeshComponent_SetUpdateAnimationInEditor(USkeletalMeshComponent* __this, const bool NewUpdateState)
    {
        checkSlow(__this != nullptr);
        __this->SetUpdateAnimationInEditor(NewUpdateState);
    }

    void USkeletalMeshComponent_SetTeleportRotationThreshold(USkeletalMeshComponent* __this, float Threshold)
    {
        checkSlow(__this != nullptr);
        __this->SetTeleportRotationThreshold(Threshold);
    }

    void USkeletalMeshComponent_SetTeleportDistanceThreshold(USkeletalMeshComponent* __this, float Threshold)
    {
        checkSlow(__this != nullptr);
        __this->SetTeleportDistanceThreshold(Threshold);
    }

    void USkeletalMeshComponent_SetSkeletalMeshAsset(USkeletalMeshComponent* __this, USkeletalMesh* NewMesh)
    {
        checkSlow(__this != nullptr);
        __this->SetSkeletalMeshAsset(NewMesh);
    }

    void USkeletalMeshComponent_SetPosition(USkeletalMeshComponent* __this, float InPos, bool bFireNotifies)
    {
        checkSlow(__this != nullptr);
        __this->SetPosition(InPos, bFireNotifies);
    }

    void USkeletalMeshComponent_SetPlayRate(USkeletalMeshComponent* __this, float Rate)
    {
        checkSlow(__this != nullptr);
        __this->SetPlayRate(Rate);
    }

    void USkeletalMeshComponent_SetPhysicsBlendWeight(USkeletalMeshComponent* __this, float PhysicsBlendWeight)
    {
        checkSlow(__this != nullptr);
        __this->SetPhysicsBlendWeight(PhysicsBlendWeight);
    }

    void USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow(USkeletalMeshComponent* __this, bool bNewNotifyRigidBodyCollision, FName& BoneName, bool bIncludeSelf)
    {
        checkSlow(__this != nullptr);
        __this->SetNotifyRigidBodyCollisionBelow(bNewNotifyRigidBodyCollision, BoneName, bIncludeSelf);
    }

    void USkeletalMeshComponent_SetMorphTarget(USkeletalMeshComponent* __this, FName& MorphTargetName, float Value, bool bRemoveZeroWeight)
    {
        checkSlow(__this != nullptr);
        __this->SetMorphTarget(MorphTargetName, Value, bRemoveZeroWeight);
    }

    void USkeletalMeshComponent_SetEnablePhysicsBlending(USkeletalMeshComponent* __this, bool bNewBlendPhysics)
    {
        checkSlow(__this != nullptr);
        __this->SetEnablePhysicsBlending(bNewBlendPhysics);
    }

    void USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow(USkeletalMeshComponent* __this, bool bEnableGravity, FName& BoneName, bool bIncludeSelf)
    {
        checkSlow(__this != nullptr);
        __this->SetEnableGravityOnAllBodiesBelow(bEnableGravity, BoneName, bIncludeSelf);
    }

    void USkeletalMeshComponent_SetEnableBodyGravity(USkeletalMeshComponent* __this, bool bEnableGravity, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->SetEnableBodyGravity(bEnableGravity, BoneName);
    }

    void USkeletalMeshComponent_SetDisablePostProcessBlueprint(USkeletalMeshComponent* __this, bool bInDisablePostProcess)
    {
        checkSlow(__this != nullptr);
        __this->SetDisablePostProcessBlueprint(bInDisablePostProcess);
    }

    void USkeletalMeshComponent_SetDisableAnimCurves(USkeletalMeshComponent* __this, bool bInDisableAnimCurves)
    {
        checkSlow(__this != nullptr);
        __this->SetDisableAnimCurves(bInDisableAnimCurves);
    }

    void USkeletalMeshComponent_SetConstraintProfileForAll(USkeletalMeshComponent* __this, FName& ProfileName, bool bDefaultIfNotFound)
    {
        checkSlow(__this != nullptr);
        __this->SetConstraintProfileForAll(ProfileName, bDefaultIfNotFound);
    }

    void USkeletalMeshComponent_SetConstraintProfile(USkeletalMeshComponent* __this, FName& JointName, FName& ProfileName, bool bDefaultIfNotFound)
    {
        checkSlow(__this != nullptr);
        __this->SetConstraintProfile(JointName, ProfileName, bDefaultIfNotFound);
    }

    void USkeletalMeshComponent_SetClothMaxDistanceScale(USkeletalMeshComponent* __this, float Scale)
    {
        checkSlow(__this != nullptr);
        __this->SetClothMaxDistanceScale(Scale);
    }

    void USkeletalMeshComponent_SetBodySimulatePhysics(USkeletalMeshComponent* __this, const FName& InBoneName, bool bSimulate)
    {
        checkSlow(__this != nullptr);
        __this->SetBodySimulatePhysics(InBoneName, bSimulate);
    }

    void USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision(USkeletalMeshComponent* __this, bool bNewNotifyRigidBodyCollision, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->SetBodyNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision, BoneName);
    }

    void USkeletalMeshComponent_SetAnimClass(USkeletalMeshComponent* __this, UClass*& NewClass)
    {
        checkSlow(__this != nullptr);
        __this->SetAnimClass(NewClass);
    }

    void USkeletalMeshComponent_SetAnimationMode(USkeletalMeshComponent* __this, TEnumAsByte<EAnimationMode::Type> InAnimationMode, bool bForceInitAnimScriptInstance)
    {
        checkSlow(__this != nullptr);
        __this->SetAnimationMode(InAnimationMode, bForceInitAnimScriptInstance);
    }

    void USkeletalMeshComponent_SetAnimation(USkeletalMeshComponent* __this, UAnimationAsset* NewAnimToPlay)
    {
        checkSlow(__this != nullptr);
        __this->SetAnimation(NewAnimToPlay);
    }

    void USkeletalMeshComponent_SetAngularLimits(USkeletalMeshComponent* __this, FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle)
    {
        checkSlow(__this != nullptr);
        __this->SetAngularLimits(InBoneName, Swing1LimitAngle, TwistLimitAngle, Swing2LimitAngle);
    }

    void USkeletalMeshComponent_SetAllowRigidBodyAnimNode(USkeletalMeshComponent* __this, bool bInAllow, bool bReinitAnim)
    {
        checkSlow(__this != nullptr);
        __this->SetAllowRigidBodyAnimNode(bInAllow, bReinitAnim);
    }

    void USkeletalMeshComponent_SetAllowClothActors(USkeletalMeshComponent* __this, bool bInAllow)
    {
        checkSlow(__this != nullptr);
        __this->SetAllowClothActors(bInAllow);
    }

    void USkeletalMeshComponent_SetAllowAnimCurveEvaluation(USkeletalMeshComponent* __this, bool bInAllow)
    {
        checkSlow(__this != nullptr);
        __this->SetAllowAnimCurveEvaluation(bInAllow);
    }

    void USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive(USkeletalMeshComponent* __this, bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
    {
        checkSlow(__this != nullptr);
        __this->SetAllMotorsAngularVelocityDrive(bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType);
    }

    void USkeletalMeshComponent_SetAllMotorsAngularPositionDrive(USkeletalMeshComponent* __this, bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
    {
        checkSlow(__this != nullptr);
        __this->SetAllMotorsAngularPositionDrive(bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType);
    }

    void USkeletalMeshComponent_SetAllMotorsAngularDriveParams(USkeletalMeshComponent* __this, float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType)
    {
        checkSlow(__this != nullptr);
        __this->SetAllMotorsAngularDriveParams(InSpring, InDamping, InForceLimit, bSkipCustomPhysicsType);
    }

    void USkeletalMeshComponent_SetAllBodiesSimulatePhysics(USkeletalMeshComponent* __this, bool bNewSimulate)
    {
        checkSlow(__this != nullptr);
        __this->SetAllBodiesSimulatePhysics(bNewSimulate);
    }

    void USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight(USkeletalMeshComponent* __this, float PhysicsBlendWeight, bool bSkipCustomPhysicsType)
    {
        checkSlow(__this != nullptr);
        __this->SetAllBodiesPhysicsBlendWeight(PhysicsBlendWeight, bSkipCustomPhysicsType);
    }

    void USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics(USkeletalMeshComponent* __this, const FName& InBoneName, bool bNewSimulate, bool bIncludeSelf)
    {
        checkSlow(__this != nullptr);
        __this->SetAllBodiesBelowSimulatePhysics(InBoneName, bNewSimulate, bIncludeSelf);
    }

    void USkeletalMeshComponent_SetAllBodiesBelowPhysicsDisabled(USkeletalMeshComponent* __this, const FName& InBoneName, bool bDisabled, bool bIncludeSelf)
    {
        checkSlow(__this != nullptr);
        __this->SetAllBodiesBelowPhysicsDisabled(InBoneName, bDisabled, bIncludeSelf);
    }

    void USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight(USkeletalMeshComponent* __this, const FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf)
    {
        checkSlow(__this != nullptr);
        __this->SetAllBodiesBelowPhysicsBlendWeight(InBoneName, PhysicsBlendWeight, bSkipCustomPhysicsType, bIncludeSelf);
    }

    void USkeletalMeshComponent_SetAllBodiesBelowLinearVelocity(USkeletalMeshComponent* __this, const FName& InBoneName, const FVector& LinearVelocity, bool bIncludeSelf)
    {
        checkSlow(__this != nullptr);
        __this->SetAllBodiesBelowLinearVelocity(InBoneName, LinearVelocity, bIncludeSelf);
    }

    void USkeletalMeshComponent_ResumeClothingSimulation(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResumeClothingSimulation();
    }

    void USkeletalMeshComponent_ResetClothTeleportMode(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetClothTeleportMode();
    }

    void USkeletalMeshComponent_ResetAnimInstanceDynamics(USkeletalMeshComponent* __this, ETeleportType InTeleportType)
    {
        checkSlow(__this != nullptr);
        __this->ResetAnimInstanceDynamics(InTeleportType);
    }

    void USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetAllowedAnimCurveEvaluation();
    }

    void USkeletalMeshComponent_ResetAllBodiesSimulatePhysics(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ResetAllBodiesSimulatePhysics();
    }

    void USkeletalMeshComponent_PlayAnimation(USkeletalMeshComponent* __this, UAnimationAsset* NewAnimToPlay, bool bLooping)
    {
        checkSlow(__this != nullptr);
        __this->PlayAnimation(NewAnimToPlay, bLooping);
    }

    void USkeletalMeshComponent_Play(USkeletalMeshComponent* __this, bool bLooping)
    {
        checkSlow(__this != nullptr);
        __this->Play(bLooping);
    }

    void USkeletalMeshComponent_OverrideAnimationData(USkeletalMeshComponent* __this, UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate)
    {
        checkSlow(__this != nullptr);
        __this->OverrideAnimationData(InAnimToPlay, bIsLooping, bIsPlaying, Position, PlayRate);
    }

    void USkeletalMeshComponent_LinkAnimGraphByTag(USkeletalMeshComponent* __this, FName& InTag, TSubclassOf<UAnimInstance>& InClass)
    {
        checkSlow(__this != nullptr);
        __this->LinkAnimGraphByTag(InTag, InClass);
    }

    void USkeletalMeshComponent_LinkAnimClassLayers(USkeletalMeshComponent* __this, TSubclassOf<UAnimInstance>& InClass)
    {
        checkSlow(__this != nullptr);
        __this->LinkAnimClassLayers(InClass);
    }

    void USkeletalMeshComponent_K2_GetClosestPointOnPhysicsAsset(USkeletalMeshComponent* __this, const FVector& WorldPosition, FVector& ClosestWorldPosition, FVector& Normal, FName& BoneName, float& Distance, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->K2_GetClosestPointOnPhysicsAsset(WorldPosition, ClosestWorldPosition, Normal, BoneName, Distance);
    }

    void USkeletalMeshComponent_IsPlaying(USkeletalMeshComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsPlaying();
    }

    void USkeletalMeshComponent_IsClothingSimulationSuspended(USkeletalMeshComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsClothingSimulationSuspended();
    }

    void USkeletalMeshComponent_IsBodyGravityEnabled(USkeletalMeshComponent* __this, FName& BoneName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsBodyGravityEnabled(BoneName);
    }

    void USkeletalMeshComponent_HasValidAnimationInstance(USkeletalMeshComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasValidAnimationInstance();
    }

    void USkeletalMeshComponent_GetTeleportRotationThreshold(USkeletalMeshComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTeleportRotationThreshold();
    }

    void USkeletalMeshComponent_GetTeleportDistanceThreshold(USkeletalMeshComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTeleportDistanceThreshold();
    }

    void USkeletalMeshComponent_GetSkeletalMeshAsset(USkeletalMeshComponent* __this, USkeletalMesh*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSkeletalMeshAsset();
    }

    void USkeletalMeshComponent_GetSkeletalCenterOfMass(USkeletalMeshComponent* __this, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSkeletalCenterOfMass();
    }

    void USkeletalMeshComponent_GetPostProcessInstance(USkeletalMeshComponent* __this, UAnimInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPostProcessInstance();
    }

    void USkeletalMeshComponent_GetPosition(USkeletalMeshComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPosition();
    }

    void USkeletalMeshComponent_GetPlayRate(USkeletalMeshComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPlayRate();
    }

    void USkeletalMeshComponent_GetMorphTarget(USkeletalMeshComponent* __this, FName& MorphTargetName, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetMorphTarget(MorphTargetName);
    }

    void USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroup(USkeletalMeshComponent* __this, FName& InGroup, UAnimInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLinkedAnimLayerInstanceByGroup(InGroup);
    }

    void USkeletalMeshComponent_GetLinkedAnimLayerInstanceByClass(USkeletalMeshComponent* __this, TSubclassOf<UAnimInstance>& InClass, UAnimInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLinkedAnimLayerInstanceByClass(InClass);
    }

    void USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTag(USkeletalMeshComponent* __this, FName& InTag, UAnimInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetLinkedAnimGraphInstanceByTag(InTag);
    }

    void USkeletalMeshComponent_GetIntegerAttribute_Ref(USkeletalMeshComponent* __this, const FName& BoneName, const FName& AttributeName, int32& OutValue, ECustomBoneAttributeLookup LookupType, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetIntegerAttribute_Ref(BoneName, AttributeName, OutValue, LookupType);
    }

    void USkeletalMeshComponent_GetIntegerAttribute(USkeletalMeshComponent* __this, const FName& BoneName, const FName& AttributeName, int32 DefaultValue, int32& OutValue, ECustomBoneAttributeLookup LookupType, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetIntegerAttribute(BoneName, AttributeName, DefaultValue, OutValue, LookupType);
    }

    void USkeletalMeshComponent_GetFloatAttribute_Ref(USkeletalMeshComponent* __this, const FName& BoneName, const FName& AttributeName, float& OutValue, ECustomBoneAttributeLookup LookupType, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFloatAttribute_Ref(BoneName, AttributeName, OutValue, LookupType);
    }

    void USkeletalMeshComponent_GetFloatAttribute(USkeletalMeshComponent* __this, const FName& BoneName, const FName& AttributeName, float DefaultValue, float& OutValue, ECustomBoneAttributeLookup LookupType, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetFloatAttribute(BoneName, AttributeName, DefaultValue, OutValue, LookupType);
    }

    void USkeletalMeshComponent_GetDisablePostProcessBlueprint(USkeletalMeshComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDisablePostProcessBlueprint();
    }

    void USkeletalMeshComponent_GetDisableAnimCurves(USkeletalMeshComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetDisableAnimCurves();
    }

    void USkeletalMeshComponent_GetCurrentJointAngles(USkeletalMeshComponent* __this, FName& InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle)
    {
        checkSlow(__this != nullptr);
        __this->GetCurrentJointAngles(InBoneName, Swing1Angle, TwistAngle, Swing2Angle);
    }

    void USkeletalMeshComponent_GetClothMaxDistanceScale(USkeletalMeshComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetClothMaxDistanceScale();
    }

    void USkeletalMeshComponent_GetBoneMass(USkeletalMeshComponent* __this, FName& BoneName, bool bScaleMass, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBoneMass(BoneName, bScaleMass);
    }

    void USkeletalMeshComponent_GetBoneLinearVelocity(USkeletalMeshComponent* __this, const FName& InBoneName, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBoneLinearVelocity(InBoneName);
    }

    void USkeletalMeshComponent_GetAnimInstance(USkeletalMeshComponent* __this, UAnimInstance*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAnimInstance();
    }

    void USkeletalMeshComponent_GetAnimationMode(USkeletalMeshComponent* __this, TEnumAsByte<EAnimationMode::Type>& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAnimationMode();
    }

    void USkeletalMeshComponent_GetAllowRigidBodyAnimNode(USkeletalMeshComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAllowRigidBodyAnimNode();
    }

    void USkeletalMeshComponent_GetAllowedAnimCurveEvaluate(USkeletalMeshComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAllowedAnimCurveEvaluate();
    }

    void USkeletalMeshComponent_GetAllowClothActors(USkeletalMeshComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAllowClothActors();
    }

    void USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ForceClothNextUpdateTeleportAndReset();
    }

    void USkeletalMeshComponent_ForceClothNextUpdateTeleport(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ForceClothNextUpdateTeleport();
    }

    void USkeletalMeshComponent_FindConstraintBoneName(USkeletalMeshComponent* __this, int32 ConstraintIndex, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindConstraintBoneName(ConstraintIndex);
    }

    void USkeletalMeshComponent_ClearMorphTargets(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearMorphTargets();
    }

    void USkeletalMeshComponent_BreakConstraint(USkeletalMeshComponent* __this, FVector& Impulse, FVector& HitLocation, FName& InBoneName)
    {
        checkSlow(__this != nullptr);
        __this->BreakConstraint(Impulse, HitLocation, InBoneName);
    }

    void USkeletalMeshComponent_BindClothToLeaderPoseComponent(USkeletalMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->BindClothToLeaderPoseComponent();
    }

    void USkeletalMeshComponent_AllowAnimCurveEvaluation(USkeletalMeshComponent* __this, FName& NameOfCurve, bool bAllow)
    {
        checkSlow(__this != nullptr);
        __this->AllowAnimCurveEvaluation(NameOfCurve, bAllow);
    }

    void USkeletalMeshComponent_AddImpulseToAllBodiesBelow(USkeletalMeshComponent* __this, FVector& Impulse, FName& BoneName, bool bVelChange, bool bIncludeSelf)
    {
        checkSlow(__this != nullptr);
        __this->AddImpulseToAllBodiesBelow(Impulse, BoneName, bVelChange, bIncludeSelf);
    }

    void USkeletalMeshComponent_AddForceToAllBodiesBelow(USkeletalMeshComponent* __this, FVector& Force, FName& BoneName, bool bAccelChange, bool bIncludeSelf)
    {
        checkSlow(__this != nullptr);
        __this->AddForceToAllBodiesBelow(Force, BoneName, bAccelChange, bIncludeSelf);
    }

    void USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight(USkeletalMeshComponent* __this, const FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType)
    {
        checkSlow(__this != nullptr);
        __this->AccumulateAllBodiesBelowPhysicsBlendWeight(InBoneName, AddPhysicsBlendWeight, bSkipCustomPhysicsType);
    }

    void USkeletalMeshSocket_InitializeSocketFromLocation(USkeletalMeshSocket* __this, const USkeletalMeshComponent* SkelComp, FVector& WorldLocation, FVector& WorldNormal)
    {
        checkSlow(__this != nullptr);
        __this->InitializeSocketFromLocation(SkelComp, WorldLocation, WorldNormal);
    }

    void USkeletalMeshSocket_GetSocketLocation(USkeletalMeshSocket* __this, const USkeletalMeshComponent* SkelComp, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSocketLocation(SkelComp);
    }

    void USkeleton_GetBlendProfile(USkeleton* __this, const FName& InProfileName, UBlendProfile*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBlendProfile(InProfileName);
    }

    void USkeleton_AddCompatibleSkeleton(USkeleton* __this, const USkeleton* SourceSkeleton)
    {
        checkSlow(__this != nullptr);
        __this->AddCompatibleSkeleton(SourceSkeleton);
    }

    void USkeleton_HasAssetUserDataOfClass(USkeleton* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void USkeleton_GetAssetUserDataOfClass(USkeleton* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void USkeleton_AddAssetUserDataOfClass(USkeleton* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void USkinnedAsset_FindSocket(USkinnedAsset* __this, FName& InSocketName, USkeletalMeshSocket*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindSocket(InSocketName);
    }

    void USkinnedMeshComponent_UnsetMeshDeformer(USkinnedMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->UnsetMeshDeformer();
    }

    void USkinnedMeshComponent_UnloadSkinWeightProfile(USkinnedMeshComponent* __this, FName& InProfileName)
    {
        checkSlow(__this != nullptr);
        __this->UnloadSkinWeightProfile(InProfileName);
    }

    void USkinnedMeshComponent_UnHideBoneByName(USkinnedMeshComponent* __this, FName& BoneName)
    {
        checkSlow(__this != nullptr);
        __this->UnHideBoneByName(BoneName);
    }

    void USkinnedMeshComponent_TransformToBoneSpace(USkinnedMeshComponent* __this, FName& BoneName, FVector& InPosition, FRotator& InRotation, FVector& OutPosition, FRotator& OutRotation)
    {
        checkSlow(__this != nullptr);
        __this->TransformToBoneSpace(BoneName, InPosition, InRotation, OutPosition, OutRotation);
    }

    void USkinnedMeshComponent_TransformFromBoneSpace(USkinnedMeshComponent* __this, FName& BoneName, FVector& InPosition, FRotator& InRotation, FVector& OutPosition, FRotator& OutRotation)
    {
        checkSlow(__this != nullptr);
        __this->TransformFromBoneSpace(BoneName, InPosition, InRotation, OutPosition, OutRotation);
    }

    void USkinnedMeshComponent_ShowMaterialSection(USkinnedMeshComponent* __this, int32 MaterialID, int32 SectionIndex, bool bShow, int32 LODIndex)
    {
        checkSlow(__this != nullptr);
        __this->ShowMaterialSection(MaterialID, SectionIndex, bShow, LODIndex);
    }

    void USkinnedMeshComponent_ShowAllMaterialSections(USkinnedMeshComponent* __this, int32 LODIndex)
    {
        checkSlow(__this != nullptr);
        __this->ShowAllMaterialSections(LODIndex);
    }

    void USkinnedMeshComponent_SetVertexOffsetUsage(USkinnedMeshComponent* __this, int32 LODIndex, int32 Usage)
    {
        checkSlow(__this != nullptr);
        __this->SetVertexOffsetUsage(LODIndex, Usage);
    }

    void USkinnedMeshComponent_SetSkinWeightProfile(USkinnedMeshComponent* __this, FName& InProfileName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->SetSkinWeightProfile(InProfileName);
    }

    void USkinnedMeshComponent_SetSkinnedAssetAndUpdate(USkinnedMeshComponent* __this, USkinnedAsset* NewMesh, bool bReinitPose)
    {
        checkSlow(__this != nullptr);
        __this->SetSkinnedAssetAndUpdate(NewMesh, bReinitPose);
    }

    void USkinnedMeshComponent_SetRenderStatic(USkinnedMeshComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRenderStatic(bNewValue);
    }

    void USkinnedMeshComponent_SetPhysicsAsset(USkinnedMeshComponent* __this, UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
    {
        checkSlow(__this != nullptr);
        __this->SetPhysicsAsset(NewPhysicsAsset, bForceReInit);
    }

    void USkinnedMeshComponent_SetMeshDeformer(USkinnedMeshComponent* __this, UMeshDeformer* InMeshDeformer)
    {
        checkSlow(__this != nullptr);
        __this->SetMeshDeformer(InMeshDeformer);
    }

    void USkinnedMeshComponent_SetLeaderPoseComponent(USkinnedMeshComponent* __this, USkinnedMeshComponent* NewLeaderBoneComponent, bool bForceUpdate, bool bInFollowerShouldTickPose)
    {
        checkSlow(__this != nullptr);
        __this->SetLeaderPoseComponent(NewLeaderBoneComponent, bForceUpdate, bInFollowerShouldTickPose);
    }

    void USkinnedMeshComponent_SetForcedLOD(USkinnedMeshComponent* __this, int32 InNewForcedLOD)
    {
        checkSlow(__this != nullptr);
        __this->SetForcedLOD(InNewForcedLOD);
    }

    void USkinnedMeshComponent_SetCastCapsuleIndirectShadow(USkinnedMeshComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetCastCapsuleIndirectShadow(bNewValue);
    }

    void USkinnedMeshComponent_SetCastCapsuleDirectShadow(USkinnedMeshComponent* __this, bool bNewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetCastCapsuleDirectShadow(bNewValue);
    }

    void USkinnedMeshComponent_SetCapsuleIndirectShadowMinVisibility(USkinnedMeshComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetCapsuleIndirectShadowMinVisibility(NewValue);
    }

    void USkinnedMeshComponent_OverrideMinLOD(USkinnedMeshComponent* __this, int32 InNewMinLOD)
    {
        checkSlow(__this != nullptr);
        __this->OverrideMinLOD(InNewMinLOD);
    }

    void USkinnedMeshComponent_IsUsingSkinWeightProfile(USkinnedMeshComponent* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsUsingSkinWeightProfile();
    }

    void USkinnedMeshComponent_IsMaterialSectionShown(USkinnedMeshComponent* __this, int32 MaterialID, int32 LODIndex, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsMaterialSectionShown(MaterialID, LODIndex);
    }

    void USkinnedMeshComponent_IsBoneHiddenByName(USkinnedMeshComponent* __this, FName& BoneName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsBoneHiddenByName(BoneName);
    }

    void USkinnedMeshComponent_HideBoneByName(USkinnedMeshComponent* __this, FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption)
    {
        checkSlow(__this != nullptr);
        __this->HideBoneByName(BoneName, PhysBodyOption);
    }

    void USkinnedMeshComponent_GetVertexOffsetUsage(USkinnedMeshComponent* __this, int32 LODIndex, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetVertexOffsetUsage(LODIndex);
    }

    void USkinnedMeshComponent_GetTwistAndSwingAngleOfDeltaRotationFromRefPose(USkinnedMeshComponent* __this, FName& BoneName, float& OutTwistAngle, float& OutSwingAngle, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetTwistAndSwingAngleOfDeltaRotationFromRefPose(BoneName, OutTwistAngle, OutSwingAngle);
    }

    void USkinnedMeshComponent_GetSocketBoneName(USkinnedMeshComponent* __this, FName& InSocketName, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSocketBoneName(InSocketName);
    }

    void USkinnedMeshComponent_GetSkinnedAsset(USkinnedMeshComponent* __this, USkinnedAsset*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSkinnedAsset();
    }

    void USkinnedMeshComponent_GetRefPosePosition(USkinnedMeshComponent* __this, int32 BoneIndex, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetRefPosePosition(BoneIndex);
    }

    void USkinnedMeshComponent_GetPredictedLODLevel(USkinnedMeshComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetPredictedLODLevel();
    }

    void USkinnedMeshComponent_GetParentBone(USkinnedMeshComponent* __this, FName& BoneName, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetParentBone(BoneName);
    }

    void USkinnedMeshComponent_GetNumLODs(USkinnedMeshComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumLODs();
    }

    void USkinnedMeshComponent_GetNumBones(USkinnedMeshComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumBones();
    }

    void USkinnedMeshComponent_GetForcedLOD(USkinnedMeshComponent* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetForcedLOD();
    }

    void USkinnedMeshComponent_GetCurrentSkinWeightProfileName(USkinnedMeshComponent* __this, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetCurrentSkinWeightProfileName();
    }

    void USkinnedMeshComponent_GetBoneName(USkinnedMeshComponent* __this, int32 BoneIndex, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBoneName(BoneIndex);
    }

    void USkinnedMeshComponent_GetBoneIndex(USkinnedMeshComponent* __this, FName& BoneName, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetBoneIndex(BoneName);
    }

    void USkinnedMeshComponent_FindClosestBone_K2(USkinnedMeshComponent* __this, FVector& TestLocation, FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset, FName& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindClosestBone_K2(TestLocation, BoneLocation, IgnoreScale, bRequirePhysicsAsset);
    }

    void USkinnedMeshComponent_ClearVertexColorOverride(USkinnedMeshComponent* __this, int32 LODIndex)
    {
        checkSlow(__this != nullptr);
        __this->ClearVertexColorOverride(LODIndex);
    }

    void USkinnedMeshComponent_ClearSkinWeightProfile(USkinnedMeshComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->ClearSkinWeightProfile();
    }

    void USkinnedMeshComponent_ClearSkinWeightOverride(USkinnedMeshComponent* __this, int32 LODIndex)
    {
        checkSlow(__this != nullptr);
        __this->ClearSkinWeightOverride(LODIndex);
    }

    void USkinnedMeshComponent_BoneIsChildOf(USkinnedMeshComponent* __this, FName& BoneName, FName& ParentBoneName, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->BoneIsChildOf(BoneName, ParentBoneName);
    }

    void USkyAtmosphereComponent_SetSkyLuminanceFactor(USkyAtmosphereComponent* __this, FLinearColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSkyLuminanceFactor(NewValue);
    }

    void USkyAtmosphereComponent_SetRenderInMainPass(USkyAtmosphereComponent* __this, bool bValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRenderInMainPass(bValue);
    }

    void USkyAtmosphereComponent_SetRayleighScatteringScale(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRayleighScatteringScale(NewValue);
    }

    void USkyAtmosphereComponent_SetRayleighScattering(USkyAtmosphereComponent* __this, FLinearColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRayleighScattering(NewValue);
    }

    void USkyAtmosphereComponent_SetRayleighExponentialDistribution(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetRayleighExponentialDistribution(NewValue);
    }

    void USkyAtmosphereComponent_SetOtherAbsorptionScale(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetOtherAbsorptionScale(NewValue);
    }

    void USkyAtmosphereComponent_SetOtherAbsorption(USkyAtmosphereComponent* __this, FLinearColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetOtherAbsorption(NewValue);
    }

    void USkyAtmosphereComponent_SetMultiScatteringFactor(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetMultiScatteringFactor(NewValue);
    }

    void USkyAtmosphereComponent_SetMieScatteringScale(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetMieScatteringScale(NewValue);
    }

    void USkyAtmosphereComponent_SetMieScattering(USkyAtmosphereComponent* __this, FLinearColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetMieScattering(NewValue);
    }

    void USkyAtmosphereComponent_SetMieExponentialDistribution(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetMieExponentialDistribution(NewValue);
    }

    void USkyAtmosphereComponent_SetMieAnisotropy(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetMieAnisotropy(NewValue);
    }

    void USkyAtmosphereComponent_SetMieAbsorptionScale(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetMieAbsorptionScale(NewValue);
    }

    void USkyAtmosphereComponent_SetMieAbsorption(USkyAtmosphereComponent* __this, FLinearColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetMieAbsorption(NewValue);
    }

    void USkyAtmosphereComponent_SetHoldout(USkyAtmosphereComponent* __this, bool bNewHoldout)
    {
        checkSlow(__this != nullptr);
        __this->SetHoldout(bNewHoldout);
    }

    void USkyAtmosphereComponent_SetHeightFogContribution(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetHeightFogContribution(NewValue);
    }

    void USkyAtmosphereComponent_SetGroundAlbedo(USkyAtmosphereComponent* __this, const FColor& NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetGroundAlbedo(NewValue);
    }

    void USkyAtmosphereComponent_SetBottomRadius(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetBottomRadius(NewValue);
    }

    void USkyAtmosphereComponent_SetAtmosphereHeight(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetAtmosphereHeight(NewValue);
    }

    void USkyAtmosphereComponent_SetAerialPespectiveViewDistanceScale(USkyAtmosphereComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetAerialPespectiveViewDistanceScale(NewValue);
    }

    void USkyAtmosphereComponent_ResetAtmosphereLightDirectionOverride(USkyAtmosphereComponent* __this, int32 AtmosphereLightIndex)
    {
        checkSlow(__this != nullptr);
        __this->ResetAtmosphereLightDirectionOverride(AtmosphereLightIndex);
    }

    void USkyAtmosphereComponent_OverrideAtmosphereLightDirection(USkyAtmosphereComponent* __this, int32 AtmosphereLightIndex, const FVector& LightDirection)
    {
        checkSlow(__this != nullptr);
        __this->OverrideAtmosphereLightDirection(AtmosphereLightIndex, LightDirection);
    }

    void USkyAtmosphereComponent_IsAtmosphereLightDirectionOverriden(USkyAtmosphereComponent* __this, int32 AtmosphereLightIndex, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsAtmosphereLightDirectionOverriden(AtmosphereLightIndex);
    }

    void USkyAtmosphereComponent_GetOverridenAtmosphereLightDirection(USkyAtmosphereComponent* __this, int32 AtmosphereLightIndex, FVector& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetOverridenAtmosphereLightDirection(AtmosphereLightIndex);
    }

    void USkyAtmosphereComponent_GetAtmosphereTransmitanceOnGroundAtPlanetTop(USkyAtmosphereComponent* __this, UDirectionalLightComponent* DirectionalLight, FLinearColor& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAtmosphereTransmitanceOnGroundAtPlanetTop(DirectionalLight);
    }

    void USkyLightComponent_SetVolumetricScatteringIntensity(USkyLightComponent* __this, float NewIntensity)
    {
        checkSlow(__this != nullptr);
        __this->SetVolumetricScatteringIntensity(NewIntensity);
    }

    void USkyLightComponent_SetSourceCubemapAngle(USkyLightComponent* __this, float NewValue)
    {
        checkSlow(__this != nullptr);
        __this->SetSourceCubemapAngle(NewValue);
    }

    void USkyLightComponent_SetOcclusionTint(USkyLightComponent* __this, const FColor& InTint)
    {
        checkSlow(__this != nullptr);
        __this->SetOcclusionTint(InTint);
    }

    void USkyLightComponent_SetOcclusionExponent(USkyLightComponent* __this, float InOcclusionExponent)
    {
        checkSlow(__this != nullptr);
        __this->SetOcclusionExponent(InOcclusionExponent);
    }

    void USkyLightComponent_SetOcclusionContrast(USkyLightComponent* __this, float InOcclusionContrast)
    {
        checkSlow(__this != nullptr);
        __this->SetOcclusionContrast(InOcclusionContrast);
    }

    void USkyLightComponent_SetMinOcclusion(USkyLightComponent* __this, float InMinOcclusion)
    {
        checkSlow(__this != nullptr);
        __this->SetMinOcclusion(InMinOcclusion);
    }

    void USkyLightComponent_SetLowerHemisphereColor(USkyLightComponent* __this, const FLinearColor& InLowerHemisphereColor)
    {
        checkSlow(__this != nullptr);
        __this->SetLowerHemisphereColor(InLowerHemisphereColor);
    }

    void USkyLightComponent_SetLightColor(USkyLightComponent* __this, FLinearColor& NewLightColor)
    {
        checkSlow(__this != nullptr);
        __this->SetLightColor(NewLightColor);
    }

    void USkyLightComponent_SetIntensity(USkyLightComponent* __this, float NewIntensity)
    {
        checkSlow(__this != nullptr);
        __this->SetIntensity(NewIntensity);
    }

    void USkyLightComponent_SetIndirectLightingIntensity(USkyLightComponent* __this, float NewIntensity)
    {
        checkSlow(__this != nullptr);
        __this->SetIndirectLightingIntensity(NewIntensity);
    }

    void USkyLightComponent_SetCubemapBlend(USkyLightComponent* __this, UTextureCube* SourceCubemap, UTextureCube* DestinationCubemap, float InBlendFraction)
    {
        checkSlow(__this != nullptr);
        __this->SetCubemapBlend(SourceCubemap, DestinationCubemap, InBlendFraction);
    }

    void USkyLightComponent_SetCubemap(USkyLightComponent* __this, UTextureCube* NewCubemap)
    {
        checkSlow(__this != nullptr);
        __this->SetCubemap(NewCubemap);
    }

    void USkyLightComponent_RecaptureSky(USkyLightComponent* __this)
    {
        checkSlow(__this != nullptr);
        __this->RecaptureSky();
    }

    void USoundBase_IsAttenuationSettingsEditable(USoundBase* __this, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->IsAttenuationSettingsEditable();
    }

    void USoundBase_HasAssetUserDataOfClass(USoundBase* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->HasAssetUserDataOfClass(InUserDataClass);
    }

    void USoundBase_GetAssetUserDataOfClass(USoundBase* __this, TSubclassOf<UAssetUserData>& InUserDataClass, UAssetUserData*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetAssetUserDataOfClass(InUserDataClass);
    }

    void USoundBase_AddAssetUserDataOfClass(USoundBase* __this, TSubclassOf<UAssetUserData>& InUserDataClass, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->AddAssetUserDataOfClass(InUserDataClass);
    }

    void USoundSubmix_StopSpectralAnalysis(USoundSubmix* __this, const UObject* WorldContextObject)
    {
        checkSlow(__this != nullptr);
        __this->StopSpectralAnalysis(WorldContextObject);
    }

    void USoundSubmix_StopRecordingOutput(USoundSubmix* __this, const UObject* WorldContextObject, EAudioRecordingExportType ExportType, const char* Name, const char* Path, USoundWave* ExistingSoundWaveToOverwrite)
    {
        checkSlow(__this != nullptr);
        __this->StopRecordingOutput(WorldContextObject, ExportType, US_STRING_TO_TCHAR(Name), US_STRING_TO_TCHAR(Path), ExistingSoundWaveToOverwrite);
    }

    void USoundSubmix_StopEnvelopeFollowing(USoundSubmix* __this, const UObject* WorldContextObject)
    {
        checkSlow(__this != nullptr);
        __this->StopEnvelopeFollowing(WorldContextObject);
    }

    void USoundSubmix_StartSpectralAnalysis(USoundSubmix* __this, const UObject* WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType)
    {
        checkSlow(__this != nullptr);
        __this->StartSpectralAnalysis(WorldContextObject, FFTSize, InterpolationMethod, WindowType, HopSize, SpectrumType);
    }

    void USoundSubmix_StartRecordingOutput(USoundSubmix* __this, const UObject* WorldContextObject, float ExpectedDuration)
    {
        checkSlow(__this != nullptr);
        __this->StartRecordingOutput(WorldContextObject, ExpectedDuration);
    }

    void USoundSubmix_StartEnvelopeFollowing(USoundSubmix* __this, const UObject* WorldContextObject)
    {
        checkSlow(__this != nullptr);
        __this->StartEnvelopeFollowing(WorldContextObject);
    }

    void USoundSubmix_SetSubmixWetLevel(USoundSubmix* __this, const UObject* WorldContextObject, float InWetLevel)
    {
        checkSlow(__this != nullptr);
        __this->SetSubmixWetLevel(WorldContextObject, InWetLevel);
    }

    void USoundSubmix_SetSubmixOutputVolume(USoundSubmix* __this, const UObject* WorldContextObject, float InOutputVolume)
    {
        checkSlow(__this != nullptr);
        __this->SetSubmixOutputVolume(WorldContextObject, InOutputVolume);
    }

    void USoundSubmix_SetSubmixDryLevel(USoundSubmix* __this, const UObject* WorldContextObject, float InDryLevel)
    {
        checkSlow(__this != nullptr);
        __this->SetSubmixDryLevel(WorldContextObject, InDryLevel);
    }

    void USoundSubmixBase_FindDynamicAncestor(USoundSubmixBase* __this, USoundSubmixBase*& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->FindDynamicAncestor();
    }

    void USoundSubmixBase_DynamicDisconnect(USoundSubmixBase* __this, const UObject* WorldContextObject, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->DynamicDisconnect(WorldContextObject);
    }

    void USoundSubmixBase_DynamicConnect(USoundSubmixBase* __this, const UObject* WorldContextObject, USoundSubmixBase* InParent, bool& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->DynamicConnect(WorldContextObject, InParent);
    }

    void USoundWave_SetSoundAssetCompressionType(USoundWave* __this, ESoundAssetCompressionType InSoundAssetCompressionType, bool bMarkDirty)
    {
        checkSlow(__this != nullptr);
        __this->SetSoundAssetCompressionType(InSoundAssetCompressionType, bMarkDirty);
    }

    void USoundWave_GetSoundAssetCompressionType(USoundWave* __this, ESoundAssetCompressionType& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSoundAssetCompressionType();
    }

    void USparseVolumeTexture_GetSizeZ(USparseVolumeTexture* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSizeZ();
    }

    void USparseVolumeTexture_GetSizeY(USparseVolumeTexture* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSizeY();
    }

    void USparseVolumeTexture_GetSizeX(USparseVolumeTexture* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetSizeX();
    }

    void USparseVolumeTexture_GetNumMipLevels(USparseVolumeTexture* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumMipLevels();
    }

    void USparseVolumeTexture_GetNumFrames(USparseVolumeTexture* __this, int32& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetNumFrames();
    }

    void USphereComponent_SetSphereRadius(USphereComponent* __this, float InSphereRadius, bool bUpdateOverlaps)
    {
        checkSlow(__this != nullptr);
        __this->SetSphereRadius(InSphereRadius, bUpdateOverlaps);
    }

    void USphereComponent_GetUnscaledSphereRadius(USphereComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetUnscaledSphereRadius();
    }

    void USphereComponent_GetShapeScale(USphereComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetShapeScale();
    }

    void USphereComponent_GetScaledSphereRadius(USphereComponent* __this, float& __result)
    {
        checkSlow(__this != nullptr);
        __result = __this->GetScaledSphereRadius();
    }


    // Export register function
    void RegisterFastInvokeApis_2(FUnrealInteropFunctions* InInteropFunctions)
    {
        check(InInteropFunctions);

        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_StartsWith);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_NotEqual_StrStr);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_NotEqual_StriStri);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_MatchesWildcard);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_Len);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_IsNumeric);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_IsEmpty);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_GetCharacterAsNumber);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_FindSubstring);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_EqualEqual_StrStr);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_EqualEqual_StriStri);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_EndsWith);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_Conv_StringToVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_Conv_StringToRotator);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_Conv_StringToName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_Conv_StringToInt64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_Conv_StringToInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_Conv_StringToDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_Conv_StringToColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringLibrary_Contains);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringTableLibrary_IsRegisteredTableId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetStringTableLibrary_IsRegisteredTableEntry);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_UnregisterForRemoteNotifications);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_TransactObject);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_SnapshotObject);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_ShowInterstitialAd);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_ShowAdBanner);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_SetVolumeButtonsHandledBySystem);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_SetSuppressViewportTransitionMessage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_SetGamepadsBlockDeviceFeedback);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_ResetGamepadAssignmentToController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_ResetGamepadAssignments);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_RegisterForRemoteNotifications);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_QuitGame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_PrintString);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_ParseParam);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_MakeLiteralName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_MakeLiteralInt64);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_MakeLiteralInt);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_MakeLiteralDouble);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_MakeLiteralByte);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_MakeLiteralBool);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_LogString);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_LoadInterstitialAd);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_LaunchURL);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_K2_UnPauseTimer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_K2_TimerExists);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_K2_PauseTimer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_K2_IsTimerPaused);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_K2_IsTimerActive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_K2_GetTimerRemainingTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_K2_GetTimerElapsedTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_K2_ClearTimer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsValidClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsValid);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsUnattended);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsStandalone);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsServer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsScreensaverEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsPackagedForDistribution);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsLoggedIn);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsInterstitialAdRequested);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsInterstitialAdAvailable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsDedicatedServer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_IsControllerAssignedToGamepad);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_HideAdBanner);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_HasMultipleLocalPlayers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetVolumeButtonsHandledBySystem);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetRenderingMaterialQualityLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetRenderingDetailMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetOuterObject);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetMinYResolutionForUI);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetMinYResolutionFor3DView);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetGameTimeInSeconds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetGamepadButtonGlyph);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetFrameCount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetConsoleVariableIntValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetConsoleVariableFloatValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetConsoleVariableBoolValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetComponentBounds);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_GetAdIDCount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_ForceCloseAdBanner);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_FlushPersistentDebugLines);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_FlushDebugStrings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_ExecuteConsoleCommand);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_EndTransaction);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugString);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugSphere);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugPoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugLine);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugCylinder);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugCoordinateSystem);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugConeInDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugCircle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugCapsule);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugCamera);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugBox);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DrawDebugArrow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DoesImplementInterface);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_DoesClassImplementInterface);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_CreateCopyForUndoBuffer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_Conv_ObjectToClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_ControlScreensaver);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_CollectGarbage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_CanLaunchURL);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UKismetSystemLibrary_CancelTransaction);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevel_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevel_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevel_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_ShouldBeLoaded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_SetShouldBeVisible);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_SetShouldBeLoaded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_SetPriority);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_SetLevelLODIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_SetIsRequestingUnloadAndRemoval);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_IsStreamingStatePending);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_IsLevelVisible);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_IsLevelLoaded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_GetWorldAssetPackageFName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_GetLoadedLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_GetIsRequestingUnloadAndRemoval);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreaming_CreateInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULevelStreamingDynamic_LoadLevelInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetVolumetricScatteringIntensity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetUseTemperature);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetUseIESBrightness);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetTransmission);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetTemperature);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetSpecularScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetShadowSlopeBias);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetShadowBias);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetLightingChannels);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetLightFunctionScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetLightFunctionMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetLightFunctionFadeDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetLightFunctionDisabledBrightness);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetLightFColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetLightColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetIntensity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetIndirectLightingIntensity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetIESTexture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetIESBrightnessScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetForceCachedShadowsForMovablePrimitives);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetEnableLightShaftBloom);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetBloomTint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetBloomThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetBloomScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetBloomMaxBrightness);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponent_SetAffectTranslucentLighting);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponentBase_SetSamplesPerPixel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponentBase_SetCastVolumetricShadow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponentBase_SetCastShadows);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponentBase_SetCastRaytracedShadows);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponentBase_SetCastDeepShadow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponentBase_SetAffectReflection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponentBase_SetAffectGlobalIllumination);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULightComponentBase_GetLightColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalFogVolumeComponent_SetRadialFogExtinction);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalFogVolumeComponent_SetHeightFogOffset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalFogVolumeComponent_SetHeightFogFalloff);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalFogVolumeComponent_SetHeightFogExtinction);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalFogVolumeComponent_SetFogPhaseG);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalFogVolumeComponent_SetFogEmissive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalFogVolumeComponent_SetFogAlbedo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalLightComponent_SetIntensityUnits);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalLightComponent_SetAttenuationRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalLightComponent_GetUnitsConversionFactor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_WasSaveRequested);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_WasLoaded);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_WasLastSaveSuccessful);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_SaveGameToSlotForLocalPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_ResetToDefault);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_OnResetToDefault);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_OnPreSave);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_OnPostSave);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_OnPostLoad);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_LoadOrCreateSaveGameForLocalPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_IsSaveInProgress);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_GetSavedDataVersion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_GetPlatformUserIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_GetPlatformUserId);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_GetLocalPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_GetLatestDataVersion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_GetInvalidDataVersion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(ULocalPlayerSaveGame_AsyncSaveGameToSlotForLocalPlayer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialBillboardComponent_AddElement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_SetVectorParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_SetTextureParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_SetSparseVolumeTextureParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_SetScalarParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_SetScalarParameterByIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_SetRuntimeVirtualTextureParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_K2_GetVectorParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_K2_GetTextureParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_K2_GetScalarParameterValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_InitializeScalarParameterAndGetIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_CopyParameterOverrides);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInstanceDynamic_CopyInterpParameters);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInterface_SetForceMipLevelsToBeResident);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInterface_GetPhysicalMaterialMask);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInterface_GetPhysicalMaterialFromMap);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInterface_GetPhysicalMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInterface_GetNaniteOverideMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInterface_GetBlendMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInterface_GetBaseMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInterface_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInterface_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMaterialInterface_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMeshComponent_SetVectorParameterValueOnMaterials);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMeshComponent_SetScalarParameterValueOnMaterials);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMeshComponent_SetOverlayMaterialMaxDrawDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMeshComponent_SetOverlayMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMeshComponent_PrestreamTextures);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMeshComponent_PrestreamMeshLODs);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMeshComponent_GetOverlayMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_StopMovementImmediately);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_SnapUpdatedComponentToPlane);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_SetUpdatedComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_SetPlaneConstraintOrigin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_SetPlaneConstraintNormal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_SetPlaneConstraintFromVectors);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_SetPlaneConstraintEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_SetPlaneConstraintAxisSetting);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_PhysicsVolumeChanged);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_IsExceedingMaxSpeed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_GetPlaneConstraintOrigin);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_GetPlaneConstraintNormal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_GetPlaneConstraintAxisSetting);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_GetPhysicsVolume);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_GetMaxSpeed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_GetGravityZ);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_ConstrainNormalToPlane);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_ConstrainLocationToPlane);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UMovementComponent_ConstrainDirectionToPlane);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UNavMovementComponent_StopMovementKeepPathing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UNavMovementComponent_StopActiveMovement);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UNavMovementComponent_IsSwimming);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UNavMovementComponent_IsMovingOnGround);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UNavMovementComponent_IsFlying);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UNavMovementComponent_IsFalling);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UNavMovementComponent_IsCrouching);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UNetPushModelHelpers_MarkPropertyDirty);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_SetTrailSourceData);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_SetTemplate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_SetMaterialParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_SetBeamTargetTangent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_SetBeamTargetStrength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_SetBeamTargetPoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_SetBeamSourceTangent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_SetBeamSourceStrength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_SetBeamSourcePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_SetBeamEndPoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_GetNumActiveParticles);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_GetNamedMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_GetBeamTargetTangent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_GetBeamTargetStrength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_GetBeamTargetPoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_GetBeamSourceTangent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_GetBeamSourceStrength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_GetBeamSourcePoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_GetBeamEndPoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_GenerateParticleEvent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_EndTrails);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_CreateNamedDynamicMaterialInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UParticleSystemComponent_BeginTrails);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPawnMovementComponent_IsMoveInputIgnored);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPawnMovementComponent_GetPendingInputVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPawnMovementComponent_GetPawnOwner);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPawnMovementComponent_GetLastInputVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPawnMovementComponent_ConsumeInputVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPawnMovementComponent_AddInputVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPawnNoiseEmitterComponent_MakeNoise);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicalAnimationComponent_SetStrengthMultiplyer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicalAnimationComponent_SetSkeletalMeshComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetProjectionParams);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetProjectionEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetOrientationDriveTwistAndSwing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetOrientationDriveSLERP);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetLinearZLimit);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetLinearYLimit);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetLinearXLimit);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetLinearVelocityTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetLinearVelocityDrive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetLinearPositionTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetLinearPositionDrive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetLinearPlasticity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetLinearDriveParams);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetLinearBreakable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetDisableCollision);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetContactTransferScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetConstraintReferencePosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetConstraintReferenceOrientation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetConstrainedComponents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularVelocityTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularVelocityDriveTwistAndSwing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularVelocityDriveSLERP);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularTwistLimit);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularSwing2Limit);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularSwing1Limit);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularPlasticity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularOrientationTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularDriveParams);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularDriveMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_SetAngularBreakable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_IsBroken);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_GetCurrentTwist);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_GetCurrentSwing2);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_GetCurrentSwing1);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_GetConstraintForce);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_GetConstrainedComponents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsConstraintComponent_BreakConstraint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsFieldStatics_EvalPhysicsVectorField);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsFieldStatics_EvalPhysicsScalarField);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsFieldStatics_EvalPhysicsIntegerField);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_SetTargetRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_SetTargetLocationAndRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_SetTargetLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_SetLinearStiffness);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_SetLinearDamping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_SetInterpolationSpeed);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_SetAngularStiffness);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_SetAngularDamping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_ReleaseComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_GrabComponentAtLocationWithRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_GrabComponentAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_GetTargetLocationAndRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsHandleComponent_GetGrabbedComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsSettings_GetPhysicsHistoryCount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsSpringComponent_GetSpringRestingPoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsSpringComponent_GetSpringDirection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsSpringComponent_GetSpringCurrentEndPoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPhysicsSpringComponent_GetNormalizedCompressionScalar);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPlatformEventsComponent_SupportsConvertibleLaptops);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPlatformEventsComponent_IsInTabletMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPlatformEventsComponent_IsInLaptopMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPlatformInterfaceWebResponse_GetNumHeaders);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPlayerInput_SetMouseSensitivity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPlayerInput_SetBind);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPlayerInput_InvertAxis);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPlayerInput_GetOuterAPlayerController);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPlayerInput_ClearSmoothing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPointLightComponent_SetUseInverseSquaredFalloff);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPointLightComponent_SetSourceRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPointLightComponent_SetSourceLength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPointLightComponent_SetSoftSourceRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPointLightComponent_SetLightFalloffExponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPointLightComponent_SetInverseExposureBlend);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPoseableMeshComponent_SetBoneScaleByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPoseableMeshComponent_SetBoneRotationByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPoseableMeshComponent_SetBoneLocationByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPoseableMeshComponent_ResetBoneTransformByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPoseableMeshComponent_GetBoneScaleByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPoseableMeshComponent_GetBoneRotationByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPoseableMeshComponent_GetBoneLocationByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPoseableMeshComponent_CopyPoseFromSkeletalComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_WasRecentlyRendered);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_WakeRigidBody);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_WakeAllRigidBodies);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetVisibleInSceneCaptureOnly);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetVisibleInRayTracing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetUseCCD);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetUpdateKinematicFromSimulation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetTranslucentSortPriority);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetTranslucencySortDistanceOffset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetStaticWhenNotMoveable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetSimulatePhysics);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveData);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetScalarParameterForCustomPrimitiveData);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetRenderInMainPass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetRenderInDepthPass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetRenderCustomDepth);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetReceivesDecals);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetPhysMaterialOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetPhysicsLinearVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetPhysicsAngularVelocityInRadians);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetOwnerNoSee);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetOnlyOwnerSee);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetNotifyRigidBodyCollision);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetMaxDepenetrationVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetMaterialByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetMassScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetMassOverrideInKg);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetLinearDamping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetLightingChannels);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetLightAttachmentsAsGroup);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetIgnoreBoundsForEditorFocus);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetHoldout);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetHiddenInSceneCapture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetGenerateOverlapEvents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetExcludeFromLightAttachmentGroup);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetExcludedFromHLODLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetEnableGravity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetEmissiveLightSource);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCustomPrimitiveDataVector3);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCustomPrimitiveDataFloat);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCustomDepthStencilWriteMask);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCustomDepthStencilValue);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCullDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetConstraintMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCollisionResponseToChannel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCollisionResponseToAllChannels);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCollisionProfileName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCollisionObjectType);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCollisionEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCenterOfMass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCastShadow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCastInsetShadow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCastHiddenShadow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetCastContactShadow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetBoundsScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetAngularDamping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetAllUseCCD);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetAllPhysicsLinearVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetAllPhysicsAngularVelocityInRadians);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetAllPhysicsAngularVelocityInDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetAllMassScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetAffectIndirectLightingWhileHidden);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetAffectDynamicIndirectLighting);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_SetAffectDistanceFieldLighting);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_ScaleByMomentOfInertia);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_PutRigidBodyToSleep);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_K2_IsQueryCollisionEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_K2_IsPhysicsCollisionEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_K2_IsCollisionEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_IsOverlappingComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_IsOverlappingActor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_IsMaterialSlotNameValid);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_IsGravityEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_IsExcludedFromHLODLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_IsAnyRigidBodyAwake);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_InvalidateLumenSurfaceCache);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_IgnoreComponentWhenMoving);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_IgnoreActorWhenMoving);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetUpdateKinematicFromSimulation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetStaticWhenNotMoveable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetPhysicsLinearVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetPhysicsAngularVelocityInRadians);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetNumMaterials);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetMaxDepenetrationVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetMaterialIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetMaterialFromCollisionFaceIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetMaterialByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetMassScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetMass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetLinearDamping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetInertiaTensor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetIgnoreBoundsForEditorFocus);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetGenerateOverlapEvents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameter);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetCollisionResponseToChannel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetCollisionProfileName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetCollisionObjectType);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetCollisionEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetClosestPointOnCollision);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetCenterOfMass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_GetAngularDamping);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_CreateDynamicMaterialInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_ClearMoveIgnoreComponents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_ClearMoveIgnoreActors);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_CanCharacterStepUp);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddVelocityChangeImpulseAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddTorqueInRadians);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddTorqueInDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddRadialImpulse);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddRadialForce);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddImpulseAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddImpulse);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddForceAtLocationLocal);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddForceAtLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddForce);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddAngularImpulseInRadians);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UPrimitiveComponent_AddAngularImpulseInDegrees);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UProjectileMovementComponent_SetVelocityInLocalSpace);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UProjectileMovementComponent_SetInterpolatedComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UProjectileMovementComponent_ResetInterpolation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UProjectileMovementComponent_MoveInterpolationTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UProjectileMovementComponent_LimitVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UProjectileMovementComponent_IsVelocityUnderSimulationThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UProjectileMovementComponent_IsInterpolationComplete);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URadialForceComponent_RemoveObjectTypeToAffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URadialForceComponent_FireImpulse);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URadialForceComponent_AddObjectTypeToAffect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URectLightComponent_SetSourceWidth);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URectLightComponent_SetSourceTexture);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URectLightComponent_SetSourceHeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URectLightComponent_SetBarnDoorLength);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URectLightComponent_SetBarnDoorAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UReplaySubsystem_RequestCheckpoint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UReplaySubsystem_IsRecording);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UReplaySubsystem_IsPlaying);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UReplaySubsystem_GetReplayCurrentTime);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URuntimeVirtualTexture_GetTileSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URuntimeVirtualTexture_GetTileCount);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URuntimeVirtualTexture_GetTileBorderSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URuntimeVirtualTexture_GetSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(URuntimeVirtualTexture_GetPageTableSize);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponent_ShowOnlyComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponent_ShowOnlyActorComponents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponent_SetCaptureSortPriority);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponent_RemoveShowOnlyComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponent_RemoveShowOnlyActorComponents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponent_HideComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponent_HideActorComponents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponent_ClearShowOnlyComponents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponent_ClearHiddenComponents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponent2D_CaptureScene);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneCaptureComponentCube_CaptureScene);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_ToggleVisibility);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_SetWorldScale3D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_SetVisibility);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_SetShouldUpdatePhysicsVolume);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_SetRelativeScale3D);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_SetMobility);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_SetHiddenInGame);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_SetAbsolute);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_ResetRelativeTransform);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_K2_GetComponentScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_K2_GetComponentRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_K2_GetComponentLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_K2_DetachFromComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_K2_AttachToComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_K2_AttachTo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_IsVisible);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_IsSimulatingPhysics);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_IsAnySimulatingPhysics);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetUpVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetSocketRotation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetSocketLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetShouldUpdatePhysicsVolume);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetRightVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetPhysicsVolume);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetNumChildrenComponents);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetForwardVector);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetComponentVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetChildComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetAttachSocketName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_GetAttachParent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_DoesSocketExist);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USceneComponent_DetachFromParent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(UShapeComponent_SetLineThickness);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_SetSkeleton);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_SetOverlayMaterialMaxDrawDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_SetOverlayMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_SetLODSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_NumSockets);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_IsSectionUsingCloth);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_GetSocketByIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_GetSkeleton);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_GetShadowPhysicsAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_GetPhysicsAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_GetOverlayMaterialMaxDrawDistance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_GetOverlayMaterial);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_GetNodeMappingContainer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_GetLODSettings);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_GetDefaultMeshDeformer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_FindSocketAndIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMesh_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_UnlinkAnimClassLayers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_UnbindClothFromLeaderPoseComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_ToggleDisablePostProcessBlueprint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_TermBodiesBelow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SuspendClothingSimulation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_Stop);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetUpdateClothInEditor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetUpdateAnimationInEditor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetTeleportRotationThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetTeleportDistanceThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetSkeletalMeshAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetPlayRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetPhysicsBlendWeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetMorphTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetEnablePhysicsBlending);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetEnableBodyGravity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetDisablePostProcessBlueprint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetDisableAnimCurves);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetConstraintProfileForAll);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetConstraintProfile);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetClothMaxDistanceScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetBodySimulatePhysics);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAnimClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAnimationMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAnimation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAngularLimits);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllowRigidBodyAnimNode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllowClothActors);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllowAnimCurveEvaluation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllMotorsAngularPositionDrive);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllMotorsAngularDriveParams);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllBodiesSimulatePhysics);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllBodiesBelowPhysicsDisabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_SetAllBodiesBelowLinearVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_ResumeClothingSimulation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_ResetClothTeleportMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_ResetAnimInstanceDynamics);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_ResetAllBodiesSimulatePhysics);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_PlayAnimation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_Play);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_OverrideAnimationData);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_LinkAnimGraphByTag);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_LinkAnimClassLayers);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_K2_GetClosestPointOnPhysicsAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_IsPlaying);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_IsClothingSimulationSuspended);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_IsBodyGravityEnabled);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_HasValidAnimationInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetTeleportRotationThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetTeleportDistanceThreshold);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetSkeletalMeshAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetSkeletalCenterOfMass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetPostProcessInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetPosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetPlayRate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetMorphTarget);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroup);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetLinkedAnimLayerInstanceByClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTag);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetIntegerAttribute_Ref);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetIntegerAttribute);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetFloatAttribute_Ref);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetFloatAttribute);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetDisablePostProcessBlueprint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetDisableAnimCurves);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetCurrentJointAngles);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetClothMaxDistanceScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetBoneMass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetBoneLinearVelocity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetAnimInstance);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetAnimationMode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetAllowRigidBodyAnimNode);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetAllowedAnimCurveEvaluate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_GetAllowClothActors);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_ForceClothNextUpdateTeleport);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_FindConstraintBoneName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_ClearMorphTargets);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_BreakConstraint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_BindClothToLeaderPoseComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_AllowAnimCurveEvaluation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_AddImpulseToAllBodiesBelow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_AddForceToAllBodiesBelow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshSocket_InitializeSocketFromLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeletalMeshSocket_GetSocketLocation);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeleton_GetBlendProfile);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeleton_AddCompatibleSkeleton);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeleton_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeleton_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkeleton_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedAsset_FindSocket);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_UnsetMeshDeformer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_UnloadSkinWeightProfile);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_UnHideBoneByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_TransformToBoneSpace);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_TransformFromBoneSpace);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_ShowMaterialSection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_ShowAllMaterialSections);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetVertexOffsetUsage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetSkinWeightProfile);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetSkinnedAssetAndUpdate);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetRenderStatic);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetPhysicsAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetMeshDeformer);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetLeaderPoseComponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetForcedLOD);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetCastCapsuleIndirectShadow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetCastCapsuleDirectShadow);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_SetCapsuleIndirectShadowMinVisibility);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_OverrideMinLOD);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_IsUsingSkinWeightProfile);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_IsMaterialSectionShown);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_IsBoneHiddenByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_HideBoneByName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetVertexOffsetUsage);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetTwistAndSwingAngleOfDeltaRotationFromRefPose);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetSocketBoneName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetSkinnedAsset);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetRefPosePosition);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetPredictedLODLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetParentBone);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetNumLODs);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetNumBones);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetForcedLOD);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetCurrentSkinWeightProfileName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetBoneName);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_GetBoneIndex);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_FindClosestBone_K2);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_ClearVertexColorOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_ClearSkinWeightProfile);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_ClearSkinWeightOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkinnedMeshComponent_BoneIsChildOf);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetSkyLuminanceFactor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetRenderInMainPass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetRayleighScatteringScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetRayleighScattering);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetRayleighExponentialDistribution);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetOtherAbsorptionScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetOtherAbsorption);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetMultiScatteringFactor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetMieScatteringScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetMieScattering);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetMieExponentialDistribution);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetMieAnisotropy);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetMieAbsorptionScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetMieAbsorption);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetHoldout);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetHeightFogContribution);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetGroundAlbedo);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetBottomRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetAtmosphereHeight);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_SetAerialPespectiveViewDistanceScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_ResetAtmosphereLightDirectionOverride);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_OverrideAtmosphereLightDirection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_IsAtmosphereLightDirectionOverriden);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_GetOverridenAtmosphereLightDirection);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyAtmosphereComponent_GetAtmosphereTransmitanceOnGroundAtPlanetTop);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetVolumetricScatteringIntensity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetSourceCubemapAngle);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetOcclusionTint);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetOcclusionExponent);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetOcclusionContrast);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetMinOcclusion);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetLowerHemisphereColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetLightColor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetIntensity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetIndirectLightingIntensity);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetCubemapBlend);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_SetCubemap);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USkyLightComponent_RecaptureSky);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundBase_IsAttenuationSettingsEditable);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundBase_HasAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundBase_GetAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundBase_AddAssetUserDataOfClass);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmix_StopSpectralAnalysis);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmix_StopRecordingOutput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmix_StopEnvelopeFollowing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmix_StartSpectralAnalysis);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmix_StartRecordingOutput);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmix_StartEnvelopeFollowing);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmix_SetSubmixWetLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmix_SetSubmixOutputVolume);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmix_SetSubmixDryLevel);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmixBase_FindDynamicAncestor);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmixBase_DynamicDisconnect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundSubmixBase_DynamicConnect);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundWave_SetSoundAssetCompressionType);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USoundWave_GetSoundAssetCompressionType);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USparseVolumeTexture_GetSizeZ);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USparseVolumeTexture_GetSizeY);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USparseVolumeTexture_GetSizeX);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USparseVolumeTexture_GetNumMipLevels);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USparseVolumeTexture_GetNumFrames);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USphereComponent_SetSphereRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USphereComponent_GetUnscaledSphereRadius);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USphereComponent_GetShapeScale);
        US_ADD_GENERATED_GLOBAL_INTEROP_FUNCTION_HELPER(USphereComponent_GetScaledSphereRadius);
    }
}
#if PLATFORM_WINDOWS
#pragma warning(pop)
#else
#pragma GCC diagnostic pop
#endif
// ReSharper restore all

